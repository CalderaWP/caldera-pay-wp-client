<?php
/**
 * PGApiEmailReceiptResponse
 *
 * PHP version 5
 *
 * @category Class
 * @package  calderaPayQualpayPaymentGateway
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Qualpay Payment Gateway API
 *
 * This document describes the Qualpay Payment Gateway API.
 *
 * OpenAPI spec version: 1.7
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.3.1
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace calderaPayQualpayPaymentGateway\Model;

use \ArrayAccess;
use \calderaPayQualpayPaymentGateway\ObjectSerializer;

/**
 * PGApiEmailReceiptResponse Class Doc Comment
 *
 * @category Class
 * @package  calderaPayQualpayPaymentGateway
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class PGApiEmailReceiptResponse implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'PGApiEmailReceiptResponse';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'pg_id' => 'string',
        'rcode' => 'string',
        'rmsg' => 'string',
        'echo_fields' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'pg_id' => null,
        'rcode' => null,
        'rmsg' => null,
        'echo_fields' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'pg_id' => 'pg_id',
        'rcode' => 'rcode',
        'rmsg' => 'rmsg',
        'echo_fields' => 'echo_fields'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'pg_id' => 'setPgId',
        'rcode' => 'setRcode',
        'rmsg' => 'setRmsg',
        'echo_fields' => 'setEchoFields'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'pg_id' => 'getPgId',
        'rcode' => 'getRcode',
        'rmsg' => 'getRmsg',
        'echo_fields' => 'getEchoFields'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['pg_id'] = isset($data['pg_id']) ? $data['pg_id'] : null;
        $this->container['rcode'] = isset($data['rcode']) ? $data['rcode'] : null;
        $this->container['rmsg'] = isset($data['rmsg']) ? $data['rmsg'] : null;
        $this->container['echo_fields'] = isset($data['echo_fields']) ? $data['echo_fields'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        return true;
    }


    /**
     * Gets pg_id
     *
     * @return string
     */
    public function getPgId()
    {
        return $this->container['pg_id'];
    }

    /**
     * Sets pg_id
     *
     * @param string $pg_id <strong>Format: </strong>Fixed length, 32 AN<br><strong>Description: </strong>32-byte unique identifier generated by the payment gateway, returned in all valid responses.
     *
     * @return $this
     */
    public function setPgId($pg_id)
    {
        $this->container['pg_id'] = $pg_id;

        return $this;
    }

    /**
     * Gets rcode
     *
     * @return string
     */
    public function getRcode()
    {
        return $this->container['rcode'];
    }

    /**
     * Sets rcode
     *
     * @param string $rcode <strong>Format: </strong>Fixed length, 3 AN<br><strong>Description: </strong>Response code from the payment gateway. \"000\" indicates success. Refer to <a href=\"/developer/api/reference#api-response-codes\"target=\"_blank\">Platform API Response Codes</a> for entire list of Payment Gateway Response Codes.
     *
     * @return $this
     */
    public function setRcode($rcode)
    {
        $this->container['rcode'] = $rcode;

        return $this;
    }

    /**
     * Gets rmsg
     *
     * @return string
     */
    public function getRmsg()
    {
        return $this->container['rmsg'];
    }

    /**
     * Sets rmsg
     *
     * @param string $rmsg <strong>Format: </strong>Variable length<br><strong>Description: </strong>Response text from the payment gateway.
     *
     * @return $this
     */
    public function setRmsg($rmsg)
    {
        $this->container['rmsg'] = $rmsg;

        return $this;
    }

    /**
     * Gets echo_fields
     *
     * @return string
     */
    public function getEchoFields()
    {
        return $this->container['echo_fields'];
    }

    /**
     * Sets echo_fields
     *
     * @param string $echo_fields <strong>Format: </strong>Variable length<br><strong>Description: </strong>Data that was provided in echo_fields in the request.
     *
     * @return $this
     */
    public function setEchoFields($echo_fields)
    {
        $this->container['echo_fields'] = $echo_fields;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


