<?php
/**
 * PGApiTransactionRequest
 *
 * PHP version 5
 *
 * @category Class
 * @package  calderaPayQualpayPaymentGateway
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Qualpay Payment Gateway API
 *
 * This document describes the Qualpay Payment Gateway API.
 *
 * OpenAPI spec version: 1.7
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.3.1
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace calderaPayQualpayPaymentGateway\Model;

use \ArrayAccess;
use \calderaPayQualpayPaymentGateway\ObjectSerializer;

/**
 * PGApiTransactionRequest Class Doc Comment
 *
 * @category Class
 * @package  calderaPayQualpayPaymentGateway
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class PGApiTransactionRequest implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'PGApiTransactionRequest';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'merchant_id' => 'int',
        'amt_convenience_fee' => 'double',
        'amt_fbo' => 'double',
        'amt_tax' => 'double',
        'amt_tran' => 'double',
        'amt_tran_fee' => 'double',
        'auth_code' => 'string',
        'avs_address' => 'string',
        'avs_zip' => 'string',
        'card_id' => 'string',
        'card_number' => 'string',
        'card_swipe' => 'string',
        'cardholder_name' => 'string',
        'cavv_3ds' => 'string',
        'customer' => '\calderaPayQualpayPaymentGateway\Model\Customer',
        'customer_code' => 'string',
        'customer_email' => 'string',
        'customer_id' => 'string',
        'cvv2' => 'string',
        'dba_name' => 'string',
        'developer_id' => 'string',
        'echo_fields' => 'string',
        'email_receipt' => 'bool',
        'exp_date' => 'string',
        'fbo_id' => 'int',
        'line_items' => 'string',
        'loc_id' => 'string',
        'mc_ucaf_data' => 'string',
        'mc_ucaf_ind' => 'string',
        'merch_ref_num' => 'string',
        'moto_ecomm_ind' => 'string',
        'partial_auth' => 'bool',
        'pg_id' => 'string',
        'profile_id' => 'string',
        'purchase_id' => 'string',
        'report_data' => 'string',
        'retry_id' => 'int',
        'session_id' => 'string',
        'subscription_id' => 'int',
        'tokenize' => 'bool',
        'tran_currency' => 'int',
        'user_id' => 'int',
        'xid_3ds' => 'string',
        'vendor_id' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'merchant_id' => 'int64',
        'amt_convenience_fee' => 'double',
        'amt_fbo' => 'double',
        'amt_tax' => 'double',
        'amt_tran' => 'double',
        'amt_tran_fee' => 'double',
        'auth_code' => null,
        'avs_address' => null,
        'avs_zip' => null,
        'card_id' => null,
        'card_number' => null,
        'card_swipe' => null,
        'cardholder_name' => null,
        'cavv_3ds' => null,
        'customer' => null,
        'customer_code' => null,
        'customer_email' => null,
        'customer_id' => null,
        'cvv2' => null,
        'dba_name' => null,
        'developer_id' => null,
        'echo_fields' => null,
        'email_receipt' => null,
        'exp_date' => null,
        'fbo_id' => 'int64',
        'line_items' => null,
        'loc_id' => null,
        'mc_ucaf_data' => null,
        'mc_ucaf_ind' => null,
        'merch_ref_num' => null,
        'moto_ecomm_ind' => null,
        'partial_auth' => null,
        'pg_id' => null,
        'profile_id' => null,
        'purchase_id' => null,
        'report_data' => null,
        'retry_id' => 'int64',
        'session_id' => null,
        'subscription_id' => 'int64',
        'tokenize' => null,
        'tran_currency' => 'int32',
        'user_id' => 'int64',
        'xid_3ds' => null,
        'vendor_id' => 'int64'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'merchant_id' => 'merchant_id',
        'amt_convenience_fee' => 'amt_convenience_fee',
        'amt_fbo' => 'amt_fbo',
        'amt_tax' => 'amt_tax',
        'amt_tran' => 'amt_tran',
        'amt_tran_fee' => 'amt_tran_fee',
        'auth_code' => 'auth_code',
        'avs_address' => 'avs_address',
        'avs_zip' => 'avs_zip',
        'card_id' => 'card_id',
        'card_number' => 'card_number',
        'card_swipe' => 'card_swipe',
        'cardholder_name' => 'cardholder_name',
        'cavv_3ds' => 'cavv_3ds',
        'customer' => 'customer',
        'customer_code' => 'customer_code',
        'customer_email' => 'customer_email',
        'customer_id' => 'customer_id',
        'cvv2' => 'cvv2',
        'dba_name' => 'dba_name',
        'developer_id' => 'developer_id',
        'echo_fields' => 'echo_fields',
        'email_receipt' => 'email_receipt',
        'exp_date' => 'exp_date',
        'fbo_id' => 'fbo_id',
        'line_items' => 'line_items',
        'loc_id' => 'loc_id',
        'mc_ucaf_data' => 'mc_ucaf_data',
        'mc_ucaf_ind' => 'mc_ucaf_ind',
        'merch_ref_num' => 'merch_ref_num',
        'moto_ecomm_ind' => 'moto_ecomm_ind',
        'partial_auth' => 'partial_auth',
        'pg_id' => 'pg_id',
        'profile_id' => 'profile_id',
        'purchase_id' => 'purchase_id',
        'report_data' => 'report_data',
        'retry_id' => 'retry_id',
        'session_id' => 'session_id',
        'subscription_id' => 'subscription_id',
        'tokenize' => 'tokenize',
        'tran_currency' => 'tran_currency',
        'user_id' => 'user_id',
        'xid_3ds' => 'xid_3ds',
        'vendor_id' => 'vendor_id'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'merchant_id' => 'setMerchantId',
        'amt_convenience_fee' => 'setAmtConvenienceFee',
        'amt_fbo' => 'setAmtFbo',
        'amt_tax' => 'setAmtTax',
        'amt_tran' => 'setAmtTran',
        'amt_tran_fee' => 'setAmtTranFee',
        'auth_code' => 'setAuthCode',
        'avs_address' => 'setAvsAddress',
        'avs_zip' => 'setAvsZip',
        'card_id' => 'setCardId',
        'card_number' => 'setCardNumber',
        'card_swipe' => 'setCardSwipe',
        'cardholder_name' => 'setCardholderName',
        'cavv_3ds' => 'setCavv3ds',
        'customer' => 'setCustomer',
        'customer_code' => 'setCustomerCode',
        'customer_email' => 'setCustomerEmail',
        'customer_id' => 'setCustomerId',
        'cvv2' => 'setCvv2',
        'dba_name' => 'setDbaName',
        'developer_id' => 'setDeveloperId',
        'echo_fields' => 'setEchoFields',
        'email_receipt' => 'setEmailReceipt',
        'exp_date' => 'setExpDate',
        'fbo_id' => 'setFboId',
        'line_items' => 'setLineItems',
        'loc_id' => 'setLocId',
        'mc_ucaf_data' => 'setMcUcafData',
        'mc_ucaf_ind' => 'setMcUcafInd',
        'merch_ref_num' => 'setMerchRefNum',
        'moto_ecomm_ind' => 'setMotoEcommInd',
        'partial_auth' => 'setPartialAuth',
        'pg_id' => 'setPgId',
        'profile_id' => 'setProfileId',
        'purchase_id' => 'setPurchaseId',
        'report_data' => 'setReportData',
        'retry_id' => 'setRetryId',
        'session_id' => 'setSessionId',
        'subscription_id' => 'setSubscriptionId',
        'tokenize' => 'setTokenize',
        'tran_currency' => 'setTranCurrency',
        'user_id' => 'setUserId',
        'xid_3ds' => 'setXid3ds',
        'vendor_id' => 'setVendorId'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'merchant_id' => 'getMerchantId',
        'amt_convenience_fee' => 'getAmtConvenienceFee',
        'amt_fbo' => 'getAmtFbo',
        'amt_tax' => 'getAmtTax',
        'amt_tran' => 'getAmtTran',
        'amt_tran_fee' => 'getAmtTranFee',
        'auth_code' => 'getAuthCode',
        'avs_address' => 'getAvsAddress',
        'avs_zip' => 'getAvsZip',
        'card_id' => 'getCardId',
        'card_number' => 'getCardNumber',
        'card_swipe' => 'getCardSwipe',
        'cardholder_name' => 'getCardholderName',
        'cavv_3ds' => 'getCavv3ds',
        'customer' => 'getCustomer',
        'customer_code' => 'getCustomerCode',
        'customer_email' => 'getCustomerEmail',
        'customer_id' => 'getCustomerId',
        'cvv2' => 'getCvv2',
        'dba_name' => 'getDbaName',
        'developer_id' => 'getDeveloperId',
        'echo_fields' => 'getEchoFields',
        'email_receipt' => 'getEmailReceipt',
        'exp_date' => 'getExpDate',
        'fbo_id' => 'getFboId',
        'line_items' => 'getLineItems',
        'loc_id' => 'getLocId',
        'mc_ucaf_data' => 'getMcUcafData',
        'mc_ucaf_ind' => 'getMcUcafInd',
        'merch_ref_num' => 'getMerchRefNum',
        'moto_ecomm_ind' => 'getMotoEcommInd',
        'partial_auth' => 'getPartialAuth',
        'pg_id' => 'getPgId',
        'profile_id' => 'getProfileId',
        'purchase_id' => 'getPurchaseId',
        'report_data' => 'getReportData',
        'retry_id' => 'getRetryId',
        'session_id' => 'getSessionId',
        'subscription_id' => 'getSubscriptionId',
        'tokenize' => 'getTokenize',
        'tran_currency' => 'getTranCurrency',
        'user_id' => 'getUserId',
        'xid_3ds' => 'getXid3ds',
        'vendor_id' => 'getVendorId'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['merchant_id'] = isset($data['merchant_id']) ? $data['merchant_id'] : null;
        $this->container['amt_convenience_fee'] = isset($data['amt_convenience_fee']) ? $data['amt_convenience_fee'] : null;
        $this->container['amt_fbo'] = isset($data['amt_fbo']) ? $data['amt_fbo'] : null;
        $this->container['amt_tax'] = isset($data['amt_tax']) ? $data['amt_tax'] : null;
        $this->container['amt_tran'] = isset($data['amt_tran']) ? $data['amt_tran'] : null;
        $this->container['amt_tran_fee'] = isset($data['amt_tran_fee']) ? $data['amt_tran_fee'] : null;
        $this->container['auth_code'] = isset($data['auth_code']) ? $data['auth_code'] : null;
        $this->container['avs_address'] = isset($data['avs_address']) ? $data['avs_address'] : null;
        $this->container['avs_zip'] = isset($data['avs_zip']) ? $data['avs_zip'] : null;
        $this->container['card_id'] = isset($data['card_id']) ? $data['card_id'] : null;
        $this->container['card_number'] = isset($data['card_number']) ? $data['card_number'] : null;
        $this->container['card_swipe'] = isset($data['card_swipe']) ? $data['card_swipe'] : null;
        $this->container['cardholder_name'] = isset($data['cardholder_name']) ? $data['cardholder_name'] : null;
        $this->container['cavv_3ds'] = isset($data['cavv_3ds']) ? $data['cavv_3ds'] : null;
        $this->container['customer'] = isset($data['customer']) ? $data['customer'] : null;
        $this->container['customer_code'] = isset($data['customer_code']) ? $data['customer_code'] : null;
        $this->container['customer_email'] = isset($data['customer_email']) ? $data['customer_email'] : null;
        $this->container['customer_id'] = isset($data['customer_id']) ? $data['customer_id'] : null;
        $this->container['cvv2'] = isset($data['cvv2']) ? $data['cvv2'] : null;
        $this->container['dba_name'] = isset($data['dba_name']) ? $data['dba_name'] : null;
        $this->container['developer_id'] = isset($data['developer_id']) ? $data['developer_id'] : null;
        $this->container['echo_fields'] = isset($data['echo_fields']) ? $data['echo_fields'] : null;
        $this->container['email_receipt'] = isset($data['email_receipt']) ? $data['email_receipt'] : null;
        $this->container['exp_date'] = isset($data['exp_date']) ? $data['exp_date'] : null;
        $this->container['fbo_id'] = isset($data['fbo_id']) ? $data['fbo_id'] : null;
        $this->container['line_items'] = isset($data['line_items']) ? $data['line_items'] : null;
        $this->container['loc_id'] = isset($data['loc_id']) ? $data['loc_id'] : null;
        $this->container['mc_ucaf_data'] = isset($data['mc_ucaf_data']) ? $data['mc_ucaf_data'] : null;
        $this->container['mc_ucaf_ind'] = isset($data['mc_ucaf_ind']) ? $data['mc_ucaf_ind'] : null;
        $this->container['merch_ref_num'] = isset($data['merch_ref_num']) ? $data['merch_ref_num'] : null;
        $this->container['moto_ecomm_ind'] = isset($data['moto_ecomm_ind']) ? $data['moto_ecomm_ind'] : null;
        $this->container['partial_auth'] = isset($data['partial_auth']) ? $data['partial_auth'] : null;
        $this->container['pg_id'] = isset($data['pg_id']) ? $data['pg_id'] : null;
        $this->container['profile_id'] = isset($data['profile_id']) ? $data['profile_id'] : null;
        $this->container['purchase_id'] = isset($data['purchase_id']) ? $data['purchase_id'] : null;
        $this->container['report_data'] = isset($data['report_data']) ? $data['report_data'] : null;
        $this->container['retry_id'] = isset($data['retry_id']) ? $data['retry_id'] : null;
        $this->container['session_id'] = isset($data['session_id']) ? $data['session_id'] : null;
        $this->container['subscription_id'] = isset($data['subscription_id']) ? $data['subscription_id'] : null;
        $this->container['tokenize'] = isset($data['tokenize']) ? $data['tokenize'] : null;
        $this->container['tran_currency'] = isset($data['tran_currency']) ? $data['tran_currency'] : null;
        $this->container['user_id'] = isset($data['user_id']) ? $data['user_id'] : null;
        $this->container['xid_3ds'] = isset($data['xid_3ds']) ? $data['xid_3ds'] : null;
        $this->container['vendor_id'] = isset($data['vendor_id']) ? $data['vendor_id'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['merchant_id'] === null) {
            $invalidProperties[] = "'merchant_id' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        if ($this->container['merchant_id'] === null) {
            return false;
        }
        return true;
    }


    /**
     * Gets merchant_id
     *
     * @return int
     */
    public function getMerchantId()
    {
        return $this->container['merchant_id'];
    }

    /**
     * Sets merchant_id
     *
     * @param int $merchant_id <strong>Format: </strong>Variable length, up to 12 N<br><strong>Description: </strong>Unique identifier on the Qualpay system.
     *
     * @return $this
     */
    public function setMerchantId($merchant_id)
    {
        $this->container['merchant_id'] = $merchant_id;

        return $this;
    }

    /**
     * Gets amt_convenience_fee
     *
     * @return double
     */
    public function getAmtConvenienceFee()
    {
        return $this->container['amt_convenience_fee'];
    }

    /**
     * Sets amt_convenience_fee
     *
     * @param double $amt_convenience_fee <strong>Format: </strong>Variable length, up to 8,2 N<br><strong>Description: </strong>Amount of convenience fee. A convenience fee is a fee charged for the \"convenience\" of being able to pay using an alternative payment channel outside the merchant's customary payment channel and must be a flat/fixed fee amount per transaction. This field tracks the convenience fee amount for display purposes, but the amount of the fee must be included in amt_tran.
     *
     * @return $this
     */
    public function setAmtConvenienceFee($amt_convenience_fee)
    {
        $this->container['amt_convenience_fee'] = $amt_convenience_fee;

        return $this;
    }

    /**
     * Gets amt_fbo
     *
     * @return double
     */
    public function getAmtFbo()
    {
        return $this->container['amt_fbo'];
    }

    /**
     * Sets amt_fbo
     *
     * @param double $amt_fbo <strong>Format: </strong>Variable length, up to 12,2 N<br><strong>Description: </strong>Total amount of transaction transferred to the FBO account.
     *
     * @return $this
     */
    public function setAmtFbo($amt_fbo)
    {
        $this->container['amt_fbo'] = $amt_fbo;

        return $this;
    }

    /**
     * Gets amt_tax
     *
     * @return double
     */
    public function getAmtTax()
    {
        return $this->container['amt_tax'];
    }

    /**
     * Sets amt_tax
     *
     * @param double $amt_tax <strong>Format: </strong>Variable length, up to 12,2 N<br><strong>Description: </strong>Amount of sales tax included in the total transaction amount.<br><strong>Conditional Requirement: </strong>Required for Level 2 and Level 3 interchange qualification.
     *
     * @return $this
     */
    public function setAmtTax($amt_tax)
    {
        $this->container['amt_tax'] = $amt_tax;

        return $this;
    }

    /**
     * Gets amt_tran
     *
     * @return double
     */
    public function getAmtTran()
    {
        return $this->container['amt_tran'];
    }

    /**
     * Sets amt_tran
     *
     * @param double $amt_tran <strong>Format: </strong>Variable length, up to 12,2 N<br><strong>Description: </strong>Total amount of transaction including sales tax (if applicable).
     *
     * @return $this
     */
    public function setAmtTran($amt_tran)
    {
        $this->container['amt_tran'] = $amt_tran;

        return $this;
    }

    /**
     * Gets amt_tran_fee
     *
     * @return double
     */
    public function getAmtTranFee()
    {
        return $this->container['amt_tran_fee'];
    }

    /**
     * Sets amt_tran_fee
     *
     * @param double $amt_tran_fee <strong>Format: </strong>Variable length, up to 8,2 N<br><strong>Description: </strong>Amount of transaction surcharge fee. A surcharge is a fee added to the cost of a purchase for the \"privilege\" of using a credit card, and can be a percentage of the transaction amount. This field tracks the surcharge amount of the transaction for display purposes, but the amount of the fee must be included in amt_tran.
     *
     * @return $this
     */
    public function setAmtTranFee($amt_tran_fee)
    {
        $this->container['amt_tran_fee'] = $amt_tran_fee;

        return $this;
    }

    /**
     * Gets auth_code
     *
     * @return string
     */
    public function getAuthCode()
    {
        return $this->container['auth_code'];
    }

    /**
     * Sets auth_code
     *
     * @param string $auth_code <strong>Format: </strong>Fixed length, 6 AN<br><strong>Description: </strong>Auth code is required for a force request, and should contain the 6-character authorization code that was received during a voice or ARU authorization. This is field is applicable to only force request type.<br><strong>Conditional Requirement: </strong>This field is required in force request type.
     *
     * @return $this
     */
    public function setAuthCode($auth_code)
    {
        $this->container['auth_code'] = $auth_code;

        return $this;
    }

    /**
     * Gets avs_address
     *
     * @return string
     */
    public function getAvsAddress()
    {
        return $this->container['avs_address'];
    }

    /**
     * Sets avs_address
     *
     * @param string $avs_address <strong>Format: </strong>Variable length, up to 20 AN<br><strong>Description: </strong>Street address of the cardholder. If present, it will be included in the authorization request sent to the issuing bank.
     *
     * @return $this
     */
    public function setAvsAddress($avs_address)
    {
        $this->container['avs_address'] = $avs_address;

        return $this;
    }

    /**
     * Gets avs_zip
     *
     * @return string
     */
    public function getAvsZip()
    {
        return $this->container['avs_zip'];
    }

    /**
     * Sets avs_zip
     *
     * @param string $avs_zip <strong>Format: </strong>Variable length, up to 9 AN<br><strong>Description: </strong>Zip code of the cardholder. If present, it will be included in the authorization request sent to the issuing bank.<br><strong>Conditional Requirement: </strong>This field is required if avs_address is present.
     *
     * @return $this
     */
    public function setAvsZip($avs_zip)
    {
        $this->container['avs_zip'] = $avs_zip;

        return $this;
    }

    /**
     * Gets card_id
     *
     * @return string
     */
    public function getCardId()
    {
        return $this->container['card_id'];
    }

    /**
     * Sets card_id
     *
     * @param string $card_id <strong>Format: </strong>Fixed length, 32 AN<br><strong>Description: </strong>Card ID received from a tokenization request. The card_id may be used in place of a card number or card swipe.<br><strong>Conditional Requirement: </strong>Refer to <a href=\"/developer/api/reference#card-source-conditional-requirements\"target=\"_blank\">Card source conditional requirements</a>
     *
     * @return $this
     */
    public function setCardId($card_id)
    {
        $this->container['card_id'] = $card_id;

        return $this;
    }

    /**
     * Gets card_number
     *
     * @return string
     */
    public function getCardNumber()
    {
        return $this->container['card_number'];
    }

    /**
     * Sets card_number
     *
     * @param string $card_number <strong>Format: </strong>Variable length, up to 19 N<br><strong>Description: </strong>Cardholder's card number.<br><strong>Conditional Requirement: </strong>Refer to <a href=\"/developer/api/reference#card-source-conditional-requirements\"target=\"_blank\">Card source conditional requirements</a>
     *
     * @return $this
     */
    public function setCardNumber($card_number)
    {
        $this->container['card_number'] = $card_number;

        return $this;
    }

    /**
     * Gets card_swipe
     *
     * @return string
     */
    public function getCardSwipe()
    {
        return $this->container['card_swipe'];
    }

    /**
     * Sets card_swipe
     *
     * @param string $card_swipe <strong>Format: </strong>Variable length, up to 79 AN<br><strong>Description: </strong>Contains either track 1 or track 2 magnetic stripe data. If the magnetic stripe reader provides both track 1 and track 2 data in a single read, it is the responsibility of the implementer to send data for only one of the two tracks.<br><strong>Conditional Requirement: </strong>Refer to <a href=\"/developer/api/reference#card-source-conditional-requirements\"target=\"_blank\">Card source conditional requirements</a>
     *
     * @return $this
     */
    public function setCardSwipe($card_swipe)
    {
        $this->container['card_swipe'] = $card_swipe;

        return $this;
    }

    /**
     * Gets cardholder_name
     *
     * @return string
     */
    public function getCardholderName()
    {
        return $this->container['cardholder_name'];
    }

    /**
     * Sets cardholder_name
     *
     * @param string $cardholder_name <strong>Format: </strong>Variable length, up to 64 AN<br><strong>Description: </strong>When provided in a tokenize request, the cardholder name will be stored in the Card Vault along with the cardholder card number and expiration date.
     *
     * @return $this
     */
    public function setCardholderName($cardholder_name)
    {
        $this->container['cardholder_name'] = $cardholder_name;

        return $this;
    }

    /**
     * Gets cavv_3ds
     *
     * @return string
     */
    public function getCavv3ds()
    {
        return $this->container['cavv_3ds'];
    }

    /**
     * Sets cavv_3ds
     *
     * @param string $cavv_3ds <strong>Format: </strong>Fixed length, 28 AN<br><strong>Description: </strong>Base 64 encoded CAVV returned from the merchant’s third-party 3-D Secure Merchant Plug-in (MPI). Use for Visa 3D Secure transactions.
     *
     * @return $this
     */
    public function setCavv3ds($cavv_3ds)
    {
        $this->container['cavv_3ds'] = $cavv_3ds;

        return $this;
    }

    /**
     * Gets customer
     *
     * @return \calderaPayQualpayPaymentGateway\Model\Customer
     */
    public function getCustomer()
    {
        return $this->container['customer'];
    }

    /**
     * Sets customer
     *
     * @param \calderaPayQualpayPaymentGateway\Model\Customer $customer <br><strong>Description: </strong>In an authorization, credit, force, sale or verify message the merchant can send tokenize (set to true), either card_number or card_swipe, the desired customer_id, and the customer field and the payment gateway will create the customer data in the vault. Cannot be used to update an existing customer_id
     *
     * @return $this
     */
    public function setCustomer($customer)
    {
        $this->container['customer'] = $customer;

        return $this;
    }

    /**
     * Gets customer_code
     *
     * @return string
     */
    public function getCustomerCode()
    {
        return $this->container['customer_code'];
    }

    /**
     * Sets customer_code
     *
     * @param string $customer_code <strong>Format: </strong>Variable length, up to 17 AN<br><strong>Description: </strong>Reference code supplied by the cardholder to the merchant.
     *
     * @return $this
     */
    public function setCustomerCode($customer_code)
    {
        $this->container['customer_code'] = $customer_code;

        return $this;
    }

    /**
     * Gets customer_email
     *
     * @return string
     */
    public function getCustomerEmail()
    {
        return $this->container['customer_email'];
    }

    /**
     * Sets customer_email
     *
     * @param string $customer_email <strong>Format: </strong>Variable length<br><strong>Description: </strong>Comma-separated list of e-mail addresses to which a receipt should be sent.
     *
     * @return $this
     */
    public function setCustomerEmail($customer_email)
    {
        $this->container['customer_email'] = $customer_email;

        return $this;
    }

    /**
     * Gets customer_id
     *
     * @return string
     */
    public function getCustomerId()
    {
        return $this->container['customer_id'];
    }

    /**
     * Sets customer_id
     *
     * @param string $customer_id <strong>Format: </strong>Variable length, up to 32 AN<br><strong>Description: </strong>Customer ID value established by the merchant. The customer_id may be used in place of a card number in requests requiring cardholder account data. When used with a card_id or card_number or card_swipe, the request will be tied to the customer id in Qualpay reporting. <br><strong>Conditional Requirement: </strong>Refer to <a href=\"/developer/api/reference#card-source-conditional-req\">Card source conditional requirements</a>
     *
     * @return $this
     */
    public function setCustomerId($customer_id)
    {
        $this->container['customer_id'] = $customer_id;

        return $this;
    }

    /**
     * Gets cvv2
     *
     * @return string
     */
    public function getCvv2()
    {
        return $this->container['cvv2'];
    }

    /**
     * Sets cvv2
     *
     * @param string $cvv2 <strong>Format: </strong>Variable length, up to 4 N<br><strong>Description: </strong>CVV2 or CID value from the signature panel on the back of the cardholder's card. If present during a request that requires authorization, the value will be sent to the issuer for validation.
     *
     * @return $this
     */
    public function setCvv2($cvv2)
    {
        $this->container['cvv2'] = $cvv2;

        return $this;
    }

    /**
     * Gets dba_name
     *
     * @return string
     */
    public function getDbaName()
    {
        return $this->container['dba_name'];
    }

    /**
     * Sets dba_name
     *
     * @param string $dba_name <strong>Format: </strong>Variable length, up to 21 AN<br><strong>Description: </strong>When the merchant has been authorized to send dynamic DBA information, this field should contain the DBA name used in the authorization and clearing messages.<br>Note: the payment gateway will automatically add a prefix plus an asterisk (*) to the dba_name value. For example, if the prefix is ABC and the dba_name value is SHOE CO, the DBA name will show as \"ABC*SHOE CO\" on the cardholder's credit card statement.
     *
     * @return $this
     */
    public function setDbaName($dba_name)
    {
        $this->container['dba_name'] = $dba_name;

        return $this;
    }

    /**
     * Gets developer_id
     *
     * @return string
     */
    public function getDeveloperId()
    {
        return $this->container['developer_id'];
    }

    /**
     * Sets developer_id
     *
     * @param string $developer_id <strong>Format: </strong>Variable length, up to 16 AN<br><strong>Description: </strong>Used to indicate which company developed the integration to the Qualpay Payment Gateway. This may also be used to provide the payment solution name that is connected to the Qualpay Payment Gateway.
     *
     * @return $this
     */
    public function setDeveloperId($developer_id)
    {
        $this->container['developer_id'] = $developer_id;

        return $this;
    }

    /**
     * Gets echo_fields
     *
     * @return string
     */
    public function getEchoFields()
    {
        return $this->container['echo_fields'];
    }

    /**
     * Sets echo_fields
     *
     * @param string $echo_fields <strong>Format: </strong>Variable length<br><strong>Description: </strong>This field contains a JSON array of field data that will be echoed back in the response message.
     *
     * @return $this
     */
    public function setEchoFields($echo_fields)
    {
        $this->container['echo_fields'] = $echo_fields;

        return $this;
    }

    /**
     * Gets email_receipt
     *
     * @return bool
     */
    public function getEmailReceipt()
    {
        return $this->container['email_receipt'];
    }

    /**
     * Sets email_receipt
     *
     * @param bool $email_receipt <br><strong>Default: </strong>false<br><strong>Description: </strong>When this field is provided and set to true, a customer_email must also be provided. When these two fields are provided, a transaction receipt will be sent via e-mail to the address(es) provided in the customer_email field.
     *
     * @return $this
     */
    public function setEmailReceipt($email_receipt)
    {
        $this->container['email_receipt'] = $email_receipt;

        return $this;
    }

    /**
     * Gets exp_date
     *
     * @return string
     */
    public function getExpDate()
    {
        return $this->container['exp_date'];
    }

    /**
     * Sets exp_date
     *
     * @param string $exp_date <strong>Format: </strong>Fixed length, 4 N, MMYY format<br><strong>Description: </strong>Expiration date of cardholder card number.  When card_id or customer_id is present in the request this field may also be present; if it is not, then the expiration date from the Card Vault will be used.<br><strong>Conditional Requirement: </strong>Refer to <a href=\"/developer/api/reference#card-source-conditional-requirements\"target=\"_blank\">Card source conditional requirements</a>
     *
     * @return $this
     */
    public function setExpDate($exp_date)
    {
        $this->container['exp_date'] = $exp_date;

        return $this;
    }

    /**
     * Gets fbo_id
     *
     * @return int
     */
    public function getFboId()
    {
        return $this->container['fbo_id'];
    }

    /**
     * Sets fbo_id
     *
     * @param int $fbo_id <strong>Format: </strong>Variable length, up to 16 N<br><strong>Description: </strong>For Benefit Of (FBO) account identifier on the Qualpay system.
     *
     * @return $this
     */
    public function setFboId($fbo_id)
    {
        $this->container['fbo_id'] = $fbo_id;

        return $this;
    }

    /**
     * Gets line_items
     *
     * @return string
     */
    public function getLineItems()
    {
        return $this->container['line_items'];
    }

    /**
     * Sets line_items
     *
     * @param string $line_items <strong>Format: </strong>Variable length<br><strong>Description: </strong>JSON array of JSON objects. Each object represents a single line item detail element related to the transaction. Each detail element has required subfields: <br>quantity (7N)<br> description (26AN)<br> unit_of_measure (12AN)<br> product_code (12AN) - cannot be all zeroes<br> debit_credit_ind (1 AN)<br> unit_cost (12,2N)<br> Optional subfields: <br>type_of_supply (2AN) - visa only<br>commodity_code - visa only(12AN)<br><strong>Conditional Requirement: </strong> This field is required for Level 3 interchange qualification.
     *
     * @return $this
     */
    public function setLineItems($line_items)
    {
        $this->container['line_items'] = $line_items;

        return $this;
    }

    /**
     * Gets loc_id
     *
     * @return string
     */
    public function getLocId()
    {
        return $this->container['loc_id'];
    }

    /**
     * Sets loc_id
     *
     * @param string $loc_id <strong>Format: </strong>Variable length, up to 4 N<br><strong>Description: </strong>When a merchant has more than one location using the same currency, this value is used to specify the specific location for this request.
     *
     * @return $this
     */
    public function setLocId($loc_id)
    {
        $this->container['loc_id'] = $loc_id;

        return $this;
    }

    /**
     * Gets mc_ucaf_data
     *
     * @return string
     */
    public function getMcUcafData()
    {
        return $this->container['mc_ucaf_data'];
    }

    /**
     * Sets mc_ucaf_data
     *
     * @param string $mc_ucaf_data <strong>Format: </strong>Variable length, up to 32 AN<br><strong>Description: </strong>Base64 encoded MasterCard UCAF Field Data returned from the merchant’s third-party 3D Secure Merchant Plug-in (MPI). Use for MasterCard 3-D Secure transactions.
     *
     * @return $this
     */
    public function setMcUcafData($mc_ucaf_data)
    {
        $this->container['mc_ucaf_data'] = $mc_ucaf_data;

        return $this;
    }

    /**
     * Gets mc_ucaf_ind
     *
     * @return string
     */
    public function getMcUcafInd()
    {
        return $this->container['mc_ucaf_ind'];
    }

    /**
     * Sets mc_ucaf_ind
     *
     * @param string $mc_ucaf_ind <strong>Format: </strong>Fixed length, 1 AN<br><strong>Description: </strong>MasterCard UCAF Collection Indicator returned from the merchant’s third-party 3D Secure Merchant Plug-in (MPI). Use for MasterCard 3-D Secure transactions.
     *
     * @return $this
     */
    public function setMcUcafInd($mc_ucaf_ind)
    {
        $this->container['mc_ucaf_ind'] = $mc_ucaf_ind;

        return $this;
    }

    /**
     * Gets merch_ref_num
     *
     * @return string
     */
    public function getMerchRefNum()
    {
        return $this->container['merch_ref_num'];
    }

    /**
     * Sets merch_ref_num
     *
     * @param string $merch_ref_num <strong>Format: </strong>Variable length, up to 128 AN<br><strong>Description: </strong>Merchant provided reference value that will be stored with the transaction data and included with transaction data in reports within Qualpay Manager. This value will also be attached to any lifecycle transactions (e.g. retrieval requests and chargebacks) that may occur.
     *
     * @return $this
     */
    public function setMerchRefNum($merch_ref_num)
    {
        $this->container['merch_ref_num'] = $merch_ref_num;

        return $this;
    }

    /**
     * Gets moto_ecomm_ind
     *
     * @return string
     */
    public function getMotoEcommInd()
    {
        return $this->container['moto_ecomm_ind'];
    }

    /**
     * Sets moto_ecomm_ind
     *
     * @param string $moto_ecomm_ind <strong>Format: </strong>Fixed length, 1 N<br><strong>Default: </strong>7<br><strong>Description: </strong>Indicates type of MOTO transaction: <ul><li>0 = Card Present (not MOTO/e-Commerce)</li><li> 1 = One Time MOTO transaction</li><li>2 = Recurring </li><li>3 = Installment </li><li>5 = Full 3D-Secure transaction</li><li>6 = Merchant 3D-Secure transaction</li><li>7 = e-Commerce Channel Encrypted (SSL)</li></ul>
     *
     * @return $this
     */
    public function setMotoEcommInd($moto_ecomm_ind)
    {
        $this->container['moto_ecomm_ind'] = $moto_ecomm_ind;

        return $this;
    }

    /**
     * Gets partial_auth
     *
     * @return bool
     */
    public function getPartialAuth()
    {
        return $this->container['partial_auth'];
    }

    /**
     * Sets partial_auth
     *
     * @param bool $partial_auth <br><strong>Default: </strong>false<br><strong>Description: </strong>This field must be present and set to a value of 'true' in order for the request to allow for approval of a partial amount. This would be used to allow a merchant to accept a partial payment from pre-paid and debit cards. When only part of the requested amount is available, the response code will be 010 and the amt_tran field in the response will contain the amount that was approved. A second sale on a different card is required to capture the remaining amount. Applicable to auth and sale request types.
     *
     * @return $this
     */
    public function setPartialAuth($partial_auth)
    {
        $this->container['partial_auth'] = $partial_auth;

        return $this;
    }

    /**
     * Gets pg_id
     *
     * @return string
     */
    public function getPgId()
    {
        return $this->container['pg_id'];
    }

    /**
     * Sets pg_id
     *
     * @param string $pg_id <strong>Format: </strong>Fixed length, 32 AN<br><strong>Description: </strong>PG ID of previously authorized transaction. This field is required when sending a capture, refund, or void request.
     *
     * @return $this
     */
    public function setPgId($pg_id)
    {
        $this->container['pg_id'] = $pg_id;

        return $this;
    }

    /**
     * Gets profile_id
     *
     * @return string
     */
    public function getProfileId()
    {
        return $this->container['profile_id'];
    }

    /**
     * Sets profile_id
     *
     * @param string $profile_id <strong>Format: </strong>Fixed length, 20 N<br><strong>Description: </strong>Explicitly identifies which Payment Gateway profile should be used for the request.
     *
     * @return $this
     */
    public function setProfileId($profile_id)
    {
        $this->container['profile_id'] = $profile_id;

        return $this;
    }

    /**
     * Gets purchase_id
     *
     * @return string
     */
    public function getPurchaseId()
    {
        return $this->container['purchase_id'];
    }

    /**
     * Sets purchase_id
     *
     * @param string $purchase_id <strong>Format: </strong>Variable length, up to 25 AN<br><strong>Description: </strong>Purchase Identifier (also referred to as the invoice number generated by the merchant).<br><strong>Conditional Requirement: </strong> This field is required for Level 2 and Level 3 interchange qualification.
     *
     * @return $this
     */
    public function setPurchaseId($purchase_id)
    {
        $this->container['purchase_id'] = $purchase_id;

        return $this;
    }

    /**
     * Gets report_data
     *
     * @return string
     */
    public function getReportData()
    {
        return $this->container['report_data'];
    }

    /**
     * Sets report_data
     *
     * @param string $report_data <strong>Format: </strong>Variable length<br><strong>Description: </strong>This field contains a JSON array of field data that will be included with the transaction data reported in Qualpay Manager.
     *
     * @return $this
     */
    public function setReportData($report_data)
    {
        $this->container['report_data'] = $report_data;

        return $this;
    }

    /**
     * Gets retry_id
     *
     * @return int
     */
    public function getRetryId()
    {
        return $this->container['retry_id'];
    }

    /**
     * Sets retry_id
     *
     * @param int $retry_id <strong>Format: </strong>Variable length, up to 15 N<br><strong>Description: </strong>This field contains a merchant generated number used to identify the request. This value must be unique within the last 24 hours. When present, the payment gateway will use the retry_attempt to determine whether the message is new or a retry of a previous message.
     *
     * @return $this
     */
    public function setRetryId($retry_id)
    {
        $this->container['retry_id'] = $retry_id;

        return $this;
    }

    /**
     * Gets session_id
     *
     * @return string
     */
    public function getSessionId()
    {
        return $this->container['session_id'];
    }

    /**
     * Sets session_id
     *
     * @param string $session_id INTERNAL USE ONLY.
     *
     * @return $this
     */
    public function setSessionId($session_id)
    {
        $this->container['session_id'] = $session_id;

        return $this;
    }

    /**
     * Gets subscription_id
     *
     * @return int
     */
    public function getSubscriptionId()
    {
        return $this->container['subscription_id'];
    }

    /**
     * Sets subscription_id
     *
     * @param int $subscription_id <strong>Format: </strong>Variable length, up to 10 N<br><strong>Description: </strong>Identifies the recurring subscription that applies to this transaction.
     *
     * @return $this
     */
    public function setSubscriptionId($subscription_id)
    {
        $this->container['subscription_id'] = $subscription_id;

        return $this;
    }

    /**
     * Gets tokenize
     *
     * @return bool
     */
    public function getTokenize()
    {
        return $this->container['tokenize'];
    }

    /**
     * Sets tokenize
     *
     * @param bool $tokenize <br><strong>Default: </strong>false<br><strong>Description: </strong>In an authorization, credit, force, sale, or verify request the merchant can set tokenize to \"true\" and the payment gateway will store the cardholder data in the Card Vault and provide a card_id in the response. If the card_number or card_id in the request is already in the Card Vault, this flag instructs the payment gateway to update the associated data (e.g. avs_address, avs_zip, exp_date) if present.<br><strong>Conditional Requirement: </strong>Refer to <a href=\"/developer/api/reference#card-source-conditional-requirements\"target=\"_blank\">Card source conditional requirements</a>
     *
     * @return $this
     */
    public function setTokenize($tokenize)
    {
        $this->container['tokenize'] = $tokenize;

        return $this;
    }

    /**
     * Gets tran_currency
     *
     * @return int
     */
    public function getTranCurrency()
    {
        return $this->container['tran_currency'];
    }

    /**
     * Sets tran_currency
     *
     * @param int $tran_currency <strong>Format: </strong>Fixed length, 3 N<br><strong>Default: </strong>840<br><strong>Description: </strong>ISO numeric currency code for the transaction. Refer to <a href=\"/developer/api/reference#country-codes\"target=\"_blank\">Country Codes</a> for a list of currency codes.
     *
     * @return $this
     */
    public function setTranCurrency($tran_currency)
    {
        $this->container['tran_currency'] = $tran_currency;

        return $this;
    }

    /**
     * Gets user_id
     *
     * @return int
     */
    public function getUserId()
    {
        return $this->container['user_id'];
    }

    /**
     * Sets user_id
     *
     * @param int $user_id INTERNAL USE ONLY.
     *
     * @return $this
     */
    public function setUserId($user_id)
    {
        $this->container['user_id'] = $user_id;

        return $this;
    }

    /**
     * Gets xid_3ds
     *
     * @return string
     */
    public function getXid3ds()
    {
        return $this->container['xid_3ds'];
    }

    /**
     * Sets xid_3ds
     *
     * @param string $xid_3ds <strong>Format: </strong>Fixed length, 28 AN<br><strong>Description: </strong>Base64 encoded transaction ID (XID) returned from the merchant’s third-party 3D Secure Merchant Plug-in (MPI). Use for Visa 3-D Secure transactions.
     *
     * @return $this
     */
    public function setXid3ds($xid_3ds)
    {
        $this->container['xid_3ds'] = $xid_3ds;

        return $this;
    }

    /**
     * Gets vendor_id
     *
     * @return int
     */
    public function getVendorId()
    {
        return $this->container['vendor_id'];
    }

    /**
     * Sets vendor_id
     *
     * @param int $vendor_id <strong>Format: </strong>Variable length, up to 12 N<br><strong>Description: </strong>Identifies the vendor to which this capture request applies.
     *
     * @return $this
     */
    public function setVendorId($vendor_id)
    {
        $this->container['vendor_id'] = $vendor_id;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


