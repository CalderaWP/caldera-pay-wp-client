<?php
/**
 * InvoicingApi
 * PHP version 5
 *
 * @category Class
 * @package  calderaPayQualpayPlatform
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Qualpay Platform API
 *
 * This document describes the Qualpay Platform API.
 *
 * OpenAPI spec version: 1.1.9
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.3.1
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace calderaPayQualpayPlatform\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use calderaPayQualpayPlatform\ApiException;
use calderaPayQualpayPlatform\Configuration;
use calderaPayQualpayPlatform\HeaderSelector;
use calderaPayQualpayPlatform\ObjectSerializer;

/**
 * InvoicingApi Class Doc Comment
 *
 * @category Class
 * @package  calderaPayQualpayPlatform
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class InvoicingApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation addInvoicePayment
     *
     * Add payment to an invoice
     *
     * @param  int $invoice_id invoice_id (required)
     * @param  \calderaPayQualpayPlatform\Model\InvoicePaymentRequest $body Invoice Payment (required)
     *
     * @throws \calderaPayQualpayPlatform\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \calderaPayQualpayPlatform\Model\InvoicePaymentResponse
     */
    public function addInvoicePayment($invoice_id, $body)
    {
        list($response) = $this->addInvoicePaymentWithHttpInfo($invoice_id, $body);
        return $response;
    }

    /**
     * Operation addInvoicePaymentWithHttpInfo
     *
     * Add payment to an invoice
     *
     * @param  int $invoice_id (required)
     * @param  \calderaPayQualpayPlatform\Model\InvoicePaymentRequest $body Invoice Payment (required)
     *
     * @throws \calderaPayQualpayPlatform\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \calderaPayQualpayPlatform\Model\InvoicePaymentResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function addInvoicePaymentWithHttpInfo($invoice_id, $body)
    {
        $returnType = '\calderaPayQualpayPlatform\Model\InvoicePaymentResponse';
        $request = $this->addInvoicePaymentRequest($invoice_id, $body);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\calderaPayQualpayPlatform\Model\InvoicePaymentResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\calderaPayQualpayPlatform\Model\QPApiResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\calderaPayQualpayPlatform\Model\QPApiResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation addInvoicePaymentAsync
     *
     * Add payment to an invoice
     *
     * @param  int $invoice_id (required)
     * @param  \calderaPayQualpayPlatform\Model\InvoicePaymentRequest $body Invoice Payment (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function addInvoicePaymentAsync($invoice_id, $body)
    {
        return $this->addInvoicePaymentAsyncWithHttpInfo($invoice_id, $body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation addInvoicePaymentAsyncWithHttpInfo
     *
     * Add payment to an invoice
     *
     * @param  int $invoice_id (required)
     * @param  \calderaPayQualpayPlatform\Model\InvoicePaymentRequest $body Invoice Payment (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function addInvoicePaymentAsyncWithHttpInfo($invoice_id, $body)
    {
        $returnType = '\calderaPayQualpayPlatform\Model\InvoicePaymentResponse';
        $request = $this->addInvoicePaymentRequest($invoice_id, $body);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'addInvoicePayment'
     *
     * @param  int $invoice_id (required)
     * @param  \calderaPayQualpayPlatform\Model\InvoicePaymentRequest $body Invoice Payment (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function addInvoicePaymentRequest($invoice_id, $body)
    {
        // verify the required parameter 'invoice_id' is set
        if ($invoice_id === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $invoice_id when calling addInvoicePayment'
            );
        }
        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling addInvoicePayment'
            );
        }

        $resourcePath = '/invoice/{invoice_id}/payments';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($invoice_id !== null) {
            $resourcePath = str_replace(
                '{' . 'invoice_id' . '}',
                ObjectSerializer::toPathValue($invoice_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation browseBouncedInvoices
     *
     * Get undelivered invoices
     *
     * @param  int $count The number of records in the result. (optional, default to 10)
     * @param  string $order_on The field on which the results will be sorted on. Refer to the response model for available fields. (optional, default to db_timestamp)
     * @param  string $order_by Ascending or Descending Sort order of the result. (optional, default to desc)
     * @param  int $page Zero-based page number, use this to choose a page when there are more results than the count parameter. (optional, default to 0)
     * @param  string $filter Results can be filtered by custom filter criteria. Refer to [Filter](/developer/api/reference#filters) to use the filter parameter. (optional)
     *
     * @throws \calderaPayQualpayPlatform\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \calderaPayQualpayPlatform\Model\InvoiceBouncedResponse
     */
    public function browseBouncedInvoices($count = '10', $order_on = 'db_timestamp', $order_by = 'desc', $page = '0', $filter = null)
    {
        list($response) = $this->browseBouncedInvoicesWithHttpInfo($count, $order_on, $order_by, $page, $filter);
        return $response;
    }

    /**
     * Operation browseBouncedInvoicesWithHttpInfo
     *
     * Get undelivered invoices
     *
     * @param  int $count The number of records in the result. (optional, default to 10)
     * @param  string $order_on The field on which the results will be sorted on. Refer to the response model for available fields. (optional, default to db_timestamp)
     * @param  string $order_by Ascending or Descending Sort order of the result. (optional, default to desc)
     * @param  int $page Zero-based page number, use this to choose a page when there are more results than the count parameter. (optional, default to 0)
     * @param  string $filter Results can be filtered by custom filter criteria. Refer to [Filter](/developer/api/reference#filters) to use the filter parameter. (optional)
     *
     * @throws \calderaPayQualpayPlatform\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \calderaPayQualpayPlatform\Model\InvoiceBouncedResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function browseBouncedInvoicesWithHttpInfo($count = '10', $order_on = 'db_timestamp', $order_by = 'desc', $page = '0', $filter = null)
    {
        $returnType = '\calderaPayQualpayPlatform\Model\InvoiceBouncedResponse';
        $request = $this->browseBouncedInvoicesRequest($count, $order_on, $order_by, $page, $filter);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\calderaPayQualpayPlatform\Model\InvoiceBouncedResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\calderaPayQualpayPlatform\Model\QPApiResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\calderaPayQualpayPlatform\Model\QPApiResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation browseBouncedInvoicesAsync
     *
     * Get undelivered invoices
     *
     * @param  int $count The number of records in the result. (optional, default to 10)
     * @param  string $order_on The field on which the results will be sorted on. Refer to the response model for available fields. (optional, default to db_timestamp)
     * @param  string $order_by Ascending or Descending Sort order of the result. (optional, default to desc)
     * @param  int $page Zero-based page number, use this to choose a page when there are more results than the count parameter. (optional, default to 0)
     * @param  string $filter Results can be filtered by custom filter criteria. Refer to [Filter](/developer/api/reference#filters) to use the filter parameter. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function browseBouncedInvoicesAsync($count = '10', $order_on = 'db_timestamp', $order_by = 'desc', $page = '0', $filter = null)
    {
        return $this->browseBouncedInvoicesAsyncWithHttpInfo($count, $order_on, $order_by, $page, $filter)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation browseBouncedInvoicesAsyncWithHttpInfo
     *
     * Get undelivered invoices
     *
     * @param  int $count The number of records in the result. (optional, default to 10)
     * @param  string $order_on The field on which the results will be sorted on. Refer to the response model for available fields. (optional, default to db_timestamp)
     * @param  string $order_by Ascending or Descending Sort order of the result. (optional, default to desc)
     * @param  int $page Zero-based page number, use this to choose a page when there are more results than the count parameter. (optional, default to 0)
     * @param  string $filter Results can be filtered by custom filter criteria. Refer to [Filter](/developer/api/reference#filters) to use the filter parameter. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function browseBouncedInvoicesAsyncWithHttpInfo($count = '10', $order_on = 'db_timestamp', $order_by = 'desc', $page = '0', $filter = null)
    {
        $returnType = '\calderaPayQualpayPlatform\Model\InvoiceBouncedResponse';
        $request = $this->browseBouncedInvoicesRequest($count, $order_on, $order_by, $page, $filter);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'browseBouncedInvoices'
     *
     * @param  int $count The number of records in the result. (optional, default to 10)
     * @param  string $order_on The field on which the results will be sorted on. Refer to the response model for available fields. (optional, default to db_timestamp)
     * @param  string $order_by Ascending or Descending Sort order of the result. (optional, default to desc)
     * @param  int $page Zero-based page number, use this to choose a page when there are more results than the count parameter. (optional, default to 0)
     * @param  string $filter Results can be filtered by custom filter criteria. Refer to [Filter](/developer/api/reference#filters) to use the filter parameter. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function browseBouncedInvoicesRequest($count = '10', $order_on = 'db_timestamp', $order_by = 'desc', $page = '0', $filter = null)
    {
        if ($count !== null && $count > 100) {
            throw new \InvalidArgumentException('invalid value for "$count" when calling InvoicingApi.browseBouncedInvoices, must be smaller than or equal to 100.');
        }
        if ($count !== null && $count < 1) {
            throw new \InvalidArgumentException('invalid value for "$count" when calling InvoicingApi.browseBouncedInvoices, must be bigger than or equal to 1.');
        }


        $resourcePath = '/invoice/bounced';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($count !== null) {
            $queryParams['count'] = ObjectSerializer::toQueryValue($count);
        }
        // query params
        if ($order_on !== null) {
            $queryParams['order_on'] = ObjectSerializer::toQueryValue($order_on);
        }
        // query params
        if ($order_by !== null) {
            $queryParams['order_by'] = ObjectSerializer::toQueryValue($order_by);
        }
        // query params
        if ($page !== null) {
            $queryParams['page'] = ObjectSerializer::toQueryValue($page);
        }
        // query params
        if ($filter !== null) {
            $queryParams['filter'] = ObjectSerializer::toQueryValue($filter);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation browseInvoicePayments
     *
     * Get invoice payments
     *
     * @param  int $count The number of records in the result. (optional, default to 10)
     * @param  string $order_on The field on which the results will be sorted on. Refer to the response model for available fields. (optional, default to date_payment)
     * @param  string $order_by Ascending or Descending Sort order of the result. (optional, default to desc)
     * @param  int $page Zero-based page number, use this to choose a page when there are more results than the count parameter. (optional, default to 0)
     * @param  string $filter Results can be filtered by custom filter criteria. Refer to [Filter](/developer/api/reference#filters) to use the filter parameter. (optional)
     *
     * @throws \calderaPayQualpayPlatform\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \calderaPayQualpayPlatform\Model\InvoicePaymentListResponse
     */
    public function browseInvoicePayments($count = '10', $order_on = 'date_payment', $order_by = 'desc', $page = '0', $filter = null)
    {
        list($response) = $this->browseInvoicePaymentsWithHttpInfo($count, $order_on, $order_by, $page, $filter);
        return $response;
    }

    /**
     * Operation browseInvoicePaymentsWithHttpInfo
     *
     * Get invoice payments
     *
     * @param  int $count The number of records in the result. (optional, default to 10)
     * @param  string $order_on The field on which the results will be sorted on. Refer to the response model for available fields. (optional, default to date_payment)
     * @param  string $order_by Ascending or Descending Sort order of the result. (optional, default to desc)
     * @param  int $page Zero-based page number, use this to choose a page when there are more results than the count parameter. (optional, default to 0)
     * @param  string $filter Results can be filtered by custom filter criteria. Refer to [Filter](/developer/api/reference#filters) to use the filter parameter. (optional)
     *
     * @throws \calderaPayQualpayPlatform\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \calderaPayQualpayPlatform\Model\InvoicePaymentListResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function browseInvoicePaymentsWithHttpInfo($count = '10', $order_on = 'date_payment', $order_by = 'desc', $page = '0', $filter = null)
    {
        $returnType = '\calderaPayQualpayPlatform\Model\InvoicePaymentListResponse';
        $request = $this->browseInvoicePaymentsRequest($count, $order_on, $order_by, $page, $filter);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\calderaPayQualpayPlatform\Model\InvoicePaymentListResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\calderaPayQualpayPlatform\Model\QPApiResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\calderaPayQualpayPlatform\Model\QPApiResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation browseInvoicePaymentsAsync
     *
     * Get invoice payments
     *
     * @param  int $count The number of records in the result. (optional, default to 10)
     * @param  string $order_on The field on which the results will be sorted on. Refer to the response model for available fields. (optional, default to date_payment)
     * @param  string $order_by Ascending or Descending Sort order of the result. (optional, default to desc)
     * @param  int $page Zero-based page number, use this to choose a page when there are more results than the count parameter. (optional, default to 0)
     * @param  string $filter Results can be filtered by custom filter criteria. Refer to [Filter](/developer/api/reference#filters) to use the filter parameter. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function browseInvoicePaymentsAsync($count = '10', $order_on = 'date_payment', $order_by = 'desc', $page = '0', $filter = null)
    {
        return $this->browseInvoicePaymentsAsyncWithHttpInfo($count, $order_on, $order_by, $page, $filter)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation browseInvoicePaymentsAsyncWithHttpInfo
     *
     * Get invoice payments
     *
     * @param  int $count The number of records in the result. (optional, default to 10)
     * @param  string $order_on The field on which the results will be sorted on. Refer to the response model for available fields. (optional, default to date_payment)
     * @param  string $order_by Ascending or Descending Sort order of the result. (optional, default to desc)
     * @param  int $page Zero-based page number, use this to choose a page when there are more results than the count parameter. (optional, default to 0)
     * @param  string $filter Results can be filtered by custom filter criteria. Refer to [Filter](/developer/api/reference#filters) to use the filter parameter. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function browseInvoicePaymentsAsyncWithHttpInfo($count = '10', $order_on = 'date_payment', $order_by = 'desc', $page = '0', $filter = null)
    {
        $returnType = '\calderaPayQualpayPlatform\Model\InvoicePaymentListResponse';
        $request = $this->browseInvoicePaymentsRequest($count, $order_on, $order_by, $page, $filter);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'browseInvoicePayments'
     *
     * @param  int $count The number of records in the result. (optional, default to 10)
     * @param  string $order_on The field on which the results will be sorted on. Refer to the response model for available fields. (optional, default to date_payment)
     * @param  string $order_by Ascending or Descending Sort order of the result. (optional, default to desc)
     * @param  int $page Zero-based page number, use this to choose a page when there are more results than the count parameter. (optional, default to 0)
     * @param  string $filter Results can be filtered by custom filter criteria. Refer to [Filter](/developer/api/reference#filters) to use the filter parameter. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function browseInvoicePaymentsRequest($count = '10', $order_on = 'date_payment', $order_by = 'desc', $page = '0', $filter = null)
    {
        if ($count !== null && $count > 100) {
            throw new \InvalidArgumentException('invalid value for "$count" when calling InvoicingApi.browseInvoicePayments, must be smaller than or equal to 100.');
        }
        if ($count !== null && $count < 1) {
            throw new \InvalidArgumentException('invalid value for "$count" when calling InvoicingApi.browseInvoicePayments, must be bigger than or equal to 1.');
        }


        $resourcePath = '/invoice/payments';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($count !== null) {
            $queryParams['count'] = ObjectSerializer::toQueryValue($count);
        }
        // query params
        if ($order_on !== null) {
            $queryParams['order_on'] = ObjectSerializer::toQueryValue($order_on);
        }
        // query params
        if ($order_by !== null) {
            $queryParams['order_by'] = ObjectSerializer::toQueryValue($order_by);
        }
        // query params
        if ($page !== null) {
            $queryParams['page'] = ObjectSerializer::toQueryValue($page);
        }
        // query params
        if ($filter !== null) {
            $queryParams['filter'] = ObjectSerializer::toQueryValue($filter);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation browseInvoicePaymentsById
     *
     * Get invoice payments by id
     *
     * @param  int $invoice_id invoice_id (required)
     * @param  int $count The number of records in the result. (optional, default to 10)
     * @param  string $order_on The field on which the results will be sorted on. Refer to the response model for available fields. (optional, default to date_payment)
     * @param  string $order_by Ascending or Descending Sort order of the result. (optional, default to desc)
     * @param  int $page Zero-based page number, use this to choose a page when there are more results than the count parameter. (optional, default to 0)
     * @param  string $filter Results can be filtered by custom filter criteria. Refer to [Filter](/developer/api/reference#filters) to use the filter parameter. (optional)
     *
     * @throws \calderaPayQualpayPlatform\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \calderaPayQualpayPlatform\Model\InvoicePaymentListResponse
     */
    public function browseInvoicePaymentsById($invoice_id, $count = '10', $order_on = 'date_payment', $order_by = 'desc', $page = '0', $filter = null)
    {
        list($response) = $this->browseInvoicePaymentsByIdWithHttpInfo($invoice_id, $count, $order_on, $order_by, $page, $filter);
        return $response;
    }

    /**
     * Operation browseInvoicePaymentsByIdWithHttpInfo
     *
     * Get invoice payments by id
     *
     * @param  int $invoice_id (required)
     * @param  int $count The number of records in the result. (optional, default to 10)
     * @param  string $order_on The field on which the results will be sorted on. Refer to the response model for available fields. (optional, default to date_payment)
     * @param  string $order_by Ascending or Descending Sort order of the result. (optional, default to desc)
     * @param  int $page Zero-based page number, use this to choose a page when there are more results than the count parameter. (optional, default to 0)
     * @param  string $filter Results can be filtered by custom filter criteria. Refer to [Filter](/developer/api/reference#filters) to use the filter parameter. (optional)
     *
     * @throws \calderaPayQualpayPlatform\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \calderaPayQualpayPlatform\Model\InvoicePaymentListResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function browseInvoicePaymentsByIdWithHttpInfo($invoice_id, $count = '10', $order_on = 'date_payment', $order_by = 'desc', $page = '0', $filter = null)
    {
        $returnType = '\calderaPayQualpayPlatform\Model\InvoicePaymentListResponse';
        $request = $this->browseInvoicePaymentsByIdRequest($invoice_id, $count, $order_on, $order_by, $page, $filter);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\calderaPayQualpayPlatform\Model\InvoicePaymentListResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\calderaPayQualpayPlatform\Model\QPApiResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\calderaPayQualpayPlatform\Model\QPApiResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation browseInvoicePaymentsByIdAsync
     *
     * Get invoice payments by id
     *
     * @param  int $invoice_id (required)
     * @param  int $count The number of records in the result. (optional, default to 10)
     * @param  string $order_on The field on which the results will be sorted on. Refer to the response model for available fields. (optional, default to date_payment)
     * @param  string $order_by Ascending or Descending Sort order of the result. (optional, default to desc)
     * @param  int $page Zero-based page number, use this to choose a page when there are more results than the count parameter. (optional, default to 0)
     * @param  string $filter Results can be filtered by custom filter criteria. Refer to [Filter](/developer/api/reference#filters) to use the filter parameter. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function browseInvoicePaymentsByIdAsync($invoice_id, $count = '10', $order_on = 'date_payment', $order_by = 'desc', $page = '0', $filter = null)
    {
        return $this->browseInvoicePaymentsByIdAsyncWithHttpInfo($invoice_id, $count, $order_on, $order_by, $page, $filter)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation browseInvoicePaymentsByIdAsyncWithHttpInfo
     *
     * Get invoice payments by id
     *
     * @param  int $invoice_id (required)
     * @param  int $count The number of records in the result. (optional, default to 10)
     * @param  string $order_on The field on which the results will be sorted on. Refer to the response model for available fields. (optional, default to date_payment)
     * @param  string $order_by Ascending or Descending Sort order of the result. (optional, default to desc)
     * @param  int $page Zero-based page number, use this to choose a page when there are more results than the count parameter. (optional, default to 0)
     * @param  string $filter Results can be filtered by custom filter criteria. Refer to [Filter](/developer/api/reference#filters) to use the filter parameter. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function browseInvoicePaymentsByIdAsyncWithHttpInfo($invoice_id, $count = '10', $order_on = 'date_payment', $order_by = 'desc', $page = '0', $filter = null)
    {
        $returnType = '\calderaPayQualpayPlatform\Model\InvoicePaymentListResponse';
        $request = $this->browseInvoicePaymentsByIdRequest($invoice_id, $count, $order_on, $order_by, $page, $filter);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'browseInvoicePaymentsById'
     *
     * @param  int $invoice_id (required)
     * @param  int $count The number of records in the result. (optional, default to 10)
     * @param  string $order_on The field on which the results will be sorted on. Refer to the response model for available fields. (optional, default to date_payment)
     * @param  string $order_by Ascending or Descending Sort order of the result. (optional, default to desc)
     * @param  int $page Zero-based page number, use this to choose a page when there are more results than the count parameter. (optional, default to 0)
     * @param  string $filter Results can be filtered by custom filter criteria. Refer to [Filter](/developer/api/reference#filters) to use the filter parameter. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function browseInvoicePaymentsByIdRequest($invoice_id, $count = '10', $order_on = 'date_payment', $order_by = 'desc', $page = '0', $filter = null)
    {
        // verify the required parameter 'invoice_id' is set
        if ($invoice_id === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $invoice_id when calling browseInvoicePaymentsById'
            );
        }
        if ($count !== null && $count > 100) {
            throw new \InvalidArgumentException('invalid value for "$count" when calling InvoicingApi.browseInvoicePaymentsById, must be smaller than or equal to 100.');
        }
        if ($count !== null && $count < 1) {
            throw new \InvalidArgumentException('invalid value for "$count" when calling InvoicingApi.browseInvoicePaymentsById, must be bigger than or equal to 1.');
        }


        $resourcePath = '/invoice/{invoice_id}/payments';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($count !== null) {
            $queryParams['count'] = ObjectSerializer::toQueryValue($count);
        }
        // query params
        if ($order_on !== null) {
            $queryParams['order_on'] = ObjectSerializer::toQueryValue($order_on);
        }
        // query params
        if ($order_by !== null) {
            $queryParams['order_by'] = ObjectSerializer::toQueryValue($order_by);
        }
        // query params
        if ($page !== null) {
            $queryParams['page'] = ObjectSerializer::toQueryValue($page);
        }
        // query params
        if ($filter !== null) {
            $queryParams['filter'] = ObjectSerializer::toQueryValue($filter);
        }

        // path params
        if ($invoice_id !== null) {
            $resourcePath = str_replace(
                '{' . 'invoice_id' . '}',
                ObjectSerializer::toPathValue($invoice_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation browseInvoices
     *
     * Get all invoices
     *
     * @param  int $count The number of records in the result. (optional, default to 10)
     * @param  string $order_on The field on which the results will be sorted on. Refer to the response model for available fields. (optional, default to invoice_number)
     * @param  string $order_by Ascending or Descending Sort order of the result. (optional, default to desc)
     * @param  int $page Zero-based page number, use this to choose a page when there are more results than the count parameter. (optional, default to 0)
     * @param  string $filter Results can be filtered by custom filter criteria. Refer to [Filter](/developer/api/reference#filters) to use the filter parameter. (optional)
     *
     * @throws \calderaPayQualpayPlatform\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \calderaPayQualpayPlatform\Model\InvoiceListResponse
     */
    public function browseInvoices($count = '10', $order_on = 'invoice_number', $order_by = 'desc', $page = '0', $filter = null)
    {
        list($response) = $this->browseInvoicesWithHttpInfo($count, $order_on, $order_by, $page, $filter);
        return $response;
    }

    /**
     * Operation browseInvoicesWithHttpInfo
     *
     * Get all invoices
     *
     * @param  int $count The number of records in the result. (optional, default to 10)
     * @param  string $order_on The field on which the results will be sorted on. Refer to the response model for available fields. (optional, default to invoice_number)
     * @param  string $order_by Ascending or Descending Sort order of the result. (optional, default to desc)
     * @param  int $page Zero-based page number, use this to choose a page when there are more results than the count parameter. (optional, default to 0)
     * @param  string $filter Results can be filtered by custom filter criteria. Refer to [Filter](/developer/api/reference#filters) to use the filter parameter. (optional)
     *
     * @throws \calderaPayQualpayPlatform\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \calderaPayQualpayPlatform\Model\InvoiceListResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function browseInvoicesWithHttpInfo($count = '10', $order_on = 'invoice_number', $order_by = 'desc', $page = '0', $filter = null)
    {
        $returnType = '\calderaPayQualpayPlatform\Model\InvoiceListResponse';
        $request = $this->browseInvoicesRequest($count, $order_on, $order_by, $page, $filter);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\calderaPayQualpayPlatform\Model\InvoiceListResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\calderaPayQualpayPlatform\Model\QPApiResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\calderaPayQualpayPlatform\Model\QPApiResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation browseInvoicesAsync
     *
     * Get all invoices
     *
     * @param  int $count The number of records in the result. (optional, default to 10)
     * @param  string $order_on The field on which the results will be sorted on. Refer to the response model for available fields. (optional, default to invoice_number)
     * @param  string $order_by Ascending or Descending Sort order of the result. (optional, default to desc)
     * @param  int $page Zero-based page number, use this to choose a page when there are more results than the count parameter. (optional, default to 0)
     * @param  string $filter Results can be filtered by custom filter criteria. Refer to [Filter](/developer/api/reference#filters) to use the filter parameter. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function browseInvoicesAsync($count = '10', $order_on = 'invoice_number', $order_by = 'desc', $page = '0', $filter = null)
    {
        return $this->browseInvoicesAsyncWithHttpInfo($count, $order_on, $order_by, $page, $filter)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation browseInvoicesAsyncWithHttpInfo
     *
     * Get all invoices
     *
     * @param  int $count The number of records in the result. (optional, default to 10)
     * @param  string $order_on The field on which the results will be sorted on. Refer to the response model for available fields. (optional, default to invoice_number)
     * @param  string $order_by Ascending or Descending Sort order of the result. (optional, default to desc)
     * @param  int $page Zero-based page number, use this to choose a page when there are more results than the count parameter. (optional, default to 0)
     * @param  string $filter Results can be filtered by custom filter criteria. Refer to [Filter](/developer/api/reference#filters) to use the filter parameter. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function browseInvoicesAsyncWithHttpInfo($count = '10', $order_on = 'invoice_number', $order_by = 'desc', $page = '0', $filter = null)
    {
        $returnType = '\calderaPayQualpayPlatform\Model\InvoiceListResponse';
        $request = $this->browseInvoicesRequest($count, $order_on, $order_by, $page, $filter);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'browseInvoices'
     *
     * @param  int $count The number of records in the result. (optional, default to 10)
     * @param  string $order_on The field on which the results will be sorted on. Refer to the response model for available fields. (optional, default to invoice_number)
     * @param  string $order_by Ascending or Descending Sort order of the result. (optional, default to desc)
     * @param  int $page Zero-based page number, use this to choose a page when there are more results than the count parameter. (optional, default to 0)
     * @param  string $filter Results can be filtered by custom filter criteria. Refer to [Filter](/developer/api/reference#filters) to use the filter parameter. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function browseInvoicesRequest($count = '10', $order_on = 'invoice_number', $order_by = 'desc', $page = '0', $filter = null)
    {
        if ($count !== null && $count > 100) {
            throw new \InvalidArgumentException('invalid value for "$count" when calling InvoicingApi.browseInvoices, must be smaller than or equal to 100.');
        }
        if ($count !== null && $count < 1) {
            throw new \InvalidArgumentException('invalid value for "$count" when calling InvoicingApi.browseInvoices, must be bigger than or equal to 1.');
        }


        $resourcePath = '/invoice';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($count !== null) {
            $queryParams['count'] = ObjectSerializer::toQueryValue($count);
        }
        // query params
        if ($order_on !== null) {
            $queryParams['order_on'] = ObjectSerializer::toQueryValue($order_on);
        }
        // query params
        if ($order_by !== null) {
            $queryParams['order_by'] = ObjectSerializer::toQueryValue($order_by);
        }
        // query params
        if ($page !== null) {
            $queryParams['page'] = ObjectSerializer::toQueryValue($page);
        }
        // query params
        if ($filter !== null) {
            $queryParams['filter'] = ObjectSerializer::toQueryValue($filter);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation cancelInvoice
     *
     * Cancel an invoice
     *
     * @param  int $invoice_id invoice_id (required)
     *
     * @throws \calderaPayQualpayPlatform\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \calderaPayQualpayPlatform\Model\InvoiceResponse
     */
    public function cancelInvoice($invoice_id)
    {
        list($response) = $this->cancelInvoiceWithHttpInfo($invoice_id);
        return $response;
    }

    /**
     * Operation cancelInvoiceWithHttpInfo
     *
     * Cancel an invoice
     *
     * @param  int $invoice_id (required)
     *
     * @throws \calderaPayQualpayPlatform\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \calderaPayQualpayPlatform\Model\InvoiceResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function cancelInvoiceWithHttpInfo($invoice_id)
    {
        $returnType = '\calderaPayQualpayPlatform\Model\InvoiceResponse';
        $request = $this->cancelInvoiceRequest($invoice_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\calderaPayQualpayPlatform\Model\InvoiceResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\calderaPayQualpayPlatform\Model\QPApiResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\calderaPayQualpayPlatform\Model\QPApiResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation cancelInvoiceAsync
     *
     * Cancel an invoice
     *
     * @param  int $invoice_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function cancelInvoiceAsync($invoice_id)
    {
        return $this->cancelInvoiceAsyncWithHttpInfo($invoice_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation cancelInvoiceAsyncWithHttpInfo
     *
     * Cancel an invoice
     *
     * @param  int $invoice_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function cancelInvoiceAsyncWithHttpInfo($invoice_id)
    {
        $returnType = '\calderaPayQualpayPlatform\Model\InvoiceResponse';
        $request = $this->cancelInvoiceRequest($invoice_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'cancelInvoice'
     *
     * @param  int $invoice_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function cancelInvoiceRequest($invoice_id)
    {
        // verify the required parameter 'invoice_id' is set
        if ($invoice_id === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $invoice_id when calling cancelInvoice'
            );
        }

        $resourcePath = '/invoice/{invoice_id}/cancel';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($invoice_id !== null) {
            $resourcePath = str_replace(
                '{' . 'invoice_id' . '}',
                ObjectSerializer::toPathValue($invoice_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation copyInvoice
     *
     * Copy an invoice
     *
     * @param  int $invoice_id invoice_id (required)
     * @param  \calderaPayQualpayPlatform\Model\CopyInvoiceRequest $body Invoice (optional)
     *
     * @throws \calderaPayQualpayPlatform\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \calderaPayQualpayPlatform\Model\InvoiceResponse
     */
    public function copyInvoice($invoice_id, $body = null)
    {
        list($response) = $this->copyInvoiceWithHttpInfo($invoice_id, $body);
        return $response;
    }

    /**
     * Operation copyInvoiceWithHttpInfo
     *
     * Copy an invoice
     *
     * @param  int $invoice_id (required)
     * @param  \calderaPayQualpayPlatform\Model\CopyInvoiceRequest $body Invoice (optional)
     *
     * @throws \calderaPayQualpayPlatform\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \calderaPayQualpayPlatform\Model\InvoiceResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function copyInvoiceWithHttpInfo($invoice_id, $body = null)
    {
        $returnType = '\calderaPayQualpayPlatform\Model\InvoiceResponse';
        $request = $this->copyInvoiceRequest($invoice_id, $body);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\calderaPayQualpayPlatform\Model\InvoiceResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\calderaPayQualpayPlatform\Model\QPApiResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\calderaPayQualpayPlatform\Model\QPApiResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation copyInvoiceAsync
     *
     * Copy an invoice
     *
     * @param  int $invoice_id (required)
     * @param  \calderaPayQualpayPlatform\Model\CopyInvoiceRequest $body Invoice (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function copyInvoiceAsync($invoice_id, $body = null)
    {
        return $this->copyInvoiceAsyncWithHttpInfo($invoice_id, $body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation copyInvoiceAsyncWithHttpInfo
     *
     * Copy an invoice
     *
     * @param  int $invoice_id (required)
     * @param  \calderaPayQualpayPlatform\Model\CopyInvoiceRequest $body Invoice (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function copyInvoiceAsyncWithHttpInfo($invoice_id, $body = null)
    {
        $returnType = '\calderaPayQualpayPlatform\Model\InvoiceResponse';
        $request = $this->copyInvoiceRequest($invoice_id, $body);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'copyInvoice'
     *
     * @param  int $invoice_id (required)
     * @param  \calderaPayQualpayPlatform\Model\CopyInvoiceRequest $body Invoice (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function copyInvoiceRequest($invoice_id, $body = null)
    {
        // verify the required parameter 'invoice_id' is set
        if ($invoice_id === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $invoice_id when calling copyInvoice'
            );
        }

        $resourcePath = '/invoice/{invoice_id}/copy';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($invoice_id !== null) {
            $resourcePath = str_replace(
                '{' . 'invoice_id' . '}',
                ObjectSerializer::toPathValue($invoice_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation createInvoice
     *
     * Create an invoice
     *
     * @param  \calderaPayQualpayPlatform\Model\CreateInvoiceRequest $body Invoice (required)
     *
     * @throws \calderaPayQualpayPlatform\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \calderaPayQualpayPlatform\Model\InvoiceResponse
     */
    public function createInvoice($body)
    {
        list($response) = $this->createInvoiceWithHttpInfo($body);
        return $response;
    }

    /**
     * Operation createInvoiceWithHttpInfo
     *
     * Create an invoice
     *
     * @param  \calderaPayQualpayPlatform\Model\CreateInvoiceRequest $body Invoice (required)
     *
     * @throws \calderaPayQualpayPlatform\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \calderaPayQualpayPlatform\Model\InvoiceResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function createInvoiceWithHttpInfo($body)
    {
        $returnType = '\calderaPayQualpayPlatform\Model\InvoiceResponse';
        $request = $this->createInvoiceRequest($body);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\calderaPayQualpayPlatform\Model\InvoiceResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\calderaPayQualpayPlatform\Model\QPApiResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\calderaPayQualpayPlatform\Model\QPApiResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation createInvoiceAsync
     *
     * Create an invoice
     *
     * @param  \calderaPayQualpayPlatform\Model\CreateInvoiceRequest $body Invoice (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createInvoiceAsync($body)
    {
        return $this->createInvoiceAsyncWithHttpInfo($body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation createInvoiceAsyncWithHttpInfo
     *
     * Create an invoice
     *
     * @param  \calderaPayQualpayPlatform\Model\CreateInvoiceRequest $body Invoice (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createInvoiceAsyncWithHttpInfo($body)
    {
        $returnType = '\calderaPayQualpayPlatform\Model\InvoiceResponse';
        $request = $this->createInvoiceRequest($body);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'createInvoice'
     *
     * @param  \calderaPayQualpayPlatform\Model\CreateInvoiceRequest $body Invoice (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function createInvoiceRequest($body)
    {
        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling createInvoice'
            );
        }

        $resourcePath = '/invoice';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getInvoice
     *
     * Get by Invoice ID
     *
     * @param  int $invoice_id Invoice ID (required)
     *
     * @throws \calderaPayQualpayPlatform\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \calderaPayQualpayPlatform\Model\InvoiceResponse
     */
    public function getInvoice($invoice_id)
    {
        list($response) = $this->getInvoiceWithHttpInfo($invoice_id);
        return $response;
    }

    /**
     * Operation getInvoiceWithHttpInfo
     *
     * Get by Invoice ID
     *
     * @param  int $invoice_id Invoice ID (required)
     *
     * @throws \calderaPayQualpayPlatform\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \calderaPayQualpayPlatform\Model\InvoiceResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getInvoiceWithHttpInfo($invoice_id)
    {
        $returnType = '\calderaPayQualpayPlatform\Model\InvoiceResponse';
        $request = $this->getInvoiceRequest($invoice_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\calderaPayQualpayPlatform\Model\InvoiceResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\calderaPayQualpayPlatform\Model\QPApiResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\calderaPayQualpayPlatform\Model\QPApiResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getInvoiceAsync
     *
     * Get by Invoice ID
     *
     * @param  int $invoice_id Invoice ID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getInvoiceAsync($invoice_id)
    {
        return $this->getInvoiceAsyncWithHttpInfo($invoice_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getInvoiceAsyncWithHttpInfo
     *
     * Get by Invoice ID
     *
     * @param  int $invoice_id Invoice ID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getInvoiceAsyncWithHttpInfo($invoice_id)
    {
        $returnType = '\calderaPayQualpayPlatform\Model\InvoiceResponse';
        $request = $this->getInvoiceRequest($invoice_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getInvoice'
     *
     * @param  int $invoice_id Invoice ID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getInvoiceRequest($invoice_id)
    {
        // verify the required parameter 'invoice_id' is set
        if ($invoice_id === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $invoice_id when calling getInvoice'
            );
        }

        $resourcePath = '/invoice/{invoice_id}/detail';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($invoice_id !== null) {
            $resourcePath = str_replace(
                '{' . 'invoice_id' . '}',
                ObjectSerializer::toPathValue($invoice_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation removeInvoicePayment
     *
     * Remove an invoice payment
     *
     * @param  int $invoice_id invoice_id (required)
     * @param  int $payment_id payment_id (required)
     *
     * @throws \calderaPayQualpayPlatform\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \calderaPayQualpayPlatform\Model\QPApiResponse
     */
    public function removeInvoicePayment($invoice_id, $payment_id)
    {
        list($response) = $this->removeInvoicePaymentWithHttpInfo($invoice_id, $payment_id);
        return $response;
    }

    /**
     * Operation removeInvoicePaymentWithHttpInfo
     *
     * Remove an invoice payment
     *
     * @param  int $invoice_id (required)
     * @param  int $payment_id (required)
     *
     * @throws \calderaPayQualpayPlatform\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \calderaPayQualpayPlatform\Model\QPApiResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function removeInvoicePaymentWithHttpInfo($invoice_id, $payment_id)
    {
        $returnType = '\calderaPayQualpayPlatform\Model\QPApiResponse';
        $request = $this->removeInvoicePaymentRequest($invoice_id, $payment_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\calderaPayQualpayPlatform\Model\QPApiResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\calderaPayQualpayPlatform\Model\QPApiResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\calderaPayQualpayPlatform\Model\QPApiResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation removeInvoicePaymentAsync
     *
     * Remove an invoice payment
     *
     * @param  int $invoice_id (required)
     * @param  int $payment_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function removeInvoicePaymentAsync($invoice_id, $payment_id)
    {
        return $this->removeInvoicePaymentAsyncWithHttpInfo($invoice_id, $payment_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation removeInvoicePaymentAsyncWithHttpInfo
     *
     * Remove an invoice payment
     *
     * @param  int $invoice_id (required)
     * @param  int $payment_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function removeInvoicePaymentAsyncWithHttpInfo($invoice_id, $payment_id)
    {
        $returnType = '\calderaPayQualpayPlatform\Model\QPApiResponse';
        $request = $this->removeInvoicePaymentRequest($invoice_id, $payment_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'removeInvoicePayment'
     *
     * @param  int $invoice_id (required)
     * @param  int $payment_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function removeInvoicePaymentRequest($invoice_id, $payment_id)
    {
        // verify the required parameter 'invoice_id' is set
        if ($invoice_id === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $invoice_id when calling removeInvoicePayment'
            );
        }
        // verify the required parameter 'payment_id' is set
        if ($payment_id === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $payment_id when calling removeInvoicePayment'
            );
        }

        $resourcePath = '/invoice/{invoice_id}/payments/{payment_id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($invoice_id !== null) {
            $resourcePath = str_replace(
                '{' . 'invoice_id' . '}',
                ObjectSerializer::toPathValue($invoice_id),
                $resourcePath
            );
        }
        // path params
        if ($payment_id !== null) {
            $resourcePath = str_replace(
                '{' . 'payment_id' . '}',
                ObjectSerializer::toPathValue($payment_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation resendInvoice
     *
     * Resend an invoice
     *
     * @param  int $invoice_id invoice_id (required)
     * @param  \calderaPayQualpayPlatform\Model\ResendInvoiceRequest $body Email Addresses (optional)
     *
     * @throws \calderaPayQualpayPlatform\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \calderaPayQualpayPlatform\Model\QPApiResponse
     */
    public function resendInvoice($invoice_id, $body = null)
    {
        list($response) = $this->resendInvoiceWithHttpInfo($invoice_id, $body);
        return $response;
    }

    /**
     * Operation resendInvoiceWithHttpInfo
     *
     * Resend an invoice
     *
     * @param  int $invoice_id (required)
     * @param  \calderaPayQualpayPlatform\Model\ResendInvoiceRequest $body Email Addresses (optional)
     *
     * @throws \calderaPayQualpayPlatform\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \calderaPayQualpayPlatform\Model\QPApiResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function resendInvoiceWithHttpInfo($invoice_id, $body = null)
    {
        $returnType = '\calderaPayQualpayPlatform\Model\QPApiResponse';
        $request = $this->resendInvoiceRequest($invoice_id, $body);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\calderaPayQualpayPlatform\Model\QPApiResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\calderaPayQualpayPlatform\Model\QPApiResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\calderaPayQualpayPlatform\Model\QPApiResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation resendInvoiceAsync
     *
     * Resend an invoice
     *
     * @param  int $invoice_id (required)
     * @param  \calderaPayQualpayPlatform\Model\ResendInvoiceRequest $body Email Addresses (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function resendInvoiceAsync($invoice_id, $body = null)
    {
        return $this->resendInvoiceAsyncWithHttpInfo($invoice_id, $body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation resendInvoiceAsyncWithHttpInfo
     *
     * Resend an invoice
     *
     * @param  int $invoice_id (required)
     * @param  \calderaPayQualpayPlatform\Model\ResendInvoiceRequest $body Email Addresses (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function resendInvoiceAsyncWithHttpInfo($invoice_id, $body = null)
    {
        $returnType = '\calderaPayQualpayPlatform\Model\QPApiResponse';
        $request = $this->resendInvoiceRequest($invoice_id, $body);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'resendInvoice'
     *
     * @param  int $invoice_id (required)
     * @param  \calderaPayQualpayPlatform\Model\ResendInvoiceRequest $body Email Addresses (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function resendInvoiceRequest($invoice_id, $body = null)
    {
        // verify the required parameter 'invoice_id' is set
        if ($invoice_id === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $invoice_id when calling resendInvoice'
            );
        }

        $resourcePath = '/invoice/{invoice_id}/resend';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($invoice_id !== null) {
            $resourcePath = str_replace(
                '{' . 'invoice_id' . '}',
                ObjectSerializer::toPathValue($invoice_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation sendInvoice
     *
     * Send an invoice
     *
     * @param  int $invoice_id invoice_id (required)
     * @param  \calderaPayQualpayPlatform\Model\SendInvoiceRequest $body Email Addresses (optional)
     *
     * @throws \calderaPayQualpayPlatform\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \calderaPayQualpayPlatform\Model\InvoiceResponse
     */
    public function sendInvoice($invoice_id, $body = null)
    {
        list($response) = $this->sendInvoiceWithHttpInfo($invoice_id, $body);
        return $response;
    }

    /**
     * Operation sendInvoiceWithHttpInfo
     *
     * Send an invoice
     *
     * @param  int $invoice_id (required)
     * @param  \calderaPayQualpayPlatform\Model\SendInvoiceRequest $body Email Addresses (optional)
     *
     * @throws \calderaPayQualpayPlatform\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \calderaPayQualpayPlatform\Model\InvoiceResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function sendInvoiceWithHttpInfo($invoice_id, $body = null)
    {
        $returnType = '\calderaPayQualpayPlatform\Model\InvoiceResponse';
        $request = $this->sendInvoiceRequest($invoice_id, $body);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\calderaPayQualpayPlatform\Model\InvoiceResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\calderaPayQualpayPlatform\Model\QPApiResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\calderaPayQualpayPlatform\Model\QPApiResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation sendInvoiceAsync
     *
     * Send an invoice
     *
     * @param  int $invoice_id (required)
     * @param  \calderaPayQualpayPlatform\Model\SendInvoiceRequest $body Email Addresses (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sendInvoiceAsync($invoice_id, $body = null)
    {
        return $this->sendInvoiceAsyncWithHttpInfo($invoice_id, $body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation sendInvoiceAsyncWithHttpInfo
     *
     * Send an invoice
     *
     * @param  int $invoice_id (required)
     * @param  \calderaPayQualpayPlatform\Model\SendInvoiceRequest $body Email Addresses (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sendInvoiceAsyncWithHttpInfo($invoice_id, $body = null)
    {
        $returnType = '\calderaPayQualpayPlatform\Model\InvoiceResponse';
        $request = $this->sendInvoiceRequest($invoice_id, $body);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'sendInvoice'
     *
     * @param  int $invoice_id (required)
     * @param  \calderaPayQualpayPlatform\Model\SendInvoiceRequest $body Email Addresses (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function sendInvoiceRequest($invoice_id, $body = null)
    {
        // verify the required parameter 'invoice_id' is set
        if ($invoice_id === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $invoice_id when calling sendInvoice'
            );
        }

        $resourcePath = '/invoice/{invoice_id}/send';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($invoice_id !== null) {
            $resourcePath = str_replace(
                '{' . 'invoice_id' . '}',
                ObjectSerializer::toPathValue($invoice_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updateDraftInvoice
     *
     * Update a draft invoice
     *
     * @param  int $invoice_id invoice_id (required)
     * @param  \calderaPayQualpayPlatform\Model\UpdateDraftRequest $body Invoice (required)
     *
     * @throws \calderaPayQualpayPlatform\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \calderaPayQualpayPlatform\Model\InvoiceResponse
     */
    public function updateDraftInvoice($invoice_id, $body)
    {
        list($response) = $this->updateDraftInvoiceWithHttpInfo($invoice_id, $body);
        return $response;
    }

    /**
     * Operation updateDraftInvoiceWithHttpInfo
     *
     * Update a draft invoice
     *
     * @param  int $invoice_id (required)
     * @param  \calderaPayQualpayPlatform\Model\UpdateDraftRequest $body Invoice (required)
     *
     * @throws \calderaPayQualpayPlatform\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \calderaPayQualpayPlatform\Model\InvoiceResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateDraftInvoiceWithHttpInfo($invoice_id, $body)
    {
        $returnType = '\calderaPayQualpayPlatform\Model\InvoiceResponse';
        $request = $this->updateDraftInvoiceRequest($invoice_id, $body);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\calderaPayQualpayPlatform\Model\InvoiceResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\calderaPayQualpayPlatform\Model\QPApiResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\calderaPayQualpayPlatform\Model\QPApiResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation updateDraftInvoiceAsync
     *
     * Update a draft invoice
     *
     * @param  int $invoice_id (required)
     * @param  \calderaPayQualpayPlatform\Model\UpdateDraftRequest $body Invoice (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateDraftInvoiceAsync($invoice_id, $body)
    {
        return $this->updateDraftInvoiceAsyncWithHttpInfo($invoice_id, $body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation updateDraftInvoiceAsyncWithHttpInfo
     *
     * Update a draft invoice
     *
     * @param  int $invoice_id (required)
     * @param  \calderaPayQualpayPlatform\Model\UpdateDraftRequest $body Invoice (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateDraftInvoiceAsyncWithHttpInfo($invoice_id, $body)
    {
        $returnType = '\calderaPayQualpayPlatform\Model\InvoiceResponse';
        $request = $this->updateDraftInvoiceRequest($invoice_id, $body);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'updateDraftInvoice'
     *
     * @param  int $invoice_id (required)
     * @param  \calderaPayQualpayPlatform\Model\UpdateDraftRequest $body Invoice (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function updateDraftInvoiceRequest($invoice_id, $body)
    {
        // verify the required parameter 'invoice_id' is set
        if ($invoice_id === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $invoice_id when calling updateDraftInvoice'
            );
        }
        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling updateDraftInvoice'
            );
        }

        $resourcePath = '/invoice/{invoice_id}/draft';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($invoice_id !== null) {
            $resourcePath = str_replace(
                '{' . 'invoice_id' . '}',
                ObjectSerializer::toPathValue($invoice_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updateInvoicePayment
     *
     * Update an invoice payment
     *
     * @param  int $invoice_id invoice_id (required)
     * @param  int $payment_id payment_id (required)
     * @param  \calderaPayQualpayPlatform\Model\InvoicePaymentRequest $body Invoice Payment (required)
     *
     * @throws \calderaPayQualpayPlatform\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \calderaPayQualpayPlatform\Model\InvoicePaymentResponse
     */
    public function updateInvoicePayment($invoice_id, $payment_id, $body)
    {
        list($response) = $this->updateInvoicePaymentWithHttpInfo($invoice_id, $payment_id, $body);
        return $response;
    }

    /**
     * Operation updateInvoicePaymentWithHttpInfo
     *
     * Update an invoice payment
     *
     * @param  int $invoice_id (required)
     * @param  int $payment_id (required)
     * @param  \calderaPayQualpayPlatform\Model\InvoicePaymentRequest $body Invoice Payment (required)
     *
     * @throws \calderaPayQualpayPlatform\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \calderaPayQualpayPlatform\Model\InvoicePaymentResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateInvoicePaymentWithHttpInfo($invoice_id, $payment_id, $body)
    {
        $returnType = '\calderaPayQualpayPlatform\Model\InvoicePaymentResponse';
        $request = $this->updateInvoicePaymentRequest($invoice_id, $payment_id, $body);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\calderaPayQualpayPlatform\Model\InvoicePaymentResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\calderaPayQualpayPlatform\Model\QPApiResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\calderaPayQualpayPlatform\Model\QPApiResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation updateInvoicePaymentAsync
     *
     * Update an invoice payment
     *
     * @param  int $invoice_id (required)
     * @param  int $payment_id (required)
     * @param  \calderaPayQualpayPlatform\Model\InvoicePaymentRequest $body Invoice Payment (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateInvoicePaymentAsync($invoice_id, $payment_id, $body)
    {
        return $this->updateInvoicePaymentAsyncWithHttpInfo($invoice_id, $payment_id, $body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation updateInvoicePaymentAsyncWithHttpInfo
     *
     * Update an invoice payment
     *
     * @param  int $invoice_id (required)
     * @param  int $payment_id (required)
     * @param  \calderaPayQualpayPlatform\Model\InvoicePaymentRequest $body Invoice Payment (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateInvoicePaymentAsyncWithHttpInfo($invoice_id, $payment_id, $body)
    {
        $returnType = '\calderaPayQualpayPlatform\Model\InvoicePaymentResponse';
        $request = $this->updateInvoicePaymentRequest($invoice_id, $payment_id, $body);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'updateInvoicePayment'
     *
     * @param  int $invoice_id (required)
     * @param  int $payment_id (required)
     * @param  \calderaPayQualpayPlatform\Model\InvoicePaymentRequest $body Invoice Payment (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function updateInvoicePaymentRequest($invoice_id, $payment_id, $body)
    {
        // verify the required parameter 'invoice_id' is set
        if ($invoice_id === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $invoice_id when calling updateInvoicePayment'
            );
        }
        // verify the required parameter 'payment_id' is set
        if ($payment_id === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $payment_id when calling updateInvoicePayment'
            );
        }
        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling updateInvoicePayment'
            );
        }

        $resourcePath = '/invoice/{invoice_id}/payments/{payment_id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($invoice_id !== null) {
            $resourcePath = str_replace(
                '{' . 'invoice_id' . '}',
                ObjectSerializer::toPathValue($invoice_id),
                $resourcePath
            );
        }
        // path params
        if ($payment_id !== null) {
            $resourcePath = str_replace(
                '{' . 'payment_id' . '}',
                ObjectSerializer::toPathValue($payment_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updateOutstandingInvoice
     *
     * Update an outstanding invoice
     *
     * @param  int $invoice_id invoice_id (required)
     * @param  \calderaPayQualpayPlatform\Model\UpdateOutstandingRequest $body Invoice (required)
     *
     * @throws \calderaPayQualpayPlatform\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \calderaPayQualpayPlatform\Model\InvoiceResponse
     */
    public function updateOutstandingInvoice($invoice_id, $body)
    {
        list($response) = $this->updateOutstandingInvoiceWithHttpInfo($invoice_id, $body);
        return $response;
    }

    /**
     * Operation updateOutstandingInvoiceWithHttpInfo
     *
     * Update an outstanding invoice
     *
     * @param  int $invoice_id (required)
     * @param  \calderaPayQualpayPlatform\Model\UpdateOutstandingRequest $body Invoice (required)
     *
     * @throws \calderaPayQualpayPlatform\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \calderaPayQualpayPlatform\Model\InvoiceResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateOutstandingInvoiceWithHttpInfo($invoice_id, $body)
    {
        $returnType = '\calderaPayQualpayPlatform\Model\InvoiceResponse';
        $request = $this->updateOutstandingInvoiceRequest($invoice_id, $body);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\calderaPayQualpayPlatform\Model\InvoiceResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\calderaPayQualpayPlatform\Model\QPApiResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\calderaPayQualpayPlatform\Model\QPApiResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation updateOutstandingInvoiceAsync
     *
     * Update an outstanding invoice
     *
     * @param  int $invoice_id (required)
     * @param  \calderaPayQualpayPlatform\Model\UpdateOutstandingRequest $body Invoice (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateOutstandingInvoiceAsync($invoice_id, $body)
    {
        return $this->updateOutstandingInvoiceAsyncWithHttpInfo($invoice_id, $body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation updateOutstandingInvoiceAsyncWithHttpInfo
     *
     * Update an outstanding invoice
     *
     * @param  int $invoice_id (required)
     * @param  \calderaPayQualpayPlatform\Model\UpdateOutstandingRequest $body Invoice (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateOutstandingInvoiceAsyncWithHttpInfo($invoice_id, $body)
    {
        $returnType = '\calderaPayQualpayPlatform\Model\InvoiceResponse';
        $request = $this->updateOutstandingInvoiceRequest($invoice_id, $body);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'updateOutstandingInvoice'
     *
     * @param  int $invoice_id (required)
     * @param  \calderaPayQualpayPlatform\Model\UpdateOutstandingRequest $body Invoice (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function updateOutstandingInvoiceRequest($invoice_id, $body)
    {
        // verify the required parameter 'invoice_id' is set
        if ($invoice_id === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $invoice_id when calling updateOutstandingInvoice'
            );
        }
        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling updateOutstandingInvoice'
            );
        }

        $resourcePath = '/invoice/{invoice_id}/outstanding';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($invoice_id !== null) {
            $resourcePath = str_replace(
                '{' . 'invoice_id' . '}',
                ObjectSerializer::toPathValue($invoice_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
