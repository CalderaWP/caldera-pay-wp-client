<?php
/**
 * RecurringBillingApi
 * PHP version 5
 *
 * @category Class
 * @package  calderaPayQualpayPlatform
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Qualpay Platform API
 *
 * This document describes the Qualpay Platform API.
 *
 * OpenAPI spec version: 1.1.9
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.3.1
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace calderaPayQualpayPlatform\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use calderaPayQualpayPlatform\ApiException;
use calderaPayQualpayPlatform\Configuration;
use calderaPayQualpayPlatform\HeaderSelector;
use calderaPayQualpayPlatform\ObjectSerializer;

/**
 * RecurringBillingApi Class Doc Comment
 *
 * @category Class
 * @package  calderaPayQualpayPlatform
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class RecurringBillingApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation addPlan
     *
     * Add a Recurring Plan
     *
     * @param  \calderaPayQualpayPlatform\Model\RecurringPlan $body Recurring Plan Object that needs to be added (required)
     *
     * @throws \calderaPayQualpayPlatform\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \calderaPayQualpayPlatform\Model\RecurringPlanResponse
     */
    public function addPlan($body)
    {
        list($response) = $this->addPlanWithHttpInfo($body);
        return $response;
    }

    /**
     * Operation addPlanWithHttpInfo
     *
     * Add a Recurring Plan
     *
     * @param  \calderaPayQualpayPlatform\Model\RecurringPlan $body Recurring Plan Object that needs to be added (required)
     *
     * @throws \calderaPayQualpayPlatform\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \calderaPayQualpayPlatform\Model\RecurringPlanResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function addPlanWithHttpInfo($body)
    {
        $returnType = '\calderaPayQualpayPlatform\Model\RecurringPlanResponse';
        $request = $this->addPlanRequest($body);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\calderaPayQualpayPlatform\Model\RecurringPlanResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\calderaPayQualpayPlatform\Model\QPApiResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\calderaPayQualpayPlatform\Model\QPApiResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation addPlanAsync
     *
     * Add a Recurring Plan
     *
     * @param  \calderaPayQualpayPlatform\Model\RecurringPlan $body Recurring Plan Object that needs to be added (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function addPlanAsync($body)
    {
        return $this->addPlanAsyncWithHttpInfo($body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation addPlanAsyncWithHttpInfo
     *
     * Add a Recurring Plan
     *
     * @param  \calderaPayQualpayPlatform\Model\RecurringPlan $body Recurring Plan Object that needs to be added (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function addPlanAsyncWithHttpInfo($body)
    {
        $returnType = '\calderaPayQualpayPlatform\Model\RecurringPlanResponse';
        $request = $this->addPlanRequest($body);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'addPlan'
     *
     * @param  \calderaPayQualpayPlatform\Model\RecurringPlan $body Recurring Plan Object that needs to be added (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function addPlanRequest($body)
    {
        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling addPlan'
            );
        }

        $resourcePath = '/plan';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation addSubscription
     *
     * Add a subscription
     *
     * @param  \calderaPayQualpayPlatform\Model\SubscriptionRequest $body Subscription Request (optional)
     *
     * @throws \calderaPayQualpayPlatform\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \calderaPayQualpayPlatform\Model\SubscriptionResponse
     */
    public function addSubscription($body = null)
    {
        list($response) = $this->addSubscriptionWithHttpInfo($body);
        return $response;
    }

    /**
     * Operation addSubscriptionWithHttpInfo
     *
     * Add a subscription
     *
     * @param  \calderaPayQualpayPlatform\Model\SubscriptionRequest $body Subscription Request (optional)
     *
     * @throws \calderaPayQualpayPlatform\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \calderaPayQualpayPlatform\Model\SubscriptionResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function addSubscriptionWithHttpInfo($body = null)
    {
        $returnType = '\calderaPayQualpayPlatform\Model\SubscriptionResponse';
        $request = $this->addSubscriptionRequest($body);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\calderaPayQualpayPlatform\Model\SubscriptionResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\calderaPayQualpayPlatform\Model\QPApiResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\calderaPayQualpayPlatform\Model\QPApiResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation addSubscriptionAsync
     *
     * Add a subscription
     *
     * @param  \calderaPayQualpayPlatform\Model\SubscriptionRequest $body Subscription Request (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function addSubscriptionAsync($body = null)
    {
        return $this->addSubscriptionAsyncWithHttpInfo($body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation addSubscriptionAsyncWithHttpInfo
     *
     * Add a subscription
     *
     * @param  \calderaPayQualpayPlatform\Model\SubscriptionRequest $body Subscription Request (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function addSubscriptionAsyncWithHttpInfo($body = null)
    {
        $returnType = '\calderaPayQualpayPlatform\Model\SubscriptionResponse';
        $request = $this->addSubscriptionRequest($body);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'addSubscription'
     *
     * @param  \calderaPayQualpayPlatform\Model\SubscriptionRequest $body Subscription Request (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function addSubscriptionRequest($body = null)
    {

        $resourcePath = '/subscription';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation archivePlan
     *
     * Archive a Recurring Plan
     *
     * @param  string $plan_code Plan Code that will be archived (required)
     * @param  \calderaPayQualpayPlatform\Model\RecurringPlan $body Plan Name (optional)
     *
     * @throws \calderaPayQualpayPlatform\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \calderaPayQualpayPlatform\Model\RecurringPlanResponse
     */
    public function archivePlan($plan_code, $body = null)
    {
        list($response) = $this->archivePlanWithHttpInfo($plan_code, $body);
        return $response;
    }

    /**
     * Operation archivePlanWithHttpInfo
     *
     * Archive a Recurring Plan
     *
     * @param  string $plan_code Plan Code that will be archived (required)
     * @param  \calderaPayQualpayPlatform\Model\RecurringPlan $body Plan Name (optional)
     *
     * @throws \calderaPayQualpayPlatform\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \calderaPayQualpayPlatform\Model\RecurringPlanResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function archivePlanWithHttpInfo($plan_code, $body = null)
    {
        $returnType = '\calderaPayQualpayPlatform\Model\RecurringPlanResponse';
        $request = $this->archivePlanRequest($plan_code, $body);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\calderaPayQualpayPlatform\Model\RecurringPlanResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\calderaPayQualpayPlatform\Model\QPApiResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\calderaPayQualpayPlatform\Model\QPApiResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation archivePlanAsync
     *
     * Archive a Recurring Plan
     *
     * @param  string $plan_code Plan Code that will be archived (required)
     * @param  \calderaPayQualpayPlatform\Model\RecurringPlan $body Plan Name (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function archivePlanAsync($plan_code, $body = null)
    {
        return $this->archivePlanAsyncWithHttpInfo($plan_code, $body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation archivePlanAsyncWithHttpInfo
     *
     * Archive a Recurring Plan
     *
     * @param  string $plan_code Plan Code that will be archived (required)
     * @param  \calderaPayQualpayPlatform\Model\RecurringPlan $body Plan Name (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function archivePlanAsyncWithHttpInfo($plan_code, $body = null)
    {
        $returnType = '\calderaPayQualpayPlatform\Model\RecurringPlanResponse';
        $request = $this->archivePlanRequest($plan_code, $body);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'archivePlan'
     *
     * @param  string $plan_code Plan Code that will be archived (required)
     * @param  \calderaPayQualpayPlatform\Model\RecurringPlan $body Plan Name (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function archivePlanRequest($plan_code, $body = null)
    {
        // verify the required parameter 'plan_code' is set
        if ($plan_code === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $plan_code when calling archivePlan'
            );
        }

        $resourcePath = '/plan/{plan_code}/archive';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($plan_code !== null) {
            $resourcePath = str_replace(
                '{' . 'plan_code' . '}',
                ObjectSerializer::toPathValue($plan_code),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation browsePlans
     *
     * Get all Recurring Plans
     *
     * @param  int $count The number of records in the result. (optional, default to 10)
     * @param  string $order_on The field on which the results will be sorted on. Refer to the response model for available fields. (optional, default to plan_code)
     * @param  string $order_by Ascending or Descending Sort order of the result. (optional, default to asc)
     * @param  int $page Zero-based page number, use this to choose a page when there are more results than the count parameter. (optional, default to 0)
     * @param  string $filter Results can be filtered by custom filter criteria. Refer to [Filter](/developer/api/reference#filters) to use the filter parameter. (optional)
     * @param  int $vendor_id Identifies the vendor to which this request applies. Applicable only if this request is on behalf of another merchant. (optional, default to 0)
     *
     * @throws \calderaPayQualpayPlatform\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \calderaPayQualpayPlatform\Model\RecurringPlanListResponse
     */
    public function browsePlans($count = '10', $order_on = 'plan_code', $order_by = 'asc', $page = '0', $filter = null, $vendor_id = '0')
    {
        list($response) = $this->browsePlansWithHttpInfo($count, $order_on, $order_by, $page, $filter, $vendor_id);
        return $response;
    }

    /**
     * Operation browsePlansWithHttpInfo
     *
     * Get all Recurring Plans
     *
     * @param  int $count The number of records in the result. (optional, default to 10)
     * @param  string $order_on The field on which the results will be sorted on. Refer to the response model for available fields. (optional, default to plan_code)
     * @param  string $order_by Ascending or Descending Sort order of the result. (optional, default to asc)
     * @param  int $page Zero-based page number, use this to choose a page when there are more results than the count parameter. (optional, default to 0)
     * @param  string $filter Results can be filtered by custom filter criteria. Refer to [Filter](/developer/api/reference#filters) to use the filter parameter. (optional)
     * @param  int $vendor_id Identifies the vendor to which this request applies. Applicable only if this request is on behalf of another merchant. (optional, default to 0)
     *
     * @throws \calderaPayQualpayPlatform\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \calderaPayQualpayPlatform\Model\RecurringPlanListResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function browsePlansWithHttpInfo($count = '10', $order_on = 'plan_code', $order_by = 'asc', $page = '0', $filter = null, $vendor_id = '0')
    {
        $returnType = '\calderaPayQualpayPlatform\Model\RecurringPlanListResponse';
        $request = $this->browsePlansRequest($count, $order_on, $order_by, $page, $filter, $vendor_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\calderaPayQualpayPlatform\Model\RecurringPlanListResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\calderaPayQualpayPlatform\Model\QPApiResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\calderaPayQualpayPlatform\Model\QPApiResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation browsePlansAsync
     *
     * Get all Recurring Plans
     *
     * @param  int $count The number of records in the result. (optional, default to 10)
     * @param  string $order_on The field on which the results will be sorted on. Refer to the response model for available fields. (optional, default to plan_code)
     * @param  string $order_by Ascending or Descending Sort order of the result. (optional, default to asc)
     * @param  int $page Zero-based page number, use this to choose a page when there are more results than the count parameter. (optional, default to 0)
     * @param  string $filter Results can be filtered by custom filter criteria. Refer to [Filter](/developer/api/reference#filters) to use the filter parameter. (optional)
     * @param  int $vendor_id Identifies the vendor to which this request applies. Applicable only if this request is on behalf of another merchant. (optional, default to 0)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function browsePlansAsync($count = '10', $order_on = 'plan_code', $order_by = 'asc', $page = '0', $filter = null, $vendor_id = '0')
    {
        return $this->browsePlansAsyncWithHttpInfo($count, $order_on, $order_by, $page, $filter, $vendor_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation browsePlansAsyncWithHttpInfo
     *
     * Get all Recurring Plans
     *
     * @param  int $count The number of records in the result. (optional, default to 10)
     * @param  string $order_on The field on which the results will be sorted on. Refer to the response model for available fields. (optional, default to plan_code)
     * @param  string $order_by Ascending or Descending Sort order of the result. (optional, default to asc)
     * @param  int $page Zero-based page number, use this to choose a page when there are more results than the count parameter. (optional, default to 0)
     * @param  string $filter Results can be filtered by custom filter criteria. Refer to [Filter](/developer/api/reference#filters) to use the filter parameter. (optional)
     * @param  int $vendor_id Identifies the vendor to which this request applies. Applicable only if this request is on behalf of another merchant. (optional, default to 0)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function browsePlansAsyncWithHttpInfo($count = '10', $order_on = 'plan_code', $order_by = 'asc', $page = '0', $filter = null, $vendor_id = '0')
    {
        $returnType = '\calderaPayQualpayPlatform\Model\RecurringPlanListResponse';
        $request = $this->browsePlansRequest($count, $order_on, $order_by, $page, $filter, $vendor_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'browsePlans'
     *
     * @param  int $count The number of records in the result. (optional, default to 10)
     * @param  string $order_on The field on which the results will be sorted on. Refer to the response model for available fields. (optional, default to plan_code)
     * @param  string $order_by Ascending or Descending Sort order of the result. (optional, default to asc)
     * @param  int $page Zero-based page number, use this to choose a page when there are more results than the count parameter. (optional, default to 0)
     * @param  string $filter Results can be filtered by custom filter criteria. Refer to [Filter](/developer/api/reference#filters) to use the filter parameter. (optional)
     * @param  int $vendor_id Identifies the vendor to which this request applies. Applicable only if this request is on behalf of another merchant. (optional, default to 0)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function browsePlansRequest($count = '10', $order_on = 'plan_code', $order_by = 'asc', $page = '0', $filter = null, $vendor_id = '0')
    {
        if ($count !== null && $count > 100) {
            throw new \InvalidArgumentException('invalid value for "$count" when calling RecurringBillingApi.browsePlans, must be smaller than or equal to 100.');
        }
        if ($count !== null && $count < 1) {
            throw new \InvalidArgumentException('invalid value for "$count" when calling RecurringBillingApi.browsePlans, must be bigger than or equal to 1.');
        }


        $resourcePath = '/plan';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($count !== null) {
            $queryParams['count'] = ObjectSerializer::toQueryValue($count);
        }
        // query params
        if ($order_on !== null) {
            $queryParams['order_on'] = ObjectSerializer::toQueryValue($order_on);
        }
        // query params
        if ($order_by !== null) {
            $queryParams['order_by'] = ObjectSerializer::toQueryValue($order_by);
        }
        // query params
        if ($page !== null) {
            $queryParams['page'] = ObjectSerializer::toQueryValue($page);
        }
        // query params
        if ($filter !== null) {
            $queryParams['filter'] = ObjectSerializer::toQueryValue($filter);
        }
        // query params
        if ($vendor_id !== null) {
            $queryParams['vendor_id'] = ObjectSerializer::toQueryValue($vendor_id);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation browseSubscriptions
     *
     * Get all subscriptions
     *
     * @param  int $count The number of records in the result. (optional, default to 10)
     * @param  string $order_on The field on which the results will be sorted on. Refer to the response model for available fields. (optional, default to date_next)
     * @param  string $order_by Ascending or Descending Sort order of the result. (optional, default to desc)
     * @param  int $page Zero-based page number, use this to choose a page when there are more results than the count parameter. (optional, default to 0)
     * @param  string $filter Results can be filtered by custom filter criteria. Refer to [Filter](/developer/api/reference#filters) to use the filter parameter. (optional)
     * @param  int $vendor_id Identifies the vendor to which this request applies. Applicable only if this request is on behalf of another merchant. (optional, default to 0)
     *
     * @throws \calderaPayQualpayPlatform\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \calderaPayQualpayPlatform\Model\SubscriptionListResponse
     */
    public function browseSubscriptions($count = '10', $order_on = 'date_next', $order_by = 'desc', $page = '0', $filter = null, $vendor_id = '0')
    {
        list($response) = $this->browseSubscriptionsWithHttpInfo($count, $order_on, $order_by, $page, $filter, $vendor_id);
        return $response;
    }

    /**
     * Operation browseSubscriptionsWithHttpInfo
     *
     * Get all subscriptions
     *
     * @param  int $count The number of records in the result. (optional, default to 10)
     * @param  string $order_on The field on which the results will be sorted on. Refer to the response model for available fields. (optional, default to date_next)
     * @param  string $order_by Ascending or Descending Sort order of the result. (optional, default to desc)
     * @param  int $page Zero-based page number, use this to choose a page when there are more results than the count parameter. (optional, default to 0)
     * @param  string $filter Results can be filtered by custom filter criteria. Refer to [Filter](/developer/api/reference#filters) to use the filter parameter. (optional)
     * @param  int $vendor_id Identifies the vendor to which this request applies. Applicable only if this request is on behalf of another merchant. (optional, default to 0)
     *
     * @throws \calderaPayQualpayPlatform\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \calderaPayQualpayPlatform\Model\SubscriptionListResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function browseSubscriptionsWithHttpInfo($count = '10', $order_on = 'date_next', $order_by = 'desc', $page = '0', $filter = null, $vendor_id = '0')
    {
        $returnType = '\calderaPayQualpayPlatform\Model\SubscriptionListResponse';
        $request = $this->browseSubscriptionsRequest($count, $order_on, $order_by, $page, $filter, $vendor_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\calderaPayQualpayPlatform\Model\SubscriptionListResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation browseSubscriptionsAsync
     *
     * Get all subscriptions
     *
     * @param  int $count The number of records in the result. (optional, default to 10)
     * @param  string $order_on The field on which the results will be sorted on. Refer to the response model for available fields. (optional, default to date_next)
     * @param  string $order_by Ascending or Descending Sort order of the result. (optional, default to desc)
     * @param  int $page Zero-based page number, use this to choose a page when there are more results than the count parameter. (optional, default to 0)
     * @param  string $filter Results can be filtered by custom filter criteria. Refer to [Filter](/developer/api/reference#filters) to use the filter parameter. (optional)
     * @param  int $vendor_id Identifies the vendor to which this request applies. Applicable only if this request is on behalf of another merchant. (optional, default to 0)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function browseSubscriptionsAsync($count = '10', $order_on = 'date_next', $order_by = 'desc', $page = '0', $filter = null, $vendor_id = '0')
    {
        return $this->browseSubscriptionsAsyncWithHttpInfo($count, $order_on, $order_by, $page, $filter, $vendor_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation browseSubscriptionsAsyncWithHttpInfo
     *
     * Get all subscriptions
     *
     * @param  int $count The number of records in the result. (optional, default to 10)
     * @param  string $order_on The field on which the results will be sorted on. Refer to the response model for available fields. (optional, default to date_next)
     * @param  string $order_by Ascending or Descending Sort order of the result. (optional, default to desc)
     * @param  int $page Zero-based page number, use this to choose a page when there are more results than the count parameter. (optional, default to 0)
     * @param  string $filter Results can be filtered by custom filter criteria. Refer to [Filter](/developer/api/reference#filters) to use the filter parameter. (optional)
     * @param  int $vendor_id Identifies the vendor to which this request applies. Applicable only if this request is on behalf of another merchant. (optional, default to 0)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function browseSubscriptionsAsyncWithHttpInfo($count = '10', $order_on = 'date_next', $order_by = 'desc', $page = '0', $filter = null, $vendor_id = '0')
    {
        $returnType = '\calderaPayQualpayPlatform\Model\SubscriptionListResponse';
        $request = $this->browseSubscriptionsRequest($count, $order_on, $order_by, $page, $filter, $vendor_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'browseSubscriptions'
     *
     * @param  int $count The number of records in the result. (optional, default to 10)
     * @param  string $order_on The field on which the results will be sorted on. Refer to the response model for available fields. (optional, default to date_next)
     * @param  string $order_by Ascending or Descending Sort order of the result. (optional, default to desc)
     * @param  int $page Zero-based page number, use this to choose a page when there are more results than the count parameter. (optional, default to 0)
     * @param  string $filter Results can be filtered by custom filter criteria. Refer to [Filter](/developer/api/reference#filters) to use the filter parameter. (optional)
     * @param  int $vendor_id Identifies the vendor to which this request applies. Applicable only if this request is on behalf of another merchant. (optional, default to 0)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function browseSubscriptionsRequest($count = '10', $order_on = 'date_next', $order_by = 'desc', $page = '0', $filter = null, $vendor_id = '0')
    {
        if ($count !== null && $count > 100) {
            throw new \InvalidArgumentException('invalid value for "$count" when calling RecurringBillingApi.browseSubscriptions, must be smaller than or equal to 100.');
        }
        if ($count !== null && $count < 1) {
            throw new \InvalidArgumentException('invalid value for "$count" when calling RecurringBillingApi.browseSubscriptions, must be bigger than or equal to 1.');
        }


        $resourcePath = '/subscription';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($count !== null) {
            $queryParams['count'] = ObjectSerializer::toQueryValue($count);
        }
        // query params
        if ($order_on !== null) {
            $queryParams['order_on'] = ObjectSerializer::toQueryValue($order_on);
        }
        // query params
        if ($order_by !== null) {
            $queryParams['order_by'] = ObjectSerializer::toQueryValue($order_by);
        }
        // query params
        if ($page !== null) {
            $queryParams['page'] = ObjectSerializer::toQueryValue($page);
        }
        // query params
        if ($filter !== null) {
            $queryParams['filter'] = ObjectSerializer::toQueryValue($filter);
        }
        // query params
        if ($vendor_id !== null) {
            $queryParams['vendor_id'] = ObjectSerializer::toQueryValue($vendor_id);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation cancelSubscription
     *
     * Cancel a subscription
     *
     * @param  int $subscription_id Subscription ID (required)
     * @param  \calderaPayQualpayPlatform\Model\SubscriptionRequest $body Customer ID (required)
     *
     * @throws \calderaPayQualpayPlatform\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \calderaPayQualpayPlatform\Model\SubscriptionResponse
     */
    public function cancelSubscription($subscription_id, $body)
    {
        list($response) = $this->cancelSubscriptionWithHttpInfo($subscription_id, $body);
        return $response;
    }

    /**
     * Operation cancelSubscriptionWithHttpInfo
     *
     * Cancel a subscription
     *
     * @param  int $subscription_id Subscription ID (required)
     * @param  \calderaPayQualpayPlatform\Model\SubscriptionRequest $body Customer ID (required)
     *
     * @throws \calderaPayQualpayPlatform\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \calderaPayQualpayPlatform\Model\SubscriptionResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function cancelSubscriptionWithHttpInfo($subscription_id, $body)
    {
        $returnType = '\calderaPayQualpayPlatform\Model\SubscriptionResponse';
        $request = $this->cancelSubscriptionRequest($subscription_id, $body);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\calderaPayQualpayPlatform\Model\SubscriptionResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\calderaPayQualpayPlatform\Model\QPApiResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\calderaPayQualpayPlatform\Model\QPApiResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation cancelSubscriptionAsync
     *
     * Cancel a subscription
     *
     * @param  int $subscription_id Subscription ID (required)
     * @param  \calderaPayQualpayPlatform\Model\SubscriptionRequest $body Customer ID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function cancelSubscriptionAsync($subscription_id, $body)
    {
        return $this->cancelSubscriptionAsyncWithHttpInfo($subscription_id, $body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation cancelSubscriptionAsyncWithHttpInfo
     *
     * Cancel a subscription
     *
     * @param  int $subscription_id Subscription ID (required)
     * @param  \calderaPayQualpayPlatform\Model\SubscriptionRequest $body Customer ID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function cancelSubscriptionAsyncWithHttpInfo($subscription_id, $body)
    {
        $returnType = '\calderaPayQualpayPlatform\Model\SubscriptionResponse';
        $request = $this->cancelSubscriptionRequest($subscription_id, $body);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'cancelSubscription'
     *
     * @param  int $subscription_id Subscription ID (required)
     * @param  \calderaPayQualpayPlatform\Model\SubscriptionRequest $body Customer ID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function cancelSubscriptionRequest($subscription_id, $body)
    {
        // verify the required parameter 'subscription_id' is set
        if ($subscription_id === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $subscription_id when calling cancelSubscription'
            );
        }
        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling cancelSubscription'
            );
        }

        $resourcePath = '/subscription/{subscription_id}/cancel';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($subscription_id !== null) {
            $resourcePath = str_replace(
                '{' . 'subscription_id' . '}',
                ObjectSerializer::toPathValue($subscription_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deletePlan
     *
     * Delete a Recurring Plan
     *
     * @param  int $plan_id Plan ID that will flagged as deleted (required)
     * @param  int $vendor_id Identifies the vendor to which this request applies. Applicable only if this request is on behalf of another merchant. (optional, default to 0)
     *
     * @throws \calderaPayQualpayPlatform\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \calderaPayQualpayPlatform\Model\RecurringPlanResponse
     */
    public function deletePlan($plan_id, $vendor_id = '0')
    {
        list($response) = $this->deletePlanWithHttpInfo($plan_id, $vendor_id);
        return $response;
    }

    /**
     * Operation deletePlanWithHttpInfo
     *
     * Delete a Recurring Plan
     *
     * @param  int $plan_id Plan ID that will flagged as deleted (required)
     * @param  int $vendor_id Identifies the vendor to which this request applies. Applicable only if this request is on behalf of another merchant. (optional, default to 0)
     *
     * @throws \calderaPayQualpayPlatform\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \calderaPayQualpayPlatform\Model\RecurringPlanResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function deletePlanWithHttpInfo($plan_id, $vendor_id = '0')
    {
        $returnType = '\calderaPayQualpayPlatform\Model\RecurringPlanResponse';
        $request = $this->deletePlanRequest($plan_id, $vendor_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\calderaPayQualpayPlatform\Model\RecurringPlanResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\calderaPayQualpayPlatform\Model\QPApiResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\calderaPayQualpayPlatform\Model\QPApiResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation deletePlanAsync
     *
     * Delete a Recurring Plan
     *
     * @param  int $plan_id Plan ID that will flagged as deleted (required)
     * @param  int $vendor_id Identifies the vendor to which this request applies. Applicable only if this request is on behalf of another merchant. (optional, default to 0)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deletePlanAsync($plan_id, $vendor_id = '0')
    {
        return $this->deletePlanAsyncWithHttpInfo($plan_id, $vendor_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deletePlanAsyncWithHttpInfo
     *
     * Delete a Recurring Plan
     *
     * @param  int $plan_id Plan ID that will flagged as deleted (required)
     * @param  int $vendor_id Identifies the vendor to which this request applies. Applicable only if this request is on behalf of another merchant. (optional, default to 0)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deletePlanAsyncWithHttpInfo($plan_id, $vendor_id = '0')
    {
        $returnType = '\calderaPayQualpayPlatform\Model\RecurringPlanResponse';
        $request = $this->deletePlanRequest($plan_id, $vendor_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deletePlan'
     *
     * @param  int $plan_id Plan ID that will flagged as deleted (required)
     * @param  int $vendor_id Identifies the vendor to which this request applies. Applicable only if this request is on behalf of another merchant. (optional, default to 0)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function deletePlanRequest($plan_id, $vendor_id = '0')
    {
        // verify the required parameter 'plan_id' is set
        if ($plan_id === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $plan_id when calling deletePlan'
            );
        }

        $resourcePath = '/plan/{plan_id}/delete';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($vendor_id !== null) {
            $queryParams['vendor_id'] = ObjectSerializer::toQueryValue($vendor_id);
        }

        // path params
        if ($plan_id !== null) {
            $resourcePath = str_replace(
                '{' . 'plan_id' . '}',
                ObjectSerializer::toPathValue($plan_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getAllSubscriptionTransactions
     *
     * Get all subscription transactions
     *
     * @param  int $count The number of records in the result. (optional, default to 10)
     * @param  string $order_on The field on which the results will be sorted on. Refer to the response model for available fields. (optional, default to tran_time)
     * @param  string $order_by Ascending or Descending Sort order of the result. (optional, default to desc)
     * @param  int $page Zero-based page number, use this to choose a page when there are more results than the count parameter. (optional, default to 0)
     * @param  string $filter Results can be filtered by custom filter criteria. Refer to [Filter](/developer/api/reference#filters) to use the filter parameter. (optional)
     * @param  int $vendor_id Identifies the vendor to which this request applies. Applicable only if this request is on behalf of another merchant. (optional, default to 0)
     *
     * @throws \calderaPayQualpayPlatform\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \calderaPayQualpayPlatform\Model\TransactionListResponse
     */
    public function getAllSubscriptionTransactions($count = '10', $order_on = 'tran_time', $order_by = 'desc', $page = '0', $filter = null, $vendor_id = '0')
    {
        list($response) = $this->getAllSubscriptionTransactionsWithHttpInfo($count, $order_on, $order_by, $page, $filter, $vendor_id);
        return $response;
    }

    /**
     * Operation getAllSubscriptionTransactionsWithHttpInfo
     *
     * Get all subscription transactions
     *
     * @param  int $count The number of records in the result. (optional, default to 10)
     * @param  string $order_on The field on which the results will be sorted on. Refer to the response model for available fields. (optional, default to tran_time)
     * @param  string $order_by Ascending or Descending Sort order of the result. (optional, default to desc)
     * @param  int $page Zero-based page number, use this to choose a page when there are more results than the count parameter. (optional, default to 0)
     * @param  string $filter Results can be filtered by custom filter criteria. Refer to [Filter](/developer/api/reference#filters) to use the filter parameter. (optional)
     * @param  int $vendor_id Identifies the vendor to which this request applies. Applicable only if this request is on behalf of another merchant. (optional, default to 0)
     *
     * @throws \calderaPayQualpayPlatform\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \calderaPayQualpayPlatform\Model\TransactionListResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getAllSubscriptionTransactionsWithHttpInfo($count = '10', $order_on = 'tran_time', $order_by = 'desc', $page = '0', $filter = null, $vendor_id = '0')
    {
        $returnType = '\calderaPayQualpayPlatform\Model\TransactionListResponse';
        $request = $this->getAllSubscriptionTransactionsRequest($count, $order_on, $order_by, $page, $filter, $vendor_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\calderaPayQualpayPlatform\Model\TransactionListResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\calderaPayQualpayPlatform\Model\QPApiResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getAllSubscriptionTransactionsAsync
     *
     * Get all subscription transactions
     *
     * @param  int $count The number of records in the result. (optional, default to 10)
     * @param  string $order_on The field on which the results will be sorted on. Refer to the response model for available fields. (optional, default to tran_time)
     * @param  string $order_by Ascending or Descending Sort order of the result. (optional, default to desc)
     * @param  int $page Zero-based page number, use this to choose a page when there are more results than the count parameter. (optional, default to 0)
     * @param  string $filter Results can be filtered by custom filter criteria. Refer to [Filter](/developer/api/reference#filters) to use the filter parameter. (optional)
     * @param  int $vendor_id Identifies the vendor to which this request applies. Applicable only if this request is on behalf of another merchant. (optional, default to 0)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getAllSubscriptionTransactionsAsync($count = '10', $order_on = 'tran_time', $order_by = 'desc', $page = '0', $filter = null, $vendor_id = '0')
    {
        return $this->getAllSubscriptionTransactionsAsyncWithHttpInfo($count, $order_on, $order_by, $page, $filter, $vendor_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getAllSubscriptionTransactionsAsyncWithHttpInfo
     *
     * Get all subscription transactions
     *
     * @param  int $count The number of records in the result. (optional, default to 10)
     * @param  string $order_on The field on which the results will be sorted on. Refer to the response model for available fields. (optional, default to tran_time)
     * @param  string $order_by Ascending or Descending Sort order of the result. (optional, default to desc)
     * @param  int $page Zero-based page number, use this to choose a page when there are more results than the count parameter. (optional, default to 0)
     * @param  string $filter Results can be filtered by custom filter criteria. Refer to [Filter](/developer/api/reference#filters) to use the filter parameter. (optional)
     * @param  int $vendor_id Identifies the vendor to which this request applies. Applicable only if this request is on behalf of another merchant. (optional, default to 0)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getAllSubscriptionTransactionsAsyncWithHttpInfo($count = '10', $order_on = 'tran_time', $order_by = 'desc', $page = '0', $filter = null, $vendor_id = '0')
    {
        $returnType = '\calderaPayQualpayPlatform\Model\TransactionListResponse';
        $request = $this->getAllSubscriptionTransactionsRequest($count, $order_on, $order_by, $page, $filter, $vendor_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getAllSubscriptionTransactions'
     *
     * @param  int $count The number of records in the result. (optional, default to 10)
     * @param  string $order_on The field on which the results will be sorted on. Refer to the response model for available fields. (optional, default to tran_time)
     * @param  string $order_by Ascending or Descending Sort order of the result. (optional, default to desc)
     * @param  int $page Zero-based page number, use this to choose a page when there are more results than the count parameter. (optional, default to 0)
     * @param  string $filter Results can be filtered by custom filter criteria. Refer to [Filter](/developer/api/reference#filters) to use the filter parameter. (optional)
     * @param  int $vendor_id Identifies the vendor to which this request applies. Applicable only if this request is on behalf of another merchant. (optional, default to 0)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getAllSubscriptionTransactionsRequest($count = '10', $order_on = 'tran_time', $order_by = 'desc', $page = '0', $filter = null, $vendor_id = '0')
    {
        if ($count !== null && $count > 100) {
            throw new \InvalidArgumentException('invalid value for "$count" when calling RecurringBillingApi.getAllSubscriptionTransactions, must be smaller than or equal to 100.');
        }
        if ($count !== null && $count < 1) {
            throw new \InvalidArgumentException('invalid value for "$count" when calling RecurringBillingApi.getAllSubscriptionTransactions, must be bigger than or equal to 1.');
        }


        $resourcePath = '/subscription/transactions';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($count !== null) {
            $queryParams['count'] = ObjectSerializer::toQueryValue($count);
        }
        // query params
        if ($order_on !== null) {
            $queryParams['order_on'] = ObjectSerializer::toQueryValue($order_on);
        }
        // query params
        if ($order_by !== null) {
            $queryParams['order_by'] = ObjectSerializer::toQueryValue($order_by);
        }
        // query params
        if ($page !== null) {
            $queryParams['page'] = ObjectSerializer::toQueryValue($page);
        }
        // query params
        if ($filter !== null) {
            $queryParams['filter'] = ObjectSerializer::toQueryValue($filter);
        }
        // query params
        if ($vendor_id !== null) {
            $queryParams['vendor_id'] = ObjectSerializer::toQueryValue($vendor_id);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getPlan
     *
     * Find Recurring Plan by Plan Code
     *
     * @param  string $plan_code Plan Code (required)
     * @param  int $count The number of records in the result. (optional, default to 10)
     * @param  string $order_on The field on which the results will be sorted on. Refer to the response model for available fields. (optional, default to plan_code)
     * @param  string $order_by Ascending or Descending Sort order of the result. (optional, default to asc)
     * @param  int $page Zero-based page number, use this to choose a page when there are more results than the count parameter. (optional, default to 0)
     * @param  string $filter Results can be filtered by custom filter criteria. Refer to [Filter](/developer/api/reference#filters) to use the filter parameter. (optional)
     * @param  int $vendor_id Identifies the vendor to which this request applies. Applicable only if this request is on behalf of another merchant. (optional, default to 0)
     *
     * @throws \calderaPayQualpayPlatform\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \calderaPayQualpayPlatform\Model\RecurringPlanListResponse
     */
    public function getPlan($plan_code, $count = '10', $order_on = 'plan_code', $order_by = 'asc', $page = '0', $filter = null, $vendor_id = '0')
    {
        list($response) = $this->getPlanWithHttpInfo($plan_code, $count, $order_on, $order_by, $page, $filter, $vendor_id);
        return $response;
    }

    /**
     * Operation getPlanWithHttpInfo
     *
     * Find Recurring Plan by Plan Code
     *
     * @param  string $plan_code Plan Code (required)
     * @param  int $count The number of records in the result. (optional, default to 10)
     * @param  string $order_on The field on which the results will be sorted on. Refer to the response model for available fields. (optional, default to plan_code)
     * @param  string $order_by Ascending or Descending Sort order of the result. (optional, default to asc)
     * @param  int $page Zero-based page number, use this to choose a page when there are more results than the count parameter. (optional, default to 0)
     * @param  string $filter Results can be filtered by custom filter criteria. Refer to [Filter](/developer/api/reference#filters) to use the filter parameter. (optional)
     * @param  int $vendor_id Identifies the vendor to which this request applies. Applicable only if this request is on behalf of another merchant. (optional, default to 0)
     *
     * @throws \calderaPayQualpayPlatform\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \calderaPayQualpayPlatform\Model\RecurringPlanListResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getPlanWithHttpInfo($plan_code, $count = '10', $order_on = 'plan_code', $order_by = 'asc', $page = '0', $filter = null, $vendor_id = '0')
    {
        $returnType = '\calderaPayQualpayPlatform\Model\RecurringPlanListResponse';
        $request = $this->getPlanRequest($plan_code, $count, $order_on, $order_by, $page, $filter, $vendor_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\calderaPayQualpayPlatform\Model\RecurringPlanListResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\calderaPayQualpayPlatform\Model\QPApiResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\calderaPayQualpayPlatform\Model\QPApiResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getPlanAsync
     *
     * Find Recurring Plan by Plan Code
     *
     * @param  string $plan_code Plan Code (required)
     * @param  int $count The number of records in the result. (optional, default to 10)
     * @param  string $order_on The field on which the results will be sorted on. Refer to the response model for available fields. (optional, default to plan_code)
     * @param  string $order_by Ascending or Descending Sort order of the result. (optional, default to asc)
     * @param  int $page Zero-based page number, use this to choose a page when there are more results than the count parameter. (optional, default to 0)
     * @param  string $filter Results can be filtered by custom filter criteria. Refer to [Filter](/developer/api/reference#filters) to use the filter parameter. (optional)
     * @param  int $vendor_id Identifies the vendor to which this request applies. Applicable only if this request is on behalf of another merchant. (optional, default to 0)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getPlanAsync($plan_code, $count = '10', $order_on = 'plan_code', $order_by = 'asc', $page = '0', $filter = null, $vendor_id = '0')
    {
        return $this->getPlanAsyncWithHttpInfo($plan_code, $count, $order_on, $order_by, $page, $filter, $vendor_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getPlanAsyncWithHttpInfo
     *
     * Find Recurring Plan by Plan Code
     *
     * @param  string $plan_code Plan Code (required)
     * @param  int $count The number of records in the result. (optional, default to 10)
     * @param  string $order_on The field on which the results will be sorted on. Refer to the response model for available fields. (optional, default to plan_code)
     * @param  string $order_by Ascending or Descending Sort order of the result. (optional, default to asc)
     * @param  int $page Zero-based page number, use this to choose a page when there are more results than the count parameter. (optional, default to 0)
     * @param  string $filter Results can be filtered by custom filter criteria. Refer to [Filter](/developer/api/reference#filters) to use the filter parameter. (optional)
     * @param  int $vendor_id Identifies the vendor to which this request applies. Applicable only if this request is on behalf of another merchant. (optional, default to 0)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getPlanAsyncWithHttpInfo($plan_code, $count = '10', $order_on = 'plan_code', $order_by = 'asc', $page = '0', $filter = null, $vendor_id = '0')
    {
        $returnType = '\calderaPayQualpayPlatform\Model\RecurringPlanListResponse';
        $request = $this->getPlanRequest($plan_code, $count, $order_on, $order_by, $page, $filter, $vendor_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getPlan'
     *
     * @param  string $plan_code Plan Code (required)
     * @param  int $count The number of records in the result. (optional, default to 10)
     * @param  string $order_on The field on which the results will be sorted on. Refer to the response model for available fields. (optional, default to plan_code)
     * @param  string $order_by Ascending or Descending Sort order of the result. (optional, default to asc)
     * @param  int $page Zero-based page number, use this to choose a page when there are more results than the count parameter. (optional, default to 0)
     * @param  string $filter Results can be filtered by custom filter criteria. Refer to [Filter](/developer/api/reference#filters) to use the filter parameter. (optional)
     * @param  int $vendor_id Identifies the vendor to which this request applies. Applicable only if this request is on behalf of another merchant. (optional, default to 0)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getPlanRequest($plan_code, $count = '10', $order_on = 'plan_code', $order_by = 'asc', $page = '0', $filter = null, $vendor_id = '0')
    {
        // verify the required parameter 'plan_code' is set
        if ($plan_code === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $plan_code when calling getPlan'
            );
        }
        if ($count !== null && $count > 100) {
            throw new \InvalidArgumentException('invalid value for "$count" when calling RecurringBillingApi.getPlan, must be smaller than or equal to 100.');
        }
        if ($count !== null && $count < 1) {
            throw new \InvalidArgumentException('invalid value for "$count" when calling RecurringBillingApi.getPlan, must be bigger than or equal to 1.');
        }


        $resourcePath = '/plan/{plan_code}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($count !== null) {
            $queryParams['count'] = ObjectSerializer::toQueryValue($count);
        }
        // query params
        if ($order_on !== null) {
            $queryParams['order_on'] = ObjectSerializer::toQueryValue($order_on);
        }
        // query params
        if ($order_by !== null) {
            $queryParams['order_by'] = ObjectSerializer::toQueryValue($order_by);
        }
        // query params
        if ($page !== null) {
            $queryParams['page'] = ObjectSerializer::toQueryValue($page);
        }
        // query params
        if ($filter !== null) {
            $queryParams['filter'] = ObjectSerializer::toQueryValue($filter);
        }
        // query params
        if ($vendor_id !== null) {
            $queryParams['vendor_id'] = ObjectSerializer::toQueryValue($vendor_id);
        }

        // path params
        if ($plan_code !== null) {
            $resourcePath = str_replace(
                '{' . 'plan_code' . '}',
                ObjectSerializer::toPathValue($plan_code),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getSubscription
     *
     * Get subscription by subscription ID
     *
     * @param  int $subscription_id Subscription ID (required)
     * @param  int $vendor_id Identifies the vendor to which this request applies. Applicable only if this request is on behalf of another merchant. (optional, default to 0)
     *
     * @throws \calderaPayQualpayPlatform\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \calderaPayQualpayPlatform\Model\SubscriptionResponse
     */
    public function getSubscription($subscription_id, $vendor_id = '0')
    {
        list($response) = $this->getSubscriptionWithHttpInfo($subscription_id, $vendor_id);
        return $response;
    }

    /**
     * Operation getSubscriptionWithHttpInfo
     *
     * Get subscription by subscription ID
     *
     * @param  int $subscription_id Subscription ID (required)
     * @param  int $vendor_id Identifies the vendor to which this request applies. Applicable only if this request is on behalf of another merchant. (optional, default to 0)
     *
     * @throws \calderaPayQualpayPlatform\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \calderaPayQualpayPlatform\Model\SubscriptionResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getSubscriptionWithHttpInfo($subscription_id, $vendor_id = '0')
    {
        $returnType = '\calderaPayQualpayPlatform\Model\SubscriptionResponse';
        $request = $this->getSubscriptionRequest($subscription_id, $vendor_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\calderaPayQualpayPlatform\Model\SubscriptionResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\calderaPayQualpayPlatform\Model\QPApiResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\calderaPayQualpayPlatform\Model\QPApiResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getSubscriptionAsync
     *
     * Get subscription by subscription ID
     *
     * @param  int $subscription_id Subscription ID (required)
     * @param  int $vendor_id Identifies the vendor to which this request applies. Applicable only if this request is on behalf of another merchant. (optional, default to 0)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getSubscriptionAsync($subscription_id, $vendor_id = '0')
    {
        return $this->getSubscriptionAsyncWithHttpInfo($subscription_id, $vendor_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getSubscriptionAsyncWithHttpInfo
     *
     * Get subscription by subscription ID
     *
     * @param  int $subscription_id Subscription ID (required)
     * @param  int $vendor_id Identifies the vendor to which this request applies. Applicable only if this request is on behalf of another merchant. (optional, default to 0)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getSubscriptionAsyncWithHttpInfo($subscription_id, $vendor_id = '0')
    {
        $returnType = '\calderaPayQualpayPlatform\Model\SubscriptionResponse';
        $request = $this->getSubscriptionRequest($subscription_id, $vendor_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getSubscription'
     *
     * @param  int $subscription_id Subscription ID (required)
     * @param  int $vendor_id Identifies the vendor to which this request applies. Applicable only if this request is on behalf of another merchant. (optional, default to 0)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getSubscriptionRequest($subscription_id, $vendor_id = '0')
    {
        // verify the required parameter 'subscription_id' is set
        if ($subscription_id === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $subscription_id when calling getSubscription'
            );
        }

        $resourcePath = '/subscription/{subscription_id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($vendor_id !== null) {
            $queryParams['vendor_id'] = ObjectSerializer::toQueryValue($vendor_id);
        }

        // path params
        if ($subscription_id !== null) {
            $resourcePath = str_replace(
                '{' . 'subscription_id' . '}',
                ObjectSerializer::toPathValue($subscription_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getSubscriptionTransactions
     *
     * Get transactions by subscription ID
     *
     * @param  int $subscription_id Subscription ID (required)
     * @param  int $count The number of records in the result. (optional, default to 10)
     * @param  string $order_on The field on which the results will be sorted on. Refer to the response model for available fields. (optional, default to tran_time)
     * @param  string $order_by Ascending or Descending Sort order of the result. (optional, default to desc)
     * @param  int $page Zero-based page number, use this to choose a page when there are more results than the count parameter. (optional, default to 0)
     * @param  string $filter Results can be filtered by custom filter criteria. Refer to [Filter](/developer/api/reference#filters) to use the filter parameter. (optional)
     * @param  int $vendor_id Identifies the vendor to which this request applies. Applicable only if this request is on behalf of another merchant. (optional, default to 0)
     *
     * @throws \calderaPayQualpayPlatform\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \calderaPayQualpayPlatform\Model\TransactionListResponse
     */
    public function getSubscriptionTransactions($subscription_id, $count = '10', $order_on = 'tran_time', $order_by = 'desc', $page = '0', $filter = null, $vendor_id = '0')
    {
        list($response) = $this->getSubscriptionTransactionsWithHttpInfo($subscription_id, $count, $order_on, $order_by, $page, $filter, $vendor_id);
        return $response;
    }

    /**
     * Operation getSubscriptionTransactionsWithHttpInfo
     *
     * Get transactions by subscription ID
     *
     * @param  int $subscription_id Subscription ID (required)
     * @param  int $count The number of records in the result. (optional, default to 10)
     * @param  string $order_on The field on which the results will be sorted on. Refer to the response model for available fields. (optional, default to tran_time)
     * @param  string $order_by Ascending or Descending Sort order of the result. (optional, default to desc)
     * @param  int $page Zero-based page number, use this to choose a page when there are more results than the count parameter. (optional, default to 0)
     * @param  string $filter Results can be filtered by custom filter criteria. Refer to [Filter](/developer/api/reference#filters) to use the filter parameter. (optional)
     * @param  int $vendor_id Identifies the vendor to which this request applies. Applicable only if this request is on behalf of another merchant. (optional, default to 0)
     *
     * @throws \calderaPayQualpayPlatform\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \calderaPayQualpayPlatform\Model\TransactionListResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getSubscriptionTransactionsWithHttpInfo($subscription_id, $count = '10', $order_on = 'tran_time', $order_by = 'desc', $page = '0', $filter = null, $vendor_id = '0')
    {
        $returnType = '\calderaPayQualpayPlatform\Model\TransactionListResponse';
        $request = $this->getSubscriptionTransactionsRequest($subscription_id, $count, $order_on, $order_by, $page, $filter, $vendor_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\calderaPayQualpayPlatform\Model\TransactionListResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\calderaPayQualpayPlatform\Model\QPApiResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getSubscriptionTransactionsAsync
     *
     * Get transactions by subscription ID
     *
     * @param  int $subscription_id Subscription ID (required)
     * @param  int $count The number of records in the result. (optional, default to 10)
     * @param  string $order_on The field on which the results will be sorted on. Refer to the response model for available fields. (optional, default to tran_time)
     * @param  string $order_by Ascending or Descending Sort order of the result. (optional, default to desc)
     * @param  int $page Zero-based page number, use this to choose a page when there are more results than the count parameter. (optional, default to 0)
     * @param  string $filter Results can be filtered by custom filter criteria. Refer to [Filter](/developer/api/reference#filters) to use the filter parameter. (optional)
     * @param  int $vendor_id Identifies the vendor to which this request applies. Applicable only if this request is on behalf of another merchant. (optional, default to 0)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getSubscriptionTransactionsAsync($subscription_id, $count = '10', $order_on = 'tran_time', $order_by = 'desc', $page = '0', $filter = null, $vendor_id = '0')
    {
        return $this->getSubscriptionTransactionsAsyncWithHttpInfo($subscription_id, $count, $order_on, $order_by, $page, $filter, $vendor_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getSubscriptionTransactionsAsyncWithHttpInfo
     *
     * Get transactions by subscription ID
     *
     * @param  int $subscription_id Subscription ID (required)
     * @param  int $count The number of records in the result. (optional, default to 10)
     * @param  string $order_on The field on which the results will be sorted on. Refer to the response model for available fields. (optional, default to tran_time)
     * @param  string $order_by Ascending or Descending Sort order of the result. (optional, default to desc)
     * @param  int $page Zero-based page number, use this to choose a page when there are more results than the count parameter. (optional, default to 0)
     * @param  string $filter Results can be filtered by custom filter criteria. Refer to [Filter](/developer/api/reference#filters) to use the filter parameter. (optional)
     * @param  int $vendor_id Identifies the vendor to which this request applies. Applicable only if this request is on behalf of another merchant. (optional, default to 0)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getSubscriptionTransactionsAsyncWithHttpInfo($subscription_id, $count = '10', $order_on = 'tran_time', $order_by = 'desc', $page = '0', $filter = null, $vendor_id = '0')
    {
        $returnType = '\calderaPayQualpayPlatform\Model\TransactionListResponse';
        $request = $this->getSubscriptionTransactionsRequest($subscription_id, $count, $order_on, $order_by, $page, $filter, $vendor_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getSubscriptionTransactions'
     *
     * @param  int $subscription_id Subscription ID (required)
     * @param  int $count The number of records in the result. (optional, default to 10)
     * @param  string $order_on The field on which the results will be sorted on. Refer to the response model for available fields. (optional, default to tran_time)
     * @param  string $order_by Ascending or Descending Sort order of the result. (optional, default to desc)
     * @param  int $page Zero-based page number, use this to choose a page when there are more results than the count parameter. (optional, default to 0)
     * @param  string $filter Results can be filtered by custom filter criteria. Refer to [Filter](/developer/api/reference#filters) to use the filter parameter. (optional)
     * @param  int $vendor_id Identifies the vendor to which this request applies. Applicable only if this request is on behalf of another merchant. (optional, default to 0)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getSubscriptionTransactionsRequest($subscription_id, $count = '10', $order_on = 'tran_time', $order_by = 'desc', $page = '0', $filter = null, $vendor_id = '0')
    {
        // verify the required parameter 'subscription_id' is set
        if ($subscription_id === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $subscription_id when calling getSubscriptionTransactions'
            );
        }
        if ($count !== null && $count > 100) {
            throw new \InvalidArgumentException('invalid value for "$count" when calling RecurringBillingApi.getSubscriptionTransactions, must be smaller than or equal to 100.');
        }
        if ($count !== null && $count < 1) {
            throw new \InvalidArgumentException('invalid value for "$count" when calling RecurringBillingApi.getSubscriptionTransactions, must be bigger than or equal to 1.');
        }


        $resourcePath = '/subscription/transactions/{subscription_id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($count !== null) {
            $queryParams['count'] = ObjectSerializer::toQueryValue($count);
        }
        // query params
        if ($order_on !== null) {
            $queryParams['order_on'] = ObjectSerializer::toQueryValue($order_on);
        }
        // query params
        if ($order_by !== null) {
            $queryParams['order_by'] = ObjectSerializer::toQueryValue($order_by);
        }
        // query params
        if ($page !== null) {
            $queryParams['page'] = ObjectSerializer::toQueryValue($page);
        }
        // query params
        if ($filter !== null) {
            $queryParams['filter'] = ObjectSerializer::toQueryValue($filter);
        }
        // query params
        if ($vendor_id !== null) {
            $queryParams['vendor_id'] = ObjectSerializer::toQueryValue($vendor_id);
        }

        // path params
        if ($subscription_id !== null) {
            $resourcePath = str_replace(
                '{' . 'subscription_id' . '}',
                ObjectSerializer::toPathValue($subscription_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation pauseSubscription
     *
     * Pause a subscription
     *
     * @param  int $subscription_id subscription_id (required)
     * @param  \calderaPayQualpayPlatform\Model\SubscriptionRequest $body Customer ID (required)
     *
     * @throws \calderaPayQualpayPlatform\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \calderaPayQualpayPlatform\Model\SubscriptionResponse
     */
    public function pauseSubscription($subscription_id, $body)
    {
        list($response) = $this->pauseSubscriptionWithHttpInfo($subscription_id, $body);
        return $response;
    }

    /**
     * Operation pauseSubscriptionWithHttpInfo
     *
     * Pause a subscription
     *
     * @param  int $subscription_id (required)
     * @param  \calderaPayQualpayPlatform\Model\SubscriptionRequest $body Customer ID (required)
     *
     * @throws \calderaPayQualpayPlatform\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \calderaPayQualpayPlatform\Model\SubscriptionResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function pauseSubscriptionWithHttpInfo($subscription_id, $body)
    {
        $returnType = '\calderaPayQualpayPlatform\Model\SubscriptionResponse';
        $request = $this->pauseSubscriptionRequest($subscription_id, $body);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\calderaPayQualpayPlatform\Model\SubscriptionResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\calderaPayQualpayPlatform\Model\QPApiResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\calderaPayQualpayPlatform\Model\QPApiResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation pauseSubscriptionAsync
     *
     * Pause a subscription
     *
     * @param  int $subscription_id (required)
     * @param  \calderaPayQualpayPlatform\Model\SubscriptionRequest $body Customer ID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function pauseSubscriptionAsync($subscription_id, $body)
    {
        return $this->pauseSubscriptionAsyncWithHttpInfo($subscription_id, $body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation pauseSubscriptionAsyncWithHttpInfo
     *
     * Pause a subscription
     *
     * @param  int $subscription_id (required)
     * @param  \calderaPayQualpayPlatform\Model\SubscriptionRequest $body Customer ID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function pauseSubscriptionAsyncWithHttpInfo($subscription_id, $body)
    {
        $returnType = '\calderaPayQualpayPlatform\Model\SubscriptionResponse';
        $request = $this->pauseSubscriptionRequest($subscription_id, $body);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'pauseSubscription'
     *
     * @param  int $subscription_id (required)
     * @param  \calderaPayQualpayPlatform\Model\SubscriptionRequest $body Customer ID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function pauseSubscriptionRequest($subscription_id, $body)
    {
        // verify the required parameter 'subscription_id' is set
        if ($subscription_id === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $subscription_id when calling pauseSubscription'
            );
        }
        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling pauseSubscription'
            );
        }

        $resourcePath = '/subscription/{subscription_id}/pause';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($subscription_id !== null) {
            $resourcePath = str_replace(
                '{' . 'subscription_id' . '}',
                ObjectSerializer::toPathValue($subscription_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation resumeSubscription
     *
     * Resume a subscription
     *
     * @param  int $subscription_id subscription_id (required)
     * @param  \calderaPayQualpayPlatform\Model\SubscriptionRequest $body Customer ID (required)
     *
     * @throws \calderaPayQualpayPlatform\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \calderaPayQualpayPlatform\Model\SubscriptionResponse
     */
    public function resumeSubscription($subscription_id, $body)
    {
        list($response) = $this->resumeSubscriptionWithHttpInfo($subscription_id, $body);
        return $response;
    }

    /**
     * Operation resumeSubscriptionWithHttpInfo
     *
     * Resume a subscription
     *
     * @param  int $subscription_id (required)
     * @param  \calderaPayQualpayPlatform\Model\SubscriptionRequest $body Customer ID (required)
     *
     * @throws \calderaPayQualpayPlatform\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \calderaPayQualpayPlatform\Model\SubscriptionResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function resumeSubscriptionWithHttpInfo($subscription_id, $body)
    {
        $returnType = '\calderaPayQualpayPlatform\Model\SubscriptionResponse';
        $request = $this->resumeSubscriptionRequest($subscription_id, $body);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\calderaPayQualpayPlatform\Model\SubscriptionResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\calderaPayQualpayPlatform\Model\QPApiResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\calderaPayQualpayPlatform\Model\QPApiResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation resumeSubscriptionAsync
     *
     * Resume a subscription
     *
     * @param  int $subscription_id (required)
     * @param  \calderaPayQualpayPlatform\Model\SubscriptionRequest $body Customer ID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function resumeSubscriptionAsync($subscription_id, $body)
    {
        return $this->resumeSubscriptionAsyncWithHttpInfo($subscription_id, $body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation resumeSubscriptionAsyncWithHttpInfo
     *
     * Resume a subscription
     *
     * @param  int $subscription_id (required)
     * @param  \calderaPayQualpayPlatform\Model\SubscriptionRequest $body Customer ID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function resumeSubscriptionAsyncWithHttpInfo($subscription_id, $body)
    {
        $returnType = '\calderaPayQualpayPlatform\Model\SubscriptionResponse';
        $request = $this->resumeSubscriptionRequest($subscription_id, $body);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'resumeSubscription'
     *
     * @param  int $subscription_id (required)
     * @param  \calderaPayQualpayPlatform\Model\SubscriptionRequest $body Customer ID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function resumeSubscriptionRequest($subscription_id, $body)
    {
        // verify the required parameter 'subscription_id' is set
        if ($subscription_id === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $subscription_id when calling resumeSubscription'
            );
        }
        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling resumeSubscription'
            );
        }

        $resourcePath = '/subscription/{subscription_id}/resume';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($subscription_id !== null) {
            $resourcePath = str_replace(
                '{' . 'subscription_id' . '}',
                ObjectSerializer::toPathValue($subscription_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updatePlan
     *
     * Update a Recurring Plan
     *
     * @param  string $plan_code Plan Code of the plan that will be updated (required)
     * @param  \calderaPayQualpayPlatform\Model\RecurringPlan $body Recurring Plan Object. Send only the fields that require an update. Read only fields will be ignored (required)
     *
     * @throws \calderaPayQualpayPlatform\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \calderaPayQualpayPlatform\Model\RecurringPlanResponse
     */
    public function updatePlan($plan_code, $body)
    {
        list($response) = $this->updatePlanWithHttpInfo($plan_code, $body);
        return $response;
    }

    /**
     * Operation updatePlanWithHttpInfo
     *
     * Update a Recurring Plan
     *
     * @param  string $plan_code Plan Code of the plan that will be updated (required)
     * @param  \calderaPayQualpayPlatform\Model\RecurringPlan $body Recurring Plan Object. Send only the fields that require an update. Read only fields will be ignored (required)
     *
     * @throws \calderaPayQualpayPlatform\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \calderaPayQualpayPlatform\Model\RecurringPlanResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function updatePlanWithHttpInfo($plan_code, $body)
    {
        $returnType = '\calderaPayQualpayPlatform\Model\RecurringPlanResponse';
        $request = $this->updatePlanRequest($plan_code, $body);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\calderaPayQualpayPlatform\Model\RecurringPlanResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\calderaPayQualpayPlatform\Model\QPApiResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\calderaPayQualpayPlatform\Model\QPApiResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation updatePlanAsync
     *
     * Update a Recurring Plan
     *
     * @param  string $plan_code Plan Code of the plan that will be updated (required)
     * @param  \calderaPayQualpayPlatform\Model\RecurringPlan $body Recurring Plan Object. Send only the fields that require an update. Read only fields will be ignored (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updatePlanAsync($plan_code, $body)
    {
        return $this->updatePlanAsyncWithHttpInfo($plan_code, $body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation updatePlanAsyncWithHttpInfo
     *
     * Update a Recurring Plan
     *
     * @param  string $plan_code Plan Code of the plan that will be updated (required)
     * @param  \calderaPayQualpayPlatform\Model\RecurringPlan $body Recurring Plan Object. Send only the fields that require an update. Read only fields will be ignored (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updatePlanAsyncWithHttpInfo($plan_code, $body)
    {
        $returnType = '\calderaPayQualpayPlatform\Model\RecurringPlanResponse';
        $request = $this->updatePlanRequest($plan_code, $body);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'updatePlan'
     *
     * @param  string $plan_code Plan Code of the plan that will be updated (required)
     * @param  \calderaPayQualpayPlatform\Model\RecurringPlan $body Recurring Plan Object. Send only the fields that require an update. Read only fields will be ignored (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function updatePlanRequest($plan_code, $body)
    {
        // verify the required parameter 'plan_code' is set
        if ($plan_code === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $plan_code when calling updatePlan'
            );
        }
        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling updatePlan'
            );
        }

        $resourcePath = '/plan/{plan_code}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($plan_code !== null) {
            $resourcePath = str_replace(
                '{' . 'plan_code' . '}',
                ObjectSerializer::toPathValue($plan_code),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updateSubscription
     *
     * Update a subscription
     *
     * @param  int $subscription_id subscription_id (required)
     * @param  \calderaPayQualpayPlatform\Model\SubscriptionRequest $body Subscription Request (required)
     *
     * @throws \calderaPayQualpayPlatform\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \calderaPayQualpayPlatform\Model\SubscriptionResponse
     */
    public function updateSubscription($subscription_id, $body)
    {
        list($response) = $this->updateSubscriptionWithHttpInfo($subscription_id, $body);
        return $response;
    }

    /**
     * Operation updateSubscriptionWithHttpInfo
     *
     * Update a subscription
     *
     * @param  int $subscription_id (required)
     * @param  \calderaPayQualpayPlatform\Model\SubscriptionRequest $body Subscription Request (required)
     *
     * @throws \calderaPayQualpayPlatform\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \calderaPayQualpayPlatform\Model\SubscriptionResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateSubscriptionWithHttpInfo($subscription_id, $body)
    {
        $returnType = '\calderaPayQualpayPlatform\Model\SubscriptionResponse';
        $request = $this->updateSubscriptionRequest($subscription_id, $body);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\calderaPayQualpayPlatform\Model\SubscriptionResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\calderaPayQualpayPlatform\Model\QPApiResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\calderaPayQualpayPlatform\Model\QPApiResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation updateSubscriptionAsync
     *
     * Update a subscription
     *
     * @param  int $subscription_id (required)
     * @param  \calderaPayQualpayPlatform\Model\SubscriptionRequest $body Subscription Request (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateSubscriptionAsync($subscription_id, $body)
    {
        return $this->updateSubscriptionAsyncWithHttpInfo($subscription_id, $body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation updateSubscriptionAsyncWithHttpInfo
     *
     * Update a subscription
     *
     * @param  int $subscription_id (required)
     * @param  \calderaPayQualpayPlatform\Model\SubscriptionRequest $body Subscription Request (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateSubscriptionAsyncWithHttpInfo($subscription_id, $body)
    {
        $returnType = '\calderaPayQualpayPlatform\Model\SubscriptionResponse';
        $request = $this->updateSubscriptionRequest($subscription_id, $body);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'updateSubscription'
     *
     * @param  int $subscription_id (required)
     * @param  \calderaPayQualpayPlatform\Model\SubscriptionRequest $body Subscription Request (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function updateSubscriptionRequest($subscription_id, $body)
    {
        // verify the required parameter 'subscription_id' is set
        if ($subscription_id === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $subscription_id when calling updateSubscription'
            );
        }
        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling updateSubscription'
            );
        }

        $resourcePath = '/subscription/{subscription_id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($subscription_id !== null) {
            $resourcePath = str_replace(
                '{' . 'subscription_id' . '}',
                ObjectSerializer::toPathValue($subscription_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
