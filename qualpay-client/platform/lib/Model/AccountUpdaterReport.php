<?php
/**
 * AccountUpdaterReport
 *
 * PHP version 5
 *
 * @category Class
 * @package  calderaPayQualpayPlatform
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Qualpay Platform API
 *
 * This document describes the Qualpay Platform API.
 *
 * OpenAPI spec version: 1.1.9
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.3.1
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace calderaPayQualpayPlatform\Model;

use \ArrayAccess;
use \calderaPayQualpayPlatform\ObjectSerializer;

/**
 * AccountUpdaterReport Class Doc Comment
 *
 * @category Class
 * @package  calderaPayQualpayPlatform
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class AccountUpdaterReport implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'AccountUpdaterReport';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'merchant_id' => 'int',
        'request_id' => 'int',
        'request_date' => 'string',
        'response_date' => 'string',
        'card_id' => 'string',
        'card_number' => 'string',
        'exp_date' => 'string',
        'card_number_new' => 'string',
        'exp_date_new' => 'string',
        'reason_code' => 'string',
        'billable' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'merchant_id' => 'int64',
        'request_id' => 'int64',
        'request_date' => null,
        'response_date' => null,
        'card_id' => null,
        'card_number' => null,
        'exp_date' => null,
        'card_number_new' => null,
        'exp_date_new' => null,
        'reason_code' => null,
        'billable' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'merchant_id' => 'merchant_id',
        'request_id' => 'request_id',
        'request_date' => 'request_date',
        'response_date' => 'response_date',
        'card_id' => 'card_id',
        'card_number' => 'card_number',
        'exp_date' => 'exp_date',
        'card_number_new' => 'card_number_new',
        'exp_date_new' => 'exp_date_new',
        'reason_code' => 'reason_code',
        'billable' => 'billable'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'merchant_id' => 'setMerchantId',
        'request_id' => 'setRequestId',
        'request_date' => 'setRequestDate',
        'response_date' => 'setResponseDate',
        'card_id' => 'setCardId',
        'card_number' => 'setCardNumber',
        'exp_date' => 'setExpDate',
        'card_number_new' => 'setCardNumberNew',
        'exp_date_new' => 'setExpDateNew',
        'reason_code' => 'setReasonCode',
        'billable' => 'setBillable'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'merchant_id' => 'getMerchantId',
        'request_id' => 'getRequestId',
        'request_date' => 'getRequestDate',
        'response_date' => 'getResponseDate',
        'card_id' => 'getCardId',
        'card_number' => 'getCardNumber',
        'exp_date' => 'getExpDate',
        'card_number_new' => 'getCardNumberNew',
        'exp_date_new' => 'getExpDateNew',
        'reason_code' => 'getReasonCode',
        'billable' => 'getBillable'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const REASON_CODE__000 = '000';
    const REASON_CODE__200 = '200';
    const REASON_CODE__201 = '201';
    const REASON_CODE__202 = '202';
    const REASON_CODE__203 = '203';
    const REASON_CODE__204 = '204';
    const REASON_CODE__206 = '206';
    const REASON_CODE__315 = '315';
    const REASON_CODE__320 = '320';
    const REASON_CODE__329 = '329';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getReasonCodeAllowableValues()
    {
        return [
            self::REASON_CODE__000,
            self::REASON_CODE__200,
            self::REASON_CODE__201,
            self::REASON_CODE__202,
            self::REASON_CODE__203,
            self::REASON_CODE__204,
            self::REASON_CODE__206,
            self::REASON_CODE__315,
            self::REASON_CODE__320,
            self::REASON_CODE__329,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['merchant_id'] = isset($data['merchant_id']) ? $data['merchant_id'] : null;
        $this->container['request_id'] = isset($data['request_id']) ? $data['request_id'] : null;
        $this->container['request_date'] = isset($data['request_date']) ? $data['request_date'] : null;
        $this->container['response_date'] = isset($data['response_date']) ? $data['response_date'] : null;
        $this->container['card_id'] = isset($data['card_id']) ? $data['card_id'] : null;
        $this->container['card_number'] = isset($data['card_number']) ? $data['card_number'] : null;
        $this->container['exp_date'] = isset($data['exp_date']) ? $data['exp_date'] : null;
        $this->container['card_number_new'] = isset($data['card_number_new']) ? $data['card_number_new'] : null;
        $this->container['exp_date_new'] = isset($data['exp_date_new']) ? $data['exp_date_new'] : null;
        $this->container['reason_code'] = isset($data['reason_code']) ? $data['reason_code'] : null;
        $this->container['billable'] = isset($data['billable']) ? $data['billable'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getReasonCodeAllowableValues();
        if (!in_array($this->container['reason_code'], $allowedValues)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'reason_code', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        $allowedValues = $this->getReasonCodeAllowableValues();
        if (!in_array($this->container['reason_code'], $allowedValues)) {
            return false;
        }
        return true;
    }


    /**
     * Gets merchant_id
     *
     * @return int
     */
    public function getMerchantId()
    {
        return $this->container['merchant_id'];
    }

    /**
     * Sets merchant_id
     *
     * @param int $merchant_id Unique ID assigned by Qualpay to a Merchant.
     *
     * @return $this
     */
    public function setMerchantId($merchant_id)
    {
        $this->container['merchant_id'] = $merchant_id;

        return $this;
    }

    /**
     * Gets request_id
     *
     * @return int
     */
    public function getRequestId()
    {
        return $this->container['request_id'];
    }

    /**
     * Sets request_id
     *
     * @param int $request_id Unique ID assigned by Qualpay to the account updater request.
     *
     * @return $this
     */
    public function setRequestId($request_id)
    {
        $this->container['request_id'] = $request_id;

        return $this;
    }

    /**
     * Gets request_date
     *
     * @return string
     */
    public function getRequestDate()
    {
        return $this->container['request_date'];
    }

    /**
     * Sets request_date
     *
     * @param string $request_date Account updater request date in YYYY-MM-DD format. Date when a harvest request was sent to the account updater service.
     *
     * @return $this
     */
    public function setRequestDate($request_date)
    {
        $this->container['request_date'] = $request_date;

        return $this;
    }

    /**
     * Gets response_date
     *
     * @return string
     */
    public function getResponseDate()
    {
        return $this->container['response_date'];
    }

    /**
     * Sets response_date
     *
     * @param string $response_date Account updater response date in YYYY-MM-DD format. Date when the account updater service responded. This field is empty if the response is not yet received.
     *
     * @return $this
     */
    public function setResponseDate($response_date)
    {
        $this->container['response_date'] = $response_date;

        return $this;
    }

    /**
     * Gets card_id
     *
     * @return string
     */
    public function getCardId()
    {
        return $this->container['card_id'];
    }

    /**
     * Sets card_id
     *
     * @param string $card_id Card ID received from a tokenization request for a card. The card_id may be used in place of a card number in messages requiring cardholder account data.
     *
     * @return $this
     */
    public function setCardId($card_id)
    {
        $this->container['card_id'] = $card_id;

        return $this;
    }

    /**
     * Gets card_number
     *
     * @return string
     */
    public function getCardNumber()
    {
        return $this->container['card_number'];
    }

    /**
     * Sets card_number
     *
     * @param string $card_number Cardholder card number(masked).
     *
     * @return $this
     */
    public function setCardNumber($card_number)
    {
        $this->container['card_number'] = $card_number;

        return $this;
    }

    /**
     * Gets exp_date
     *
     * @return string
     */
    public function getExpDate()
    {
        return $this->container['exp_date'];
    }

    /**
     * Sets exp_date
     *
     * @param string $exp_date Card Expiration Date in MMYY format.
     *
     * @return $this
     */
    public function setExpDate($exp_date)
    {
        $this->container['exp_date'] = $exp_date;

        return $this;
    }

    /**
     * Gets card_number_new
     *
     * @return string
     */
    public function getCardNumberNew()
    {
        return $this->container['card_number_new'];
    }

    /**
     * Sets card_number_new
     *
     * @param string $card_number_new Updated cardholder card number(masked). This field will be empty if there are no updates to the card number.
     *
     * @return $this
     */
    public function setCardNumberNew($card_number_new)
    {
        $this->container['card_number_new'] = $card_number_new;

        return $this;
    }

    /**
     * Gets exp_date_new
     *
     * @return string
     */
    public function getExpDateNew()
    {
        return $this->container['exp_date_new'];
    }

    /**
     * Sets exp_date_new
     *
     * @param string $exp_date_new Updated card expiration date in MMYY format. This field will be empty if there are no updates to the expiration date.
     *
     * @return $this
     */
    public function setExpDateNew($exp_date_new)
    {
        $this->container['exp_date_new'] = $exp_date_new;

        return $this;
    }

    /**
     * Gets reason_code
     *
     * @return string
     */
    public function getReasonCode()
    {
        return $this->container['reason_code'];
    }

    /**
     * Sets reason_code
     *
     * @param string $reason_code Account updater reason code.  Account updater reason code. Following are descriptions of the codes              <ul>              <li>000 - New Card/No response</li>              <li>200 - Valid account no update</li>              <li>201 - Account Expiration Date Updated</li>              <li>202 - Account Number Updated</li>              <li>203 - Account is Closed</li>              <li>204 - Contact Cardholder</li>              <li>206 - No Match</li>              <li>315 - Invalid Expiration Date</li>              <li>320 - Invalid Account Number</li>              <li>329 - Invalid Card Type</li>              </ul>
     *
     * @return $this
     */
    public function setReasonCode($reason_code)
    {
        $allowedValues = $this->getReasonCodeAllowableValues();
        if (!is_null($reason_code) && !in_array($reason_code, $allowedValues)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'reason_code', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['reason_code'] = $reason_code;

        return $this;
    }

    /**
     * Gets billable
     *
     * @return bool
     */
    public function getBillable()
    {
        return $this->container['billable'];
    }

    /**
     * Sets billable
     *
     * @param bool $billable Merchants will be billed only for matches. Reason codes 201, 202, 203 and 204 are billable.
     *
     * @return $this
     */
    public function setBillable($billable)
    {
        $this->container['billable'] = $billable;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


