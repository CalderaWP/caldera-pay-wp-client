<?php
/**
 * BatchReport
 *
 * PHP version 5
 *
 * @category Class
 * @package  calderaPayQualpayPlatform
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Qualpay Platform API
 *
 * This document describes the Qualpay Platform API.
 *
 * OpenAPI spec version: 1.1.9
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.3.1
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace calderaPayQualpayPlatform\Model;

use \ArrayAccess;
use \calderaPayQualpayPlatform\ObjectSerializer;

/**
 * BatchReport Class Doc Comment
 *
 * @category Class
 * @package  calderaPayQualpayPlatform
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class BatchReport implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'BatchReport';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'batch_id' => 'int',
        'merchant_id' => 'int',
        'tran_currency' => 'string',
        'batch_number' => 'int',
        'batch_date' => 'string',
        'amt_total' => 'string',
        'cnt_total' => 'string',
        'amt_purch' => 'string',
        'cnt_purch' => 'string',
        'amt_return' => 'string',
        'cnt_return' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'batch_id' => 'int64',
        'merchant_id' => 'int64',
        'tran_currency' => null,
        'batch_number' => 'int64',
        'batch_date' => null,
        'amt_total' => null,
        'cnt_total' => null,
        'amt_purch' => null,
        'cnt_purch' => null,
        'amt_return' => null,
        'cnt_return' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'batch_id' => 'batch_id',
        'merchant_id' => 'merchant_id',
        'tran_currency' => 'tran_currency',
        'batch_number' => 'batch_number',
        'batch_date' => 'batch_date',
        'amt_total' => 'amt_total',
        'cnt_total' => 'cnt_total',
        'amt_purch' => 'amt_purch',
        'cnt_purch' => 'cnt_purch',
        'amt_return' => 'amt_return',
        'cnt_return' => 'cnt_return'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'batch_id' => 'setBatchId',
        'merchant_id' => 'setMerchantId',
        'tran_currency' => 'setTranCurrency',
        'batch_number' => 'setBatchNumber',
        'batch_date' => 'setBatchDate',
        'amt_total' => 'setAmtTotal',
        'cnt_total' => 'setCntTotal',
        'amt_purch' => 'setAmtPurch',
        'cnt_purch' => 'setCntPurch',
        'amt_return' => 'setAmtReturn',
        'cnt_return' => 'setCntReturn'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'batch_id' => 'getBatchId',
        'merchant_id' => 'getMerchantId',
        'tran_currency' => 'getTranCurrency',
        'batch_number' => 'getBatchNumber',
        'batch_date' => 'getBatchDate',
        'amt_total' => 'getAmtTotal',
        'cnt_total' => 'getCntTotal',
        'amt_purch' => 'getAmtPurch',
        'cnt_purch' => 'getCntPurch',
        'amt_return' => 'getAmtReturn',
        'cnt_return' => 'getCntReturn'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['batch_id'] = isset($data['batch_id']) ? $data['batch_id'] : null;
        $this->container['merchant_id'] = isset($data['merchant_id']) ? $data['merchant_id'] : null;
        $this->container['tran_currency'] = isset($data['tran_currency']) ? $data['tran_currency'] : null;
        $this->container['batch_number'] = isset($data['batch_number']) ? $data['batch_number'] : null;
        $this->container['batch_date'] = isset($data['batch_date']) ? $data['batch_date'] : null;
        $this->container['amt_total'] = isset($data['amt_total']) ? $data['amt_total'] : null;
        $this->container['cnt_total'] = isset($data['cnt_total']) ? $data['cnt_total'] : null;
        $this->container['amt_purch'] = isset($data['amt_purch']) ? $data['amt_purch'] : null;
        $this->container['cnt_purch'] = isset($data['cnt_purch']) ? $data['cnt_purch'] : null;
        $this->container['amt_return'] = isset($data['amt_return']) ? $data['amt_return'] : null;
        $this->container['cnt_return'] = isset($data['cnt_return']) ? $data['cnt_return'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['batch_id'] === null) {
            $invalidProperties[] = "'batch_id' can't be null";
        }
        if ($this->container['merchant_id'] === null) {
            $invalidProperties[] = "'merchant_id' can't be null";
        }
        if ($this->container['tran_currency'] === null) {
            $invalidProperties[] = "'tran_currency' can't be null";
        }
        if ($this->container['batch_number'] === null) {
            $invalidProperties[] = "'batch_number' can't be null";
        }
        if ($this->container['batch_date'] === null) {
            $invalidProperties[] = "'batch_date' can't be null";
        }
        if ($this->container['amt_total'] === null) {
            $invalidProperties[] = "'amt_total' can't be null";
        }
        if ($this->container['cnt_total'] === null) {
            $invalidProperties[] = "'cnt_total' can't be null";
        }
        if ($this->container['amt_purch'] === null) {
            $invalidProperties[] = "'amt_purch' can't be null";
        }
        if ($this->container['cnt_purch'] === null) {
            $invalidProperties[] = "'cnt_purch' can't be null";
        }
        if ($this->container['amt_return'] === null) {
            $invalidProperties[] = "'amt_return' can't be null";
        }
        if ($this->container['cnt_return'] === null) {
            $invalidProperties[] = "'cnt_return' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        if ($this->container['batch_id'] === null) {
            return false;
        }
        if ($this->container['merchant_id'] === null) {
            return false;
        }
        if ($this->container['tran_currency'] === null) {
            return false;
        }
        if ($this->container['batch_number'] === null) {
            return false;
        }
        if ($this->container['batch_date'] === null) {
            return false;
        }
        if ($this->container['amt_total'] === null) {
            return false;
        }
        if ($this->container['cnt_total'] === null) {
            return false;
        }
        if ($this->container['amt_purch'] === null) {
            return false;
        }
        if ($this->container['cnt_purch'] === null) {
            return false;
        }
        if ($this->container['amt_return'] === null) {
            return false;
        }
        if ($this->container['cnt_return'] === null) {
            return false;
        }
        return true;
    }


    /**
     * Gets batch_id
     *
     * @return int
     */
    public function getBatchId()
    {
        return $this->container['batch_id'];
    }

    /**
     * Sets batch_id
     *
     * @param int $batch_id Unique ID assigned by Qualpay to this batch.
     *
     * @return $this
     */
    public function setBatchId($batch_id)
    {
        $this->container['batch_id'] = $batch_id;

        return $this;
    }

    /**
     * Gets merchant_id
     *
     * @return int
     */
    public function getMerchantId()
    {
        return $this->container['merchant_id'];
    }

    /**
     * Sets merchant_id
     *
     * @param int $merchant_id Unique ID assigned by Qualpay to a Merchant.
     *
     * @return $this
     */
    public function setMerchantId($merchant_id)
    {
        $this->container['merchant_id'] = $merchant_id;

        return $this;
    }

    /**
     * Gets tran_currency
     *
     * @return string
     */
    public function getTranCurrency()
    {
        return $this->container['tran_currency'];
    }

    /**
     * Sets tran_currency
     *
     * @param string $tran_currency The ISO 4217 numeric currency code of the batch.
     *
     * @return $this
     */
    public function setTranCurrency($tran_currency)
    {
        $this->container['tran_currency'] = $tran_currency;

        return $this;
    }

    /**
     * Gets batch_number
     *
     * @return int
     */
    public function getBatchNumber()
    {
        return $this->container['batch_number'];
    }

    /**
     * Sets batch_number
     *
     * @param int $batch_number A non-unique ID assigned by the merchant's terminal, POS device, or gateway for this batch, in the range of 1 - 999.
     *
     * @return $this
     */
    public function setBatchNumber($batch_number)
    {
        $this->container['batch_number'] = $batch_number;

        return $this;
    }

    /**
     * Gets batch_date
     *
     * @return string
     */
    public function getBatchDate()
    {
        return $this->container['batch_date'];
    }

    /**
     * Sets batch_date
     *
     * @param string $batch_date The date the batch was settled to Qualpay.
     *
     * @return $this
     */
    public function setBatchDate($batch_date)
    {
        $this->container['batch_date'] = $batch_date;

        return $this;
    }

    /**
     * Gets amt_total
     *
     * @return string
     */
    public function getAmtTotal()
    {
        return $this->container['amt_total'];
    }

    /**
     * Sets amt_total
     *
     * @param string $amt_total The total, or net amount of the batch, in the batches currency.
     *
     * @return $this
     */
    public function setAmtTotal($amt_total)
    {
        $this->container['amt_total'] = $amt_total;

        return $this;
    }

    /**
     * Gets cnt_total
     *
     * @return string
     */
    public function getCntTotal()
    {
        return $this->container['cnt_total'];
    }

    /**
     * Sets cnt_total
     *
     * @param string $cnt_total The count of transactions in the batch, including purchases and credits.
     *
     * @return $this
     */
    public function setCntTotal($cnt_total)
    {
        $this->container['cnt_total'] = $cnt_total;

        return $this;
    }

    /**
     * Gets amt_purch
     *
     * @return string
     */
    public function getAmtPurch()
    {
        return $this->container['amt_purch'];
    }

    /**
     * Sets amt_purch
     *
     * @param string $amt_purch The amount of purchases within the batch, in the batches currency.
     *
     * @return $this
     */
    public function setAmtPurch($amt_purch)
    {
        $this->container['amt_purch'] = $amt_purch;

        return $this;
    }

    /**
     * Gets cnt_purch
     *
     * @return string
     */
    public function getCntPurch()
    {
        return $this->container['cnt_purch'];
    }

    /**
     * Sets cnt_purch
     *
     * @param string $cnt_purch The count of purchases in the batch.
     *
     * @return $this
     */
    public function setCntPurch($cnt_purch)
    {
        $this->container['cnt_purch'] = $cnt_purch;

        return $this;
    }

    /**
     * Gets amt_return
     *
     * @return string
     */
    public function getAmtReturn()
    {
        return $this->container['amt_return'];
    }

    /**
     * Sets amt_return
     *
     * @param string $amt_return The amount of returns, or credits back to the customer, in the batches currency.
     *
     * @return $this
     */
    public function setAmtReturn($amt_return)
    {
        $this->container['amt_return'] = $amt_return;

        return $this;
    }

    /**
     * Gets cnt_return
     *
     * @return string
     */
    public function getCntReturn()
    {
        return $this->container['cnt_return'];
    }

    /**
     * Sets cnt_return
     *
     * @param string $cnt_return The count of returns or credits back to the customer in the batch.
     *
     * @return $this
     */
    public function setCntReturn($cnt_return)
    {
        $this->container['cnt_return'] = $cnt_return;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


