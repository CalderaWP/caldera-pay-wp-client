<?php
/**
 * BillingCard
 *
 * PHP version 5
 *
 * @category Class
 * @package  calderaPayQualpayPlatform
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Qualpay Platform API
 *
 * This document describes the Qualpay Platform API.
 *
 * OpenAPI spec version: 1.1.9
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.3.1
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace calderaPayQualpayPlatform\Model;

use \ArrayAccess;
use \calderaPayQualpayPlatform\ObjectSerializer;

/**
 * BillingCard Class Doc Comment
 *
 * @category Class
 * @package  calderaPayQualpayPlatform
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class BillingCard implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'BillingCard';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'card_number' => 'string',
        'exp_date' => 'string',
        'cvv2' => 'string',
        'card_id' => 'string',
        'billing_first_name' => 'string',
        'billing_last_name' => 'string',
        'billing_firm_name' => 'string',
        'billing_addr1' => 'string',
        'billing_city' => 'string',
        'billing_state' => 'string',
        'billing_zip' => 'string',
        'billing_zip4' => 'string',
        'billing_country' => 'string',
        'billing_country_code' => 'string',
        'card_type' => 'string',
        'verify' => 'bool',
        'verified_date' => 'string',
        'primary' => 'bool',
        'vendor_id' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'card_number' => null,
        'exp_date' => null,
        'cvv2' => null,
        'card_id' => null,
        'billing_first_name' => null,
        'billing_last_name' => null,
        'billing_firm_name' => null,
        'billing_addr1' => null,
        'billing_city' => null,
        'billing_state' => null,
        'billing_zip' => null,
        'billing_zip4' => null,
        'billing_country' => null,
        'billing_country_code' => null,
        'card_type' => null,
        'verify' => null,
        'verified_date' => null,
        'primary' => null,
        'vendor_id' => 'int64'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'card_number' => 'card_number',
        'exp_date' => 'exp_date',
        'cvv2' => 'cvv2',
        'card_id' => 'card_id',
        'billing_first_name' => 'billing_first_name',
        'billing_last_name' => 'billing_last_name',
        'billing_firm_name' => 'billing_firm_name',
        'billing_addr1' => 'billing_addr1',
        'billing_city' => 'billing_city',
        'billing_state' => 'billing_state',
        'billing_zip' => 'billing_zip',
        'billing_zip4' => 'billing_zip4',
        'billing_country' => 'billing_country',
        'billing_country_code' => 'billing_country_code',
        'card_type' => 'card_type',
        'verify' => 'verify',
        'verified_date' => 'verified_date',
        'primary' => 'primary',
        'vendor_id' => 'vendor_id'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'card_number' => 'setCardNumber',
        'exp_date' => 'setExpDate',
        'cvv2' => 'setCvv2',
        'card_id' => 'setCardId',
        'billing_first_name' => 'setBillingFirstName',
        'billing_last_name' => 'setBillingLastName',
        'billing_firm_name' => 'setBillingFirmName',
        'billing_addr1' => 'setBillingAddr1',
        'billing_city' => 'setBillingCity',
        'billing_state' => 'setBillingState',
        'billing_zip' => 'setBillingZip',
        'billing_zip4' => 'setBillingZip4',
        'billing_country' => 'setBillingCountry',
        'billing_country_code' => 'setBillingCountryCode',
        'card_type' => 'setCardType',
        'verify' => 'setVerify',
        'verified_date' => 'setVerifiedDate',
        'primary' => 'setPrimary',
        'vendor_id' => 'setVendorId'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'card_number' => 'getCardNumber',
        'exp_date' => 'getExpDate',
        'cvv2' => 'getCvv2',
        'card_id' => 'getCardId',
        'billing_first_name' => 'getBillingFirstName',
        'billing_last_name' => 'getBillingLastName',
        'billing_firm_name' => 'getBillingFirmName',
        'billing_addr1' => 'getBillingAddr1',
        'billing_city' => 'getBillingCity',
        'billing_state' => 'getBillingState',
        'billing_zip' => 'getBillingZip',
        'billing_zip4' => 'getBillingZip4',
        'billing_country' => 'getBillingCountry',
        'billing_country_code' => 'getBillingCountryCode',
        'card_type' => 'getCardType',
        'verify' => 'getVerify',
        'verified_date' => 'getVerifiedDate',
        'primary' => 'getPrimary',
        'vendor_id' => 'getVendorId'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const CARD_TYPE_VS = 'VS';
    const CARD_TYPE_MC = 'MC';
    const CARD_TYPE_AM = 'AM';
    const CARD_TYPE_DS = 'DS';
    const CARD_TYPE_JC = 'JC';
    const CARD_TYPE_PP = 'PP';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getCardTypeAllowableValues()
    {
        return [
            self::CARD_TYPE_VS,
            self::CARD_TYPE_MC,
            self::CARD_TYPE_AM,
            self::CARD_TYPE_DS,
            self::CARD_TYPE_JC,
            self::CARD_TYPE_PP,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['card_number'] = isset($data['card_number']) ? $data['card_number'] : null;
        $this->container['exp_date'] = isset($data['exp_date']) ? $data['exp_date'] : null;
        $this->container['cvv2'] = isset($data['cvv2']) ? $data['cvv2'] : null;
        $this->container['card_id'] = isset($data['card_id']) ? $data['card_id'] : null;
        $this->container['billing_first_name'] = isset($data['billing_first_name']) ? $data['billing_first_name'] : null;
        $this->container['billing_last_name'] = isset($data['billing_last_name']) ? $data['billing_last_name'] : null;
        $this->container['billing_firm_name'] = isset($data['billing_firm_name']) ? $data['billing_firm_name'] : null;
        $this->container['billing_addr1'] = isset($data['billing_addr1']) ? $data['billing_addr1'] : null;
        $this->container['billing_city'] = isset($data['billing_city']) ? $data['billing_city'] : null;
        $this->container['billing_state'] = isset($data['billing_state']) ? $data['billing_state'] : null;
        $this->container['billing_zip'] = isset($data['billing_zip']) ? $data['billing_zip'] : null;
        $this->container['billing_zip4'] = isset($data['billing_zip4']) ? $data['billing_zip4'] : null;
        $this->container['billing_country'] = isset($data['billing_country']) ? $data['billing_country'] : null;
        $this->container['billing_country_code'] = isset($data['billing_country_code']) ? $data['billing_country_code'] : null;
        $this->container['card_type'] = isset($data['card_type']) ? $data['card_type'] : null;
        $this->container['verify'] = isset($data['verify']) ? $data['verify'] : null;
        $this->container['verified_date'] = isset($data['verified_date']) ? $data['verified_date'] : null;
        $this->container['primary'] = isset($data['primary']) ? $data['primary'] : null;
        $this->container['vendor_id'] = isset($data['vendor_id']) ? $data['vendor_id'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['card_number'] === null) {
            $invalidProperties[] = "'card_number' can't be null";
        }
        if ($this->container['billing_zip'] === null) {
            $invalidProperties[] = "'billing_zip' can't be null";
        }
        $allowedValues = $this->getCardTypeAllowableValues();
        if (!in_array($this->container['card_type'], $allowedValues)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'card_type', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        if ($this->container['card_number'] === null) {
            return false;
        }
        if ($this->container['billing_zip'] === null) {
            return false;
        }
        $allowedValues = $this->getCardTypeAllowableValues();
        if (!in_array($this->container['card_type'], $allowedValues)) {
            return false;
        }
        return true;
    }


    /**
     * Gets card_number
     *
     * @return string
     */
    public function getCardNumber()
    {
        return $this->container['card_number'];
    }

    /**
     * Sets card_number
     *
     * @param string $card_number The payment Card Number - masked if this is part of reponse. When adding payment information, a full card number or card id is required, A masked card number can be used if card_id is also included in the request. Once a card is added, the card number will always remain masked on any subsequent requests returning this field. A card can be added only once,  duplicate cards are not permitted for a customer in the system
     *
     * @return $this
     */
    public function setCardNumber($card_number)
    {
        $this->container['card_number'] = $card_number;

        return $this;
    }

    /**
     * Gets exp_date
     *
     * @return string
     */
    public function getExpDate()
    {
        return $this->container['exp_date'];
    }

    /**
     * Sets exp_date
     *
     * @param string $exp_date Expiry Date in MMYY format.
     *
     * @return $this
     */
    public function setExpDate($exp_date)
    {
        $this->container['exp_date'] = $exp_date;

        return $this;
    }

    /**
     * Gets cvv2
     *
     * @return string
     */
    public function getCvv2()
    {
        return $this->container['cvv2'];
    }

    /**
     * Sets cvv2
     *
     * @param string $cvv2 The CVV2 or CID value from the credit card. If present during a verify, the cvv will be sent to the issuer for validation. The CVV2 will not be stored in vault. The response will also not include CVV2.
     *
     * @return $this
     */
    public function setCvv2($cvv2)
    {
        $this->container['cvv2'] = $cvv2;

        return $this;
    }

    /**
     * Gets card_id
     *
     * @return string
     */
    public function getCardId()
    {
        return $this->container['card_id'];
    }

    /**
     * Sets card_id
     *
     * @param string $card_id Tokenized Card number. If a card_id is not present in an add request, it is automatically created from the card_number. A card can be added only once. Duplicate cards are not permitted for a customer in the system. The card_id should be permanent. If this is a single use card_id, set the verify field to true which will make the card_id permanent.
     *
     * @return $this
     */
    public function setCardId($card_id)
    {
        $this->container['card_id'] = $card_id;

        return $this;
    }

    /**
     * Gets billing_first_name
     *
     * @return string
     */
    public function getBillingFirstName()
    {
        return $this->container['billing_first_name'];
    }

    /**
     * Sets billing_first_name
     *
     * @param string $billing_first_name Billing First Name. Can contain upto 32 characters.
     *
     * @return $this
     */
    public function setBillingFirstName($billing_first_name)
    {
        $this->container['billing_first_name'] = $billing_first_name;

        return $this;
    }

    /**
     * Gets billing_last_name
     *
     * @return string
     */
    public function getBillingLastName()
    {
        return $this->container['billing_last_name'];
    }

    /**
     * Sets billing_last_name
     *
     * @param string $billing_last_name Billing Last Name. Can contain upto 32 characters.
     *
     * @return $this
     */
    public function setBillingLastName($billing_last_name)
    {
        $this->container['billing_last_name'] = $billing_last_name;

        return $this;
    }

    /**
     * Gets billing_firm_name
     *
     * @return string
     */
    public function getBillingFirmName()
    {
        return $this->container['billing_firm_name'];
    }

    /**
     * Sets billing_firm_name
     *
     * @param string $billing_firm_name Business name on billing card, if applicable.
     *
     * @return $this
     */
    public function setBillingFirmName($billing_firm_name)
    {
        $this->container['billing_firm_name'] = $billing_firm_name;

        return $this;
    }

    /**
     * Gets billing_addr1
     *
     * @return string
     */
    public function getBillingAddr1()
    {
        return $this->container['billing_addr1'];
    }

    /**
     * Sets billing_addr1
     *
     * @param string $billing_addr1 Billing Street Address. This address will also used for AVS verification if AVS verificaiton is enabled.
     *
     * @return $this
     */
    public function setBillingAddr1($billing_addr1)
    {
        $this->container['billing_addr1'] = $billing_addr1;

        return $this;
    }

    /**
     * Gets billing_city
     *
     * @return string
     */
    public function getBillingCity()
    {
        return $this->container['billing_city'];
    }

    /**
     * Sets billing_city
     *
     * @param string $billing_city Billing City.
     *
     * @return $this
     */
    public function setBillingCity($billing_city)
    {
        $this->container['billing_city'] = $billing_city;

        return $this;
    }

    /**
     * Gets billing_state
     *
     * @return string
     */
    public function getBillingState()
    {
        return $this->container['billing_state'];
    }

    /**
     * Sets billing_state
     *
     * @param string $billing_state Billing State.
     *
     * @return $this
     */
    public function setBillingState($billing_state)
    {
        $this->container['billing_state'] = $billing_state;

        return $this;
    }

    /**
     * Gets billing_zip
     *
     * @return string
     */
    public function getBillingZip()
    {
        return $this->container['billing_zip'];
    }

    /**
     * Sets billing_zip
     *
     * @param string $billing_zip Billing Zip.
     *
     * @return $this
     */
    public function setBillingZip($billing_zip)
    {
        $this->container['billing_zip'] = $billing_zip;

        return $this;
    }

    /**
     * Gets billing_zip4
     *
     * @return string
     */
    public function getBillingZip4()
    {
        return $this->container['billing_zip4'];
    }

    /**
     * Sets billing_zip4
     *
     * @param string $billing_zip4 Billing zip+4 code if applicable.
     *
     * @return $this
     */
    public function setBillingZip4($billing_zip4)
    {
        $this->container['billing_zip4'] = $billing_zip4;

        return $this;
    }

    /**
     * Gets billing_country
     *
     * @return string
     */
    public function getBillingCountry()
    {
        return $this->container['billing_country'];
    }

    /**
     * Sets billing_country
     *
     * @param string $billing_country Billing Country.
     *
     * @return $this
     */
    public function setBillingCountry($billing_country)
    {
        $this->container['billing_country'] = $billing_country;

        return $this;
    }

    /**
     * Gets billing_country_code
     *
     * @return string
     */
    public function getBillingCountryCode()
    {
        return $this->container['billing_country_code'];
    }

    /**
     * Sets billing_country_code
     *
     * @param string $billing_country_code ISO numeric country code for the billing address. Refer to <a href=\"/developer/api/reference#country-codes\"target=\"_blank\">Country Codes</a> for a list of country codes.
     *
     * @return $this
     */
    public function setBillingCountryCode($billing_country_code)
    {
        $this->container['billing_country_code'] = $billing_country_code;

        return $this;
    }

    /**
     * Gets card_type
     *
     * @return string
     */
    public function getCardType()
    {
        return $this->container['card_type'];
    }

    /**
     * Sets card_type
     *
     * @param string $card_type Card Type. The card type is derived from the card number. Refer to <a href=\"/developer/api/reference#card-types\"target=\"_blank\">Card Types</a> for a list of card types.
     *
     * @return $this
     */
    public function setCardType($card_type)
    {
        $allowedValues = $this->getCardTypeAllowableValues();
        if (!is_null($card_type) && !in_array($card_type, $allowedValues)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'card_type', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['card_type'] = $card_type;

        return $this;
    }

    /**
     * Gets verify
     *
     * @return bool
     */
    public function getVerify()
    {
        return $this->container['verify'];
    }

    /**
     * Sets verify
     *
     * @param bool $verify Set this field to true if a card_number or card_id should be verified by the issuer before adding to Customer Vault. When this field is set to true, the customer will be added to vault either if the card verification successful or if card verification is not supported by the issuer.Default value is false and the card will not be verified before adding to vault
     *
     * @return $this
     */
    public function setVerify($verify)
    {
        $this->container['verify'] = $verify;

        return $this;
    }

    /**
     * Gets verified_date
     *
     * @return string
     */
    public function getVerifiedDate()
    {
        return $this->container['verified_date'];
    }

    /**
     * Sets verified_date
     *
     * @param string $verified_date Verified Date. The date the card was last verified successfully.
     *
     * @return $this
     */
    public function setVerifiedDate($verified_date)
    {
        $this->container['verified_date'] = $verified_date;

        return $this;
    }

    /**
     * Gets primary
     *
     * @return bool
     */
    public function getPrimary()
    {
        return $this->container['primary'];
    }

    /**
     * Sets primary
     *
     * @param bool $primary Set this field to true if this should be the default card. If there are multiple cards with primary true, only one of the card will be choosen to be the default card. Default value is false.
     *
     * @return $this
     */
    public function setPrimary($primary)
    {
        $this->container['primary'] = $primary;

        return $this;
    }

    /**
     * Gets vendor_id
     *
     * @return int
     */
    public function getVendorId()
    {
        return $this->container['vendor_id'];
    }

    /**
     * Sets vendor_id
     *
     * @param int $vendor_id Identifies the vendor to which this request applies. Applicable only if this request is on behalf of another merchant.
     *
     * @return $this
     */
    public function setVendorId($vendor_id)
    {
        $this->container['vendor_id'] = $vendor_id;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


