<?php
/**
 * BrowseAppsData
 *
 * PHP version 5
 *
 * @category Class
 * @package  calderaPayQualpayPlatform
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Qualpay Platform API
 *
 * This document describes the Qualpay Platform API.
 *
 * OpenAPI spec version: 1.1.9
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.3.1
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace calderaPayQualpayPlatform\Model;

use \ArrayAccess;
use \calderaPayQualpayPlatform\ObjectSerializer;

/**
 * BrowseAppsData Class Doc Comment
 *
 * @category Class
 * @package  calderaPayQualpayPlatform
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class BrowseAppsData implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'BrowseAppsData';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'app_id' => 'int',
        'merchant_id' => 'int',
        'app_status' => 'string',
        'dba_name' => 'string',
        'db_timestamp' => '\DateTime',
        'submit_timestamp' => '\DateTime',
        'credit_timestamp' => '\DateTime'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'app_id' => 'int64',
        'merchant_id' => 'int64',
        'app_status' => null,
        'dba_name' => null,
        'db_timestamp' => 'date-time',
        'submit_timestamp' => 'date-time',
        'credit_timestamp' => 'date-time'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'app_id' => 'app_id',
        'merchant_id' => 'merchant_id',
        'app_status' => 'app_status',
        'dba_name' => 'dba_name',
        'db_timestamp' => 'db_timestamp',
        'submit_timestamp' => 'submit_timestamp',
        'credit_timestamp' => 'credit_timestamp'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'app_id' => 'setAppId',
        'merchant_id' => 'setMerchantId',
        'app_status' => 'setAppStatus',
        'dba_name' => 'setDbaName',
        'db_timestamp' => 'setDbTimestamp',
        'submit_timestamp' => 'setSubmitTimestamp',
        'credit_timestamp' => 'setCreditTimestamp'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'app_id' => 'getAppId',
        'merchant_id' => 'getMerchantId',
        'app_status' => 'getAppStatus',
        'dba_name' => 'getDbaName',
        'db_timestamp' => 'getDbTimestamp',
        'submit_timestamp' => 'getSubmitTimestamp',
        'credit_timestamp' => 'getCreditTimestamp'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['app_id'] = isset($data['app_id']) ? $data['app_id'] : null;
        $this->container['merchant_id'] = isset($data['merchant_id']) ? $data['merchant_id'] : null;
        $this->container['app_status'] = isset($data['app_status']) ? $data['app_status'] : null;
        $this->container['dba_name'] = isset($data['dba_name']) ? $data['dba_name'] : null;
        $this->container['db_timestamp'] = isset($data['db_timestamp']) ? $data['db_timestamp'] : null;
        $this->container['submit_timestamp'] = isset($data['submit_timestamp']) ? $data['submit_timestamp'] : null;
        $this->container['credit_timestamp'] = isset($data['credit_timestamp']) ? $data['credit_timestamp'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['app_id'] === null) {
            $invalidProperties[] = "'app_id' can't be null";
        }
        if ($this->container['merchant_id'] === null) {
            $invalidProperties[] = "'merchant_id' can't be null";
        }
        if ($this->container['app_status'] === null) {
            $invalidProperties[] = "'app_status' can't be null";
        }
        if ($this->container['dba_name'] === null) {
            $invalidProperties[] = "'dba_name' can't be null";
        }
        if ($this->container['db_timestamp'] === null) {
            $invalidProperties[] = "'db_timestamp' can't be null";
        }
        if ($this->container['submit_timestamp'] === null) {
            $invalidProperties[] = "'submit_timestamp' can't be null";
        }
        if ($this->container['credit_timestamp'] === null) {
            $invalidProperties[] = "'credit_timestamp' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        if ($this->container['app_id'] === null) {
            return false;
        }
        if ($this->container['merchant_id'] === null) {
            return false;
        }
        if ($this->container['app_status'] === null) {
            return false;
        }
        if ($this->container['dba_name'] === null) {
            return false;
        }
        if ($this->container['db_timestamp'] === null) {
            return false;
        }
        if ($this->container['submit_timestamp'] === null) {
            return false;
        }
        if ($this->container['credit_timestamp'] === null) {
            return false;
        }
        return true;
    }


    /**
     * Gets app_id
     *
     * @return int
     */
    public function getAppId()
    {
        return $this->container['app_id'];
    }

    /**
     * Sets app_id
     *
     * @param int $app_id Unique ID assigned by Qualpay to this application.
     *
     * @return $this
     */
    public function setAppId($app_id)
    {
        $this->container['app_id'] = $app_id;

        return $this;
    }

    /**
     * Gets merchant_id
     *
     * @return int
     */
    public function getMerchantId()
    {
        return $this->container['merchant_id'];
    }

    /**
     * Sets merchant_id
     *
     * @param int $merchant_id Unique ID assigned by Qualpay to a Merchant.
     *
     * @return $this
     */
    public function setMerchantId($merchant_id)
    {
        $this->container['merchant_id'] = $merchant_id;

        return $this;
    }

    /**
     * Gets app_status
     *
     * @return string
     */
    public function getAppStatus()
    {
        return $this->container['app_status'];
    }

    /**
     * Sets app_status
     *
     * @param string $app_status The current status of the application.
     *
     * @return $this
     */
    public function setAppStatus($app_status)
    {
        $this->container['app_status'] = $app_status;

        return $this;
    }

    /**
     * Gets dba_name
     *
     * @return string
     */
    public function getDbaName()
    {
        return $this->container['dba_name'];
    }

    /**
     * Sets dba_name
     *
     * @param string $dba_name The 'doing business as' name, as it is currently on the merchant application.
     *
     * @return $this
     */
    public function setDbaName($dba_name)
    {
        $this->container['dba_name'] = $dba_name;

        return $this;
    }

    /**
     * Gets db_timestamp
     *
     * @return \DateTime
     */
    public function getDbTimestamp()
    {
        return $this->container['db_timestamp'];
    }

    /**
     * Sets db_timestamp
     *
     * @param \DateTime $db_timestamp The timestamp the application was created.
     *
     * @return $this
     */
    public function setDbTimestamp($db_timestamp)
    {
        $this->container['db_timestamp'] = $db_timestamp;

        return $this;
    }

    /**
     * Gets submit_timestamp
     *
     * @return \DateTime
     */
    public function getSubmitTimestamp()
    {
        return $this->container['submit_timestamp'];
    }

    /**
     * Sets submit_timestamp
     *
     * @param \DateTime $submit_timestamp The timestamp the application was submitted as complete.
     *
     * @return $this
     */
    public function setSubmitTimestamp($submit_timestamp)
    {
        $this->container['submit_timestamp'] = $submit_timestamp;

        return $this;
    }

    /**
     * Gets credit_timestamp
     *
     * @return \DateTime
     */
    public function getCreditTimestamp()
    {
        return $this->container['credit_timestamp'];
    }

    /**
     * Sets credit_timestamp
     *
     * @param \DateTime $credit_timestamp The timestamp the application's credit decision was made.
     *
     * @return $this
     */
    public function setCreditTimestamp($credit_timestamp)
    {
        $this->container['credit_timestamp'] = $credit_timestamp;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


