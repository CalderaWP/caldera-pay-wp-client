<?php
/**
 * CheckoutLink
 *
 * PHP version 5
 *
 * @category Class
 * @package  calderaPayQualpayPlatform
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Qualpay Platform API
 *
 * This document describes the Qualpay Platform API.
 *
 * OpenAPI spec version: 1.1.9
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.3.1
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace calderaPayQualpayPlatform\Model;

use \ArrayAccess;
use \calderaPayQualpayPlatform\ObjectSerializer;

/**
 * CheckoutLink Class Doc Comment
 *
 * @category Class
 * @package  calderaPayQualpayPlatform
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class CheckoutLink implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'CheckoutLink';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'checkout_id' => 'string',
        'checkout_link' => 'string',
        'merchant_id' => 'int',
        'purchase_id' => 'string',
        'amt_tran' => 'double',
        'tran_currency' => 'string',
        'db_timestamp' => 'string',
        'expiry_time' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'checkout_id' => null,
        'checkout_link' => null,
        'merchant_id' => 'int64',
        'purchase_id' => null,
        'amt_tran' => 'double',
        'tran_currency' => null,
        'db_timestamp' => null,
        'expiry_time' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'checkout_id' => 'checkout_id',
        'checkout_link' => 'checkout_link',
        'merchant_id' => 'merchant_id',
        'purchase_id' => 'purchase_id',
        'amt_tran' => 'amt_tran',
        'tran_currency' => 'tran_currency',
        'db_timestamp' => 'db_timestamp',
        'expiry_time' => 'expiry_time'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'checkout_id' => 'setCheckoutId',
        'checkout_link' => 'setCheckoutLink',
        'merchant_id' => 'setMerchantId',
        'purchase_id' => 'setPurchaseId',
        'amt_tran' => 'setAmtTran',
        'tran_currency' => 'setTranCurrency',
        'db_timestamp' => 'setDbTimestamp',
        'expiry_time' => 'setExpiryTime'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'checkout_id' => 'getCheckoutId',
        'checkout_link' => 'getCheckoutLink',
        'merchant_id' => 'getMerchantId',
        'purchase_id' => 'getPurchaseId',
        'amt_tran' => 'getAmtTran',
        'tran_currency' => 'getTranCurrency',
        'db_timestamp' => 'getDbTimestamp',
        'expiry_time' => 'getExpiryTime'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['checkout_id'] = isset($data['checkout_id']) ? $data['checkout_id'] : null;
        $this->container['checkout_link'] = isset($data['checkout_link']) ? $data['checkout_link'] : null;
        $this->container['merchant_id'] = isset($data['merchant_id']) ? $data['merchant_id'] : null;
        $this->container['purchase_id'] = isset($data['purchase_id']) ? $data['purchase_id'] : null;
        $this->container['amt_tran'] = isset($data['amt_tran']) ? $data['amt_tran'] : null;
        $this->container['tran_currency'] = isset($data['tran_currency']) ? $data['tran_currency'] : null;
        $this->container['db_timestamp'] = isset($data['db_timestamp']) ? $data['db_timestamp'] : null;
        $this->container['expiry_time'] = isset($data['expiry_time']) ? $data['expiry_time'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        return true;
    }


    /**
     * Gets checkout_id
     *
     * @return string
     */
    public function getCheckoutId()
    {
        return $this->container['checkout_id'];
    }

    /**
     * Sets checkout_id
     *
     * @param string $checkout_id A unique identifier that is generated when a checkout record is created. It should be stored as a reference to the checkout and can be used to pull payment details of the checkout.
     *
     * @return $this
     */
    public function setCheckoutId($checkout_id)
    {
        $this->container['checkout_id'] = $checkout_id;

        return $this;
    }

    /**
     * Gets checkout_link
     *
     * @return string
     */
    public function getCheckoutLink()
    {
        return $this->container['checkout_link'];
    }

    /**
     * Sets checkout_link
     *
     * @param string $checkout_link A redirect link that will direct a customer to the Qualpay payment page. This link is unique for each checkout.
     *
     * @return $this
     */
    public function setCheckoutLink($checkout_link)
    {
        $this->container['checkout_link'] = $checkout_link;

        return $this;
    }

    /**
     * Gets merchant_id
     *
     * @return int
     */
    public function getMerchantId()
    {
        return $this->container['merchant_id'];
    }

    /**
     * Sets merchant_id
     *
     * @param int $merchant_id Unique ID assigned by Qualpay to a Merchant
     *
     * @return $this
     */
    public function setMerchantId($merchant_id)
    {
        $this->container['merchant_id'] = $merchant_id;

        return $this;
    }

    /**
     * Gets purchase_id
     *
     * @return string
     */
    public function getPurchaseId()
    {
        return $this->container['purchase_id'];
    }

    /**
     * Sets purchase_id
     *
     * @param string $purchase_id The purchase identifier (also referred to as the invoice number) generated by the merchant.
     *
     * @return $this
     */
    public function setPurchaseId($purchase_id)
    {
        $this->container['purchase_id'] = $purchase_id;

        return $this;
    }

    /**
     * Gets amt_tran
     *
     * @return double
     */
    public function getAmtTran()
    {
        return $this->container['amt_tran'];
    }

    /**
     * Sets amt_tran
     *
     * @param double $amt_tran Transaction amount from the request message
     *
     * @return $this
     */
    public function setAmtTran($amt_tran)
    {
        $this->container['amt_tran'] = $amt_tran;

        return $this;
    }

    /**
     * Gets tran_currency
     *
     * @return string
     */
    public function getTranCurrency()
    {
        return $this->container['tran_currency'];
    }

    /**
     * Sets tran_currency
     *
     * @param string $tran_currency This field contains the ISO numeric currency code for the transaction.  This field contains the tran_currency from the request or, if profile_id is provided, this field will contain the tran_currency associated with the profile.
     *
     * @return $this
     */
    public function setTranCurrency($tran_currency)
    {
        $this->container['tran_currency'] = $tran_currency;

        return $this;
    }

    /**
     * Gets db_timestamp
     *
     * @return string
     */
    public function getDbTimestamp()
    {
        return $this->container['db_timestamp'];
    }

    /**
     * Sets db_timestamp
     *
     * @param string $db_timestamp This field contains the request creation time stamp.
     *
     * @return $this
     */
    public function setDbTimestamp($db_timestamp)
    {
        $this->container['db_timestamp'] = $db_timestamp;

        return $this;
    }

    /**
     * Gets expiry_time
     *
     * @return string
     */
    public function getExpiryTime()
    {
        return $this->container['expiry_time'];
    }

    /**
     * Sets expiry_time
     *
     * @param string $expiry_time This field contains the timestamp when the checkout_link will expire.  A link will expire once the complete payment is made or if the current date is past the expiry time.  Once a link expires, redirects to the link will be forwarded to your failure URL if provided or to the Qualpay Checkout error page if failure URL is not provided.
     *
     * @return $this
     */
    public function setExpiryTime($expiry_time)
    {
        $this->container['expiry_time'] = $expiry_time;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


