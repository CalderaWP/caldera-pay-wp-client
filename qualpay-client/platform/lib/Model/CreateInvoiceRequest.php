<?php
/**
 * CreateInvoiceRequest
 *
 * PHP version 5
 *
 * @category Class
 * @package  calderaPayQualpayPlatform
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Qualpay Platform API
 *
 * This document describes the Qualpay Platform API.
 *
 * OpenAPI spec version: 1.1.9
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.3.1
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace calderaPayQualpayPlatform\Model;

use \ArrayAccess;
use \calderaPayQualpayPlatform\ObjectSerializer;

/**
 * CreateInvoiceRequest Class Doc Comment
 *
 * @category Class
 * @package  calderaPayQualpayPlatform
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class CreateInvoiceRequest implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'CreateInvoiceRequest';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'customer_id' => 'string',
        'from_contact' => '\calderaPayQualpayPlatform\Model\Contact',
        'billing_contact' => '\calderaPayQualpayPlatform\Model\Contact',
        'invoice_number' => 'string',
        'profile_id' => 'string',
        'tran_currency' => 'string',
        'footer_note' => 'string',
        'payment_terms_note' => 'string',
        'checkout_settings' => '\calderaPayQualpayPlatform\Model\CheckoutSettings',
        'sales_tax' => '\calderaPayQualpayPlatform\Model\SalesTax',
        'payment_terms' => '\calderaPayQualpayPlatform\Model\PaymentTerm',
        'date_invoice' => 'string',
        'line_items' => '\calderaPayQualpayPlatform\Model\LineItem[]',
        'save_customer' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'customer_id' => null,
        'from_contact' => null,
        'billing_contact' => null,
        'invoice_number' => null,
        'profile_id' => null,
        'tran_currency' => null,
        'footer_note' => null,
        'payment_terms_note' => null,
        'checkout_settings' => null,
        'sales_tax' => null,
        'payment_terms' => null,
        'date_invoice' => null,
        'line_items' => null,
        'save_customer' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'customer_id' => 'customer_id',
        'from_contact' => 'from_contact',
        'billing_contact' => 'billing_contact',
        'invoice_number' => 'invoice_number',
        'profile_id' => 'profile_id',
        'tran_currency' => 'tran_currency',
        'footer_note' => 'footer_note',
        'payment_terms_note' => 'payment_terms_note',
        'checkout_settings' => 'checkout_settings',
        'sales_tax' => 'sales_tax',
        'payment_terms' => 'payment_terms',
        'date_invoice' => 'date_invoice',
        'line_items' => 'line_items',
        'save_customer' => 'save_customer'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'customer_id' => 'setCustomerId',
        'from_contact' => 'setFromContact',
        'billing_contact' => 'setBillingContact',
        'invoice_number' => 'setInvoiceNumber',
        'profile_id' => 'setProfileId',
        'tran_currency' => 'setTranCurrency',
        'footer_note' => 'setFooterNote',
        'payment_terms_note' => 'setPaymentTermsNote',
        'checkout_settings' => 'setCheckoutSettings',
        'sales_tax' => 'setSalesTax',
        'payment_terms' => 'setPaymentTerms',
        'date_invoice' => 'setDateInvoice',
        'line_items' => 'setLineItems',
        'save_customer' => 'setSaveCustomer'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'customer_id' => 'getCustomerId',
        'from_contact' => 'getFromContact',
        'billing_contact' => 'getBillingContact',
        'invoice_number' => 'getInvoiceNumber',
        'profile_id' => 'getProfileId',
        'tran_currency' => 'getTranCurrency',
        'footer_note' => 'getFooterNote',
        'payment_terms_note' => 'getPaymentTermsNote',
        'checkout_settings' => 'getCheckoutSettings',
        'sales_tax' => 'getSalesTax',
        'payment_terms' => 'getPaymentTerms',
        'date_invoice' => 'getDateInvoice',
        'line_items' => 'getLineItems',
        'save_customer' => 'getSaveCustomer'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['customer_id'] = isset($data['customer_id']) ? $data['customer_id'] : null;
        $this->container['from_contact'] = isset($data['from_contact']) ? $data['from_contact'] : null;
        $this->container['billing_contact'] = isset($data['billing_contact']) ? $data['billing_contact'] : null;
        $this->container['invoice_number'] = isset($data['invoice_number']) ? $data['invoice_number'] : null;
        $this->container['profile_id'] = isset($data['profile_id']) ? $data['profile_id'] : null;
        $this->container['tran_currency'] = isset($data['tran_currency']) ? $data['tran_currency'] : null;
        $this->container['footer_note'] = isset($data['footer_note']) ? $data['footer_note'] : null;
        $this->container['payment_terms_note'] = isset($data['payment_terms_note']) ? $data['payment_terms_note'] : null;
        $this->container['checkout_settings'] = isset($data['checkout_settings']) ? $data['checkout_settings'] : null;
        $this->container['sales_tax'] = isset($data['sales_tax']) ? $data['sales_tax'] : null;
        $this->container['payment_terms'] = isset($data['payment_terms']) ? $data['payment_terms'] : null;
        $this->container['date_invoice'] = isset($data['date_invoice']) ? $data['date_invoice'] : null;
        $this->container['line_items'] = isset($data['line_items']) ? $data['line_items'] : null;
        $this->container['save_customer'] = isset($data['save_customer']) ? $data['save_customer'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['customer_id'] === null) {
            $invalidProperties[] = "'customer_id' can't be null";
        }
        if ($this->container['invoice_number'] === null) {
            $invalidProperties[] = "'invoice_number' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        if ($this->container['customer_id'] === null) {
            return false;
        }
        if ($this->container['invoice_number'] === null) {
            return false;
        }
        return true;
    }


    /**
     * Gets customer_id
     *
     * @return string
     */
    public function getCustomerId()
    {
        return $this->container['customer_id'];
    }

    /**
     * Sets customer_id
     *
     * @param string $customer_id The Qualpay customer_id associated with this invoice. If customer does not exist in the system, set the save_customer flag to true to create the customer before creating the invoice. <br><strong>Maximum Length: </strong>32
     *
     * @return $this
     */
    public function setCustomerId($customer_id)
    {
        $this->container['customer_id'] = $customer_id;

        return $this;
    }

    /**
     * Gets from_contact
     *
     * @return \calderaPayQualpayPlatform\Model\Contact
     */
    public function getFromContact()
    {
        return $this->container['from_contact'];
    }

    /**
     * Sets from_contact
     *
     * @param \calderaPayQualpayPlatform\Model\Contact $from_contact The merchant business contact information. By default, the system will use the Business Contact information from the Invoice Settings page. This field is required to send the invoice.
     *
     * @return $this
     */
    public function setFromContact($from_contact)
    {
        $this->container['from_contact'] = $from_contact;

        return $this;
    }

    /**
     * Gets billing_contact
     *
     * @return \calderaPayQualpayPlatform\Model\Contact
     */
    public function getBillingContact()
    {
        return $this->container['billing_contact'];
    }

    /**
     * Sets billing_contact
     *
     * @param \calderaPayQualpayPlatform\Model\Contact $billing_contact The customer contact information. If not provided, the system will populate this information from Customer Vault using the customer_id field. This field is required to send the invoice. <br><strong>Conditional Requirement: </strong>This field is required if the save_customer flag is set to true.
     *
     * @return $this
     */
    public function setBillingContact($billing_contact)
    {
        $this->container['billing_contact'] = $billing_contact;

        return $this;
    }

    /**
     * Gets invoice_number
     *
     * @return string
     */
    public function getInvoiceNumber()
    {
        return $this->container['invoice_number'];
    }

    /**
     * Sets invoice_number
     *
     * @param string $invoice_number The Invoice Number (also referred to as the purchase identifier) generated by the merchant. <br><strong>Maximum Length: </strong>25
     *
     * @return $this
     */
    public function setInvoiceNumber($invoice_number)
    {
        $this->container['invoice_number'] = $invoice_number;

        return $this;
    }

    /**
     * Gets profile_id
     *
     * @return string
     */
    public function getProfileId()
    {
        return $this->container['profile_id'];
    }

    /**
     * Sets profile_id
     *
     * @param string $profile_id The unique Qualpay payment gateway profile ID to be used when making an invoice payment. This field is optional, only the tran_currency field can be sent and the system will choose the appropriate profile. If both profile_id and tran_currency is sent, the system will use the profile_id. <br><strong>Maximum Length: </strong>20
     *
     * @return $this
     */
    public function setProfileId($profile_id)
    {
        $this->container['profile_id'] = $profile_id;

        return $this;
    }

    /**
     * Gets tran_currency
     *
     * @return string
     */
    public function getTranCurrency()
    {
        return $this->container['tran_currency'];
    }

    /**
     * Sets tran_currency
     *
     * @param string $tran_currency Numeric Currency Code. Refer to <a href=\"/developer/api/reference#country-codes\"target=\"_blank\">Country Codes</a> for a list of currency codes. If both profile_id and tran_currency fields are provided, profile_id is used. tran_currency will be updated to match the profile_id<br><strong>Default: </strong>840<br><strong>Maximum Length: </strong>3
     *
     * @return $this
     */
    public function setTranCurrency($tran_currency)
    {
        $this->container['tran_currency'] = $tran_currency;

        return $this;
    }

    /**
     * Gets footer_note
     *
     * @return string
     */
    public function getFooterNote()
    {
        return $this->container['footer_note'];
    }

    /**
     * Sets footer_note
     *
     * @param string $footer_note The invoice footer note. This data will be displayed on the footer of the invoice.  By default, the system will use the footer note from the Invoice Settings page.<br><strong>Maximum Length: </strong>750
     *
     * @return $this
     */
    public function setFooterNote($footer_note)
    {
        $this->container['footer_note'] = $footer_note;

        return $this;
    }

    /**
     * Gets payment_terms_note
     *
     * @return string
     */
    public function getPaymentTermsNote()
    {
        return $this->container['payment_terms_note'];
    }

    /**
     * Sets payment_terms_note
     *
     * @param string $payment_terms_note The invoice payment terms description. By default, the system will use the payment terms note information from the Invoice Settings page.<br><strong>Maximum Length: </strong>500
     *
     * @return $this
     */
    public function setPaymentTermsNote($payment_terms_note)
    {
        $this->container['payment_terms_note'] = $payment_terms_note;

        return $this;
    }

    /**
     * Gets checkout_settings
     *
     * @return \calderaPayQualpayPlatform\Model\CheckoutSettings
     */
    public function getCheckoutSettings()
    {
        return $this->container['checkout_settings'];
    }

    /**
     * Sets checkout_settings
     *
     * @param \calderaPayQualpayPlatform\Model\CheckoutSettings $checkout_settings Invoice checkout page specific settings. By default, the system will use the Checkout Settings information from the Invoice Settings page.
     *
     * @return $this
     */
    public function setCheckoutSettings($checkout_settings)
    {
        $this->container['checkout_settings'] = $checkout_settings;

        return $this;
    }

    /**
     * Gets sales_tax
     *
     * @return \calderaPayQualpayPlatform\Model\SalesTax
     */
    public function getSalesTax()
    {
        return $this->container['sales_tax'];
    }

    /**
     * Sets sales_tax
     *
     * @param \calderaPayQualpayPlatform\Model\SalesTax $sales_tax Sales tax
     *
     * @return $this
     */
    public function setSalesTax($sales_tax)
    {
        $this->container['sales_tax'] = $sales_tax;

        return $this;
    }

    /**
     * Gets payment_terms
     *
     * @return \calderaPayQualpayPlatform\Model\PaymentTerm
     */
    public function getPaymentTerms()
    {
        return $this->container['payment_terms'];
    }

    /**
     * Sets payment_terms
     *
     * @param \calderaPayQualpayPlatform\Model\PaymentTerm $payment_terms Payment Terms
     *
     * @return $this
     */
    public function setPaymentTerms($payment_terms)
    {
        $this->container['payment_terms'] = $payment_terms;

        return $this;
    }

    /**
     * Gets date_invoice
     *
     * @return string
     */
    public function getDateInvoice()
    {
        return $this->container['date_invoice'];
    }

    /**
     * Sets date_invoice
     *
     * @param string $date_invoice The invoice date.<br><strong>Format: </strong>YYYY-mm-DD
     *
     * @return $this
     */
    public function setDateInvoice($date_invoice)
    {
        $this->container['date_invoice'] = $date_invoice;

        return $this;
    }

    /**
     * Gets line_items
     *
     * @return \calderaPayQualpayPlatform\Model\LineItem[]
     */
    public function getLineItems()
    {
        return $this->container['line_items'];
    }

    /**
     * Sets line_items
     *
     * @param \calderaPayQualpayPlatform\Model\LineItem[] $line_items The invoice line item details.
     *
     * @return $this
     */
    public function setLineItems($line_items)
    {
        $this->container['line_items'] = $line_items;

        return $this;
    }

    /**
     * Gets save_customer
     *
     * @return bool
     */
    public function getSaveCustomer()
    {
        return $this->container['save_customer'];
    }

    /**
     * Sets save_customer
     *
     * @param bool $save_customer Set this value to true if you want to create a customer. By default, this value is false. <br>customer_id and billing_contact fields are required when this flag is set to true.
     *
     * @return $this
     */
    public function setSaveCustomer($save_customer)
    {
        $this->container['save_customer'] = $save_customer;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


