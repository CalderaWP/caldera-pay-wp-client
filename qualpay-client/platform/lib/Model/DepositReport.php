<?php
/**
 * DepositReport
 *
 * PHP version 5
 *
 * @category Class
 * @package  calderaPayQualpayPlatform
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Qualpay Platform API
 *
 * This document describes the Qualpay Platform API.
 *
 * OpenAPI spec version: 1.1.9
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.3.1
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace calderaPayQualpayPlatform\Model;

use \ArrayAccess;
use \calderaPayQualpayPlatform\ObjectSerializer;

/**
 * DepositReport Class Doc Comment
 *
 * @category Class
 * @package  calderaPayQualpayPlatform
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class DepositReport implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'DepositReport';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'rec_id' => 'int',
        'merchant_id' => 'int',
        'dba_name' => 'string',
        'reference_number' => 'string',
        'amt_ach' => 'string',
        'ach_description' => 'string',
        'post_date_actual' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'rec_id' => 'int64',
        'merchant_id' => 'int64',
        'dba_name' => null,
        'reference_number' => null,
        'amt_ach' => null,
        'ach_description' => null,
        'post_date_actual' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'rec_id' => 'rec_id',
        'merchant_id' => 'merchant_id',
        'dba_name' => 'dba_name',
        'reference_number' => 'reference_number',
        'amt_ach' => 'amt_ach',
        'ach_description' => 'ach_description',
        'post_date_actual' => 'post_date_actual'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'rec_id' => 'setRecId',
        'merchant_id' => 'setMerchantId',
        'dba_name' => 'setDbaName',
        'reference_number' => 'setReferenceNumber',
        'amt_ach' => 'setAmtAch',
        'ach_description' => 'setAchDescription',
        'post_date_actual' => 'setPostDateActual'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'rec_id' => 'getRecId',
        'merchant_id' => 'getMerchantId',
        'dba_name' => 'getDbaName',
        'reference_number' => 'getReferenceNumber',
        'amt_ach' => 'getAmtAch',
        'ach_description' => 'getAchDescription',
        'post_date_actual' => 'getPostDateActual'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['rec_id'] = isset($data['rec_id']) ? $data['rec_id'] : null;
        $this->container['merchant_id'] = isset($data['merchant_id']) ? $data['merchant_id'] : null;
        $this->container['dba_name'] = isset($data['dba_name']) ? $data['dba_name'] : null;
        $this->container['reference_number'] = isset($data['reference_number']) ? $data['reference_number'] : null;
        $this->container['amt_ach'] = isset($data['amt_ach']) ? $data['amt_ach'] : null;
        $this->container['ach_description'] = isset($data['ach_description']) ? $data['ach_description'] : null;
        $this->container['post_date_actual'] = isset($data['post_date_actual']) ? $data['post_date_actual'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['rec_id'] === null) {
            $invalidProperties[] = "'rec_id' can't be null";
        }
        if ($this->container['merchant_id'] === null) {
            $invalidProperties[] = "'merchant_id' can't be null";
        }
        if ($this->container['dba_name'] === null) {
            $invalidProperties[] = "'dba_name' can't be null";
        }
        if ($this->container['reference_number'] === null) {
            $invalidProperties[] = "'reference_number' can't be null";
        }
        if ($this->container['amt_ach'] === null) {
            $invalidProperties[] = "'amt_ach' can't be null";
        }
        if ($this->container['ach_description'] === null) {
            $invalidProperties[] = "'ach_description' can't be null";
        }
        if ($this->container['post_date_actual'] === null) {
            $invalidProperties[] = "'post_date_actual' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        if ($this->container['rec_id'] === null) {
            return false;
        }
        if ($this->container['merchant_id'] === null) {
            return false;
        }
        if ($this->container['dba_name'] === null) {
            return false;
        }
        if ($this->container['reference_number'] === null) {
            return false;
        }
        if ($this->container['amt_ach'] === null) {
            return false;
        }
        if ($this->container['ach_description'] === null) {
            return false;
        }
        if ($this->container['post_date_actual'] === null) {
            return false;
        }
        return true;
    }


    /**
     * Gets rec_id
     *
     * @return int
     */
    public function getRecId()
    {
        return $this->container['rec_id'];
    }

    /**
     * Sets rec_id
     *
     * @param int $rec_id Unique ID assigned by Qualpay to this deposit.
     *
     * @return $this
     */
    public function setRecId($rec_id)
    {
        $this->container['rec_id'] = $rec_id;

        return $this;
    }

    /**
     * Gets merchant_id
     *
     * @return int
     */
    public function getMerchantId()
    {
        return $this->container['merchant_id'];
    }

    /**
     * Sets merchant_id
     *
     * @param int $merchant_id Unique ID assigned by Qualpay to a Merchant.
     *
     * @return $this
     */
    public function setMerchantId($merchant_id)
    {
        $this->container['merchant_id'] = $merchant_id;

        return $this;
    }

    /**
     * Gets dba_name
     *
     * @return string
     */
    public function getDbaName()
    {
        return $this->container['dba_name'];
    }

    /**
     * Sets dba_name
     *
     * @param string $dba_name The doing business as name of the merchant.
     *
     * @return $this
     */
    public function setDbaName($dba_name)
    {
        $this->container['dba_name'] = $dba_name;

        return $this;
    }

    /**
     * Gets reference_number
     *
     * @return string
     */
    public function getReferenceNumber()
    {
        return $this->container['reference_number'];
    }

    /**
     * Sets reference_number
     *
     * @param string $reference_number The bank reference number of the deposit.
     *
     * @return $this
     */
    public function setReferenceNumber($reference_number)
    {
        $this->container['reference_number'] = $reference_number;

        return $this;
    }

    /**
     * Gets amt_ach
     *
     * @return string
     */
    public function getAmtAch()
    {
        return $this->container['amt_ach'];
    }

    /**
     * Sets amt_ach
     *
     * @param string $amt_ach ACH Amount
     *
     * @return $this
     */
    public function setAmtAch($amt_ach)
    {
        $this->container['amt_ach'] = $amt_ach;

        return $this;
    }

    /**
     * Gets ach_description
     *
     * @return string
     */
    public function getAchDescription()
    {
        return $this->container['ach_description'];
    }

    /**
     * Sets ach_description
     *
     * @param string $ach_description ACH Amount
     *
     * @return $this
     */
    public function setAchDescription($ach_description)
    {
        $this->container['ach_description'] = $ach_description;

        return $this;
    }

    /**
     * Gets post_date_actual
     *
     * @return string
     */
    public function getPostDateActual()
    {
        return $this->container['post_date_actual'];
    }

    /**
     * Sets post_date_actual
     *
     * @param string $post_date_actual The date the ACH posted to the Federal Reserve.
     *
     * @return $this
     */
    public function setPostDateActual($post_date_actual)
    {
        $this->container['post_date_actual'] = $post_date_actual;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


