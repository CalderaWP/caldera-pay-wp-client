<?php
/**
 * DisputeReport
 *
 * PHP version 5
 *
 * @category Class
 * @package  calderaPayQualpayPlatform
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Qualpay Platform API
 *
 * This document describes the Qualpay Platform API.
 *
 * OpenAPI spec version: 1.1.9
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.3.1
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace calderaPayQualpayPlatform\Model;

use \ArrayAccess;
use \calderaPayQualpayPlatform\ObjectSerializer;

/**
 * DisputeReport Class Doc Comment
 *
 * @category Class
 * @package  calderaPayQualpayPlatform
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class DisputeReport implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'DisputeReport';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'rec_id' => 'int',
        'data_type' => 'string',
        'merchant_id' => 'int',
        'incoming_date' => 'string',
        'dba_name' => 'string',
        'batch_id' => 'int',
        'card_number' => 'string',
        'card_type' => 'string',
        'tran_date' => 'string',
        'amt_tran' => 'string',
        'amt_dispute' => 'string',
        'tran_currency' => 'string',
        'purchase_id' => 'string',
        'merch_ref_num' => 'string',
        'pg_id' => 'string',
        'auth_code' => 'string',
        'reason_code' => 'string',
        'rec_id_linked' => 'string',
        'auth_avs_result' => 'string',
        'auth_cvv2_result' => 'string',
        'card_number_original' => 'string',
        'date_status_change' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'rec_id' => 'int64',
        'data_type' => null,
        'merchant_id' => 'int64',
        'incoming_date' => null,
        'dba_name' => null,
        'batch_id' => 'int64',
        'card_number' => null,
        'card_type' => null,
        'tran_date' => null,
        'amt_tran' => null,
        'amt_dispute' => null,
        'tran_currency' => null,
        'purchase_id' => null,
        'merch_ref_num' => null,
        'pg_id' => null,
        'auth_code' => null,
        'reason_code' => null,
        'rec_id_linked' => null,
        'auth_avs_result' => null,
        'auth_cvv2_result' => null,
        'card_number_original' => null,
        'date_status_change' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'rec_id' => 'rec_id',
        'data_type' => 'data_type',
        'merchant_id' => 'merchant_id',
        'incoming_date' => 'incoming_date',
        'dba_name' => 'dba_name',
        'batch_id' => 'batch_id',
        'card_number' => 'card_number',
        'card_type' => 'card_type',
        'tran_date' => 'tran_date',
        'amt_tran' => 'amt_tran',
        'amt_dispute' => 'amt_dispute',
        'tran_currency' => 'tran_currency',
        'purchase_id' => 'purchase_id',
        'merch_ref_num' => 'merch_ref_num',
        'pg_id' => 'pg_id',
        'auth_code' => 'auth_code',
        'reason_code' => 'reason_code',
        'rec_id_linked' => 'rec_id_linked',
        'auth_avs_result' => 'auth_avs_result',
        'auth_cvv2_result' => 'auth_cvv2_result',
        'card_number_original' => 'card_number_original',
        'date_status_change' => 'date_status_change'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'rec_id' => 'setRecId',
        'data_type' => 'setDataType',
        'merchant_id' => 'setMerchantId',
        'incoming_date' => 'setIncomingDate',
        'dba_name' => 'setDbaName',
        'batch_id' => 'setBatchId',
        'card_number' => 'setCardNumber',
        'card_type' => 'setCardType',
        'tran_date' => 'setTranDate',
        'amt_tran' => 'setAmtTran',
        'amt_dispute' => 'setAmtDispute',
        'tran_currency' => 'setTranCurrency',
        'purchase_id' => 'setPurchaseId',
        'merch_ref_num' => 'setMerchRefNum',
        'pg_id' => 'setPgId',
        'auth_code' => 'setAuthCode',
        'reason_code' => 'setReasonCode',
        'rec_id_linked' => 'setRecIdLinked',
        'auth_avs_result' => 'setAuthAvsResult',
        'auth_cvv2_result' => 'setAuthCvv2Result',
        'card_number_original' => 'setCardNumberOriginal',
        'date_status_change' => 'setDateStatusChange'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'rec_id' => 'getRecId',
        'data_type' => 'getDataType',
        'merchant_id' => 'getMerchantId',
        'incoming_date' => 'getIncomingDate',
        'dba_name' => 'getDbaName',
        'batch_id' => 'getBatchId',
        'card_number' => 'getCardNumber',
        'card_type' => 'getCardType',
        'tran_date' => 'getTranDate',
        'amt_tran' => 'getAmtTran',
        'amt_dispute' => 'getAmtDispute',
        'tran_currency' => 'getTranCurrency',
        'purchase_id' => 'getPurchaseId',
        'merch_ref_num' => 'getMerchRefNum',
        'pg_id' => 'getPgId',
        'auth_code' => 'getAuthCode',
        'reason_code' => 'getReasonCode',
        'rec_id_linked' => 'getRecIdLinked',
        'auth_avs_result' => 'getAuthAvsResult',
        'auth_cvv2_result' => 'getAuthCvv2Result',
        'card_number_original' => 'getCardNumberOriginal',
        'date_status_change' => 'getDateStatusChange'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const CARD_TYPE_VS = 'VS';
    const CARD_TYPE_MC = 'MC';
    const CARD_TYPE_DS = 'DS';
    const CARD_TYPE_AM = 'AM';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getCardTypeAllowableValues()
    {
        return [
            self::CARD_TYPE_VS,
            self::CARD_TYPE_MC,
            self::CARD_TYPE_DS,
            self::CARD_TYPE_AM,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['rec_id'] = isset($data['rec_id']) ? $data['rec_id'] : null;
        $this->container['data_type'] = isset($data['data_type']) ? $data['data_type'] : null;
        $this->container['merchant_id'] = isset($data['merchant_id']) ? $data['merchant_id'] : null;
        $this->container['incoming_date'] = isset($data['incoming_date']) ? $data['incoming_date'] : null;
        $this->container['dba_name'] = isset($data['dba_name']) ? $data['dba_name'] : null;
        $this->container['batch_id'] = isset($data['batch_id']) ? $data['batch_id'] : null;
        $this->container['card_number'] = isset($data['card_number']) ? $data['card_number'] : null;
        $this->container['card_type'] = isset($data['card_type']) ? $data['card_type'] : null;
        $this->container['tran_date'] = isset($data['tran_date']) ? $data['tran_date'] : null;
        $this->container['amt_tran'] = isset($data['amt_tran']) ? $data['amt_tran'] : null;
        $this->container['amt_dispute'] = isset($data['amt_dispute']) ? $data['amt_dispute'] : null;
        $this->container['tran_currency'] = isset($data['tran_currency']) ? $data['tran_currency'] : null;
        $this->container['purchase_id'] = isset($data['purchase_id']) ? $data['purchase_id'] : null;
        $this->container['merch_ref_num'] = isset($data['merch_ref_num']) ? $data['merch_ref_num'] : null;
        $this->container['pg_id'] = isset($data['pg_id']) ? $data['pg_id'] : null;
        $this->container['auth_code'] = isset($data['auth_code']) ? $data['auth_code'] : null;
        $this->container['reason_code'] = isset($data['reason_code']) ? $data['reason_code'] : null;
        $this->container['rec_id_linked'] = isset($data['rec_id_linked']) ? $data['rec_id_linked'] : null;
        $this->container['auth_avs_result'] = isset($data['auth_avs_result']) ? $data['auth_avs_result'] : null;
        $this->container['auth_cvv2_result'] = isset($data['auth_cvv2_result']) ? $data['auth_cvv2_result'] : null;
        $this->container['card_number_original'] = isset($data['card_number_original']) ? $data['card_number_original'] : null;
        $this->container['date_status_change'] = isset($data['date_status_change']) ? $data['date_status_change'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['rec_id'] === null) {
            $invalidProperties[] = "'rec_id' can't be null";
        }
        if ($this->container['data_type'] === null) {
            $invalidProperties[] = "'data_type' can't be null";
        }
        if ($this->container['merchant_id'] === null) {
            $invalidProperties[] = "'merchant_id' can't be null";
        }
        if ($this->container['incoming_date'] === null) {
            $invalidProperties[] = "'incoming_date' can't be null";
        }
        if ($this->container['dba_name'] === null) {
            $invalidProperties[] = "'dba_name' can't be null";
        }
        if ($this->container['batch_id'] === null) {
            $invalidProperties[] = "'batch_id' can't be null";
        }
        if ($this->container['card_number'] === null) {
            $invalidProperties[] = "'card_number' can't be null";
        }
        if ($this->container['card_type'] === null) {
            $invalidProperties[] = "'card_type' can't be null";
        }
        $allowedValues = $this->getCardTypeAllowableValues();
        if (!in_array($this->container['card_type'], $allowedValues)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'card_type', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['tran_date'] === null) {
            $invalidProperties[] = "'tran_date' can't be null";
        }
        if ($this->container['amt_tran'] === null) {
            $invalidProperties[] = "'amt_tran' can't be null";
        }
        if ($this->container['amt_dispute'] === null) {
            $invalidProperties[] = "'amt_dispute' can't be null";
        }
        if ($this->container['tran_currency'] === null) {
            $invalidProperties[] = "'tran_currency' can't be null";
        }
        if ($this->container['purchase_id'] === null) {
            $invalidProperties[] = "'purchase_id' can't be null";
        }
        if ($this->container['merch_ref_num'] === null) {
            $invalidProperties[] = "'merch_ref_num' can't be null";
        }
        if ($this->container['pg_id'] === null) {
            $invalidProperties[] = "'pg_id' can't be null";
        }
        if ($this->container['auth_code'] === null) {
            $invalidProperties[] = "'auth_code' can't be null";
        }
        if ($this->container['reason_code'] === null) {
            $invalidProperties[] = "'reason_code' can't be null";
        }
        if ($this->container['rec_id_linked'] === null) {
            $invalidProperties[] = "'rec_id_linked' can't be null";
        }
        if ($this->container['auth_avs_result'] === null) {
            $invalidProperties[] = "'auth_avs_result' can't be null";
        }
        if ($this->container['auth_cvv2_result'] === null) {
            $invalidProperties[] = "'auth_cvv2_result' can't be null";
        }
        if ($this->container['card_number_original'] === null) {
            $invalidProperties[] = "'card_number_original' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        if ($this->container['rec_id'] === null) {
            return false;
        }
        if ($this->container['data_type'] === null) {
            return false;
        }
        if ($this->container['merchant_id'] === null) {
            return false;
        }
        if ($this->container['incoming_date'] === null) {
            return false;
        }
        if ($this->container['dba_name'] === null) {
            return false;
        }
        if ($this->container['batch_id'] === null) {
            return false;
        }
        if ($this->container['card_number'] === null) {
            return false;
        }
        if ($this->container['card_type'] === null) {
            return false;
        }
        $allowedValues = $this->getCardTypeAllowableValues();
        if (!in_array($this->container['card_type'], $allowedValues)) {
            return false;
        }
        if ($this->container['tran_date'] === null) {
            return false;
        }
        if ($this->container['amt_tran'] === null) {
            return false;
        }
        if ($this->container['amt_dispute'] === null) {
            return false;
        }
        if ($this->container['tran_currency'] === null) {
            return false;
        }
        if ($this->container['purchase_id'] === null) {
            return false;
        }
        if ($this->container['merch_ref_num'] === null) {
            return false;
        }
        if ($this->container['pg_id'] === null) {
            return false;
        }
        if ($this->container['auth_code'] === null) {
            return false;
        }
        if ($this->container['reason_code'] === null) {
            return false;
        }
        if ($this->container['rec_id_linked'] === null) {
            return false;
        }
        if ($this->container['auth_avs_result'] === null) {
            return false;
        }
        if ($this->container['auth_cvv2_result'] === null) {
            return false;
        }
        if ($this->container['card_number_original'] === null) {
            return false;
        }
        return true;
    }


    /**
     * Gets rec_id
     *
     * @return int
     */
    public function getRecId()
    {
        return $this->container['rec_id'];
    }

    /**
     * Sets rec_id
     *
     * @param int $rec_id Unique ID assigned by Qualpay to this deposit.
     *
     * @return $this
     */
    public function setRecId($rec_id)
    {
        $this->container['rec_id'] = $rec_id;

        return $this;
    }

    /**
     * Gets data_type
     *
     * @return string
     */
    public function getDataType()
    {
        return $this->container['data_type'];
    }

    /**
     * Sets data_type
     *
     * @param string $data_type The type of dispute. For all types, please see <a href=\"/developer/api/reference#data_type\" target=\"_blank\">Dispute Types</a>.
     *
     * @return $this
     */
    public function setDataType($data_type)
    {
        $this->container['data_type'] = $data_type;

        return $this;
    }

    /**
     * Gets merchant_id
     *
     * @return int
     */
    public function getMerchantId()
    {
        return $this->container['merchant_id'];
    }

    /**
     * Sets merchant_id
     *
     * @param int $merchant_id Unique ID assigned by Qualpay to a Merchant.
     *
     * @return $this
     */
    public function setMerchantId($merchant_id)
    {
        $this->container['merchant_id'] = $merchant_id;

        return $this;
    }

    /**
     * Gets incoming_date
     *
     * @return string
     */
    public function getIncomingDate()
    {
        return $this->container['incoming_date'];
    }

    /**
     * Sets incoming_date
     *
     * @param string $incoming_date The date Qualpay received the dispute from the card issuer.
     *
     * @return $this
     */
    public function setIncomingDate($incoming_date)
    {
        $this->container['incoming_date'] = $incoming_date;

        return $this;
    }

    /**
     * Gets dba_name
     *
     * @return string
     */
    public function getDbaName()
    {
        return $this->container['dba_name'];
    }

    /**
     * Sets dba_name
     *
     * @param string $dba_name The doing business as name of the merchant.
     *
     * @return $this
     */
    public function setDbaName($dba_name)
    {
        $this->container['dba_name'] = $dba_name;

        return $this;
    }

    /**
     * Gets batch_id
     *
     * @return int
     */
    public function getBatchId()
    {
        return $this->container['batch_id'];
    }

    /**
     * Sets batch_id
     *
     * @param int $batch_id Unique ID assigned by Qualpay to this batch.
     *
     * @return $this
     */
    public function setBatchId($batch_id)
    {
        $this->container['batch_id'] = $batch_id;

        return $this;
    }

    /**
     * Gets card_number
     *
     * @return string
     */
    public function getCardNumber()
    {
        return $this->container['card_number'];
    }

    /**
     * Sets card_number
     *
     * @param string $card_number The truncated card number of the dispute.
     *
     * @return $this
     */
    public function setCardNumber($card_number)
    {
        $this->container['card_number'] = $card_number;

        return $this;
    }

    /**
     * Gets card_type
     *
     * @return string
     */
    public function getCardType()
    {
        return $this->container['card_type'];
    }

    /**
     * Sets card_type
     *
     * @param string $card_type The card brand of this dispute.
     *
     * @return $this
     */
    public function setCardType($card_type)
    {
        $allowedValues = $this->getCardTypeAllowableValues();
        if (!in_array($card_type, $allowedValues)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'card_type', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['card_type'] = $card_type;

        return $this;
    }

    /**
     * Gets tran_date
     *
     * @return string
     */
    public function getTranDate()
    {
        return $this->container['tran_date'];
    }

    /**
     * Sets tran_date
     *
     * @param string $tran_date The date the initial transaction occured on.
     *
     * @return $this
     */
    public function setTranDate($tran_date)
    {
        $this->container['tran_date'] = $tran_date;

        return $this;
    }

    /**
     * Gets amt_tran
     *
     * @return string
     */
    public function getAmtTran()
    {
        return $this->container['amt_tran'];
    }

    /**
     * Sets amt_tran
     *
     * @param string $amt_tran The amount of the original settled transaction.
     *
     * @return $this
     */
    public function setAmtTran($amt_tran)
    {
        $this->container['amt_tran'] = $amt_tran;

        return $this;
    }

    /**
     * Gets amt_dispute
     *
     * @return string
     */
    public function getAmtDispute()
    {
        return $this->container['amt_dispute'];
    }

    /**
     * Sets amt_dispute
     *
     * @param string $amt_dispute The amount of the dispute: equal to, or less than the amt_tran (when in USD).
     *
     * @return $this
     */
    public function setAmtDispute($amt_dispute)
    {
        $this->container['amt_dispute'] = $amt_dispute;

        return $this;
    }

    /**
     * Gets tran_currency
     *
     * @return string
     */
    public function getTranCurrency()
    {
        return $this->container['tran_currency'];
    }

    /**
     * Sets tran_currency
     *
     * @param string $tran_currency The ISO 4217 numeric currency code of the dispute.
     *
     * @return $this
     */
    public function setTranCurrency($tran_currency)
    {
        $this->container['tran_currency'] = $tran_currency;

        return $this;
    }

    /**
     * Gets purchase_id
     *
     * @return string
     */
    public function getPurchaseId()
    {
        return $this->container['purchase_id'];
    }

    /**
     * Sets purchase_id
     *
     * @param string $purchase_id A merchant supplied tracking number, generally an invoice or purchase number. This number may be visible to the cardholder, depending on card issuer.
     *
     * @return $this
     */
    public function setPurchaseId($purchase_id)
    {
        $this->container['purchase_id'] = $purchase_id;

        return $this;
    }

    /**
     * Gets merch_ref_num
     *
     * @return string
     */
    public function getMerchRefNum()
    {
        return $this->container['merch_ref_num'];
    }

    /**
     * Sets merch_ref_num
     *
     * @param string $merch_ref_num A merchant supplied tracking number which is stored by Qualpay, and does not pass to the card issuer.
     *
     * @return $this
     */
    public function setMerchRefNum($merch_ref_num)
    {
        $this->container['merch_ref_num'] = $merch_ref_num;

        return $this;
    }

    /**
     * Gets pg_id
     *
     * @return string
     */
    public function getPgId()
    {
        return $this->container['pg_id'];
    }

    /**
     * Sets pg_id
     *
     * @param string $pg_id If the transaction originated through the Qualpay Virtual Terminal, or Qualpay Payment Gateway, this is the tracking ID returned in the gateway response.
     *
     * @return $this
     */
    public function setPgId($pg_id)
    {
        $this->container['pg_id'] = $pg_id;

        return $this;
    }

    /**
     * Gets auth_code
     *
     * @return string
     */
    public function getAuthCode()
    {
        return $this->container['auth_code'];
    }

    /**
     * Sets auth_code
     *
     * @param string $auth_code The authorization code provided by the card issuer when the card was approved.
     *
     * @return $this
     */
    public function setAuthCode($auth_code)
    {
        $this->container['auth_code'] = $auth_code;

        return $this;
    }

    /**
     * Gets reason_code
     *
     * @return string
     */
    public function getReasonCode()
    {
        return $this->container['reason_code'];
    }

    /**
     * Sets reason_code
     *
     * @param string $reason_code The card association reason why the dispute was issued.
     *
     * @return $this
     */
    public function setReasonCode($reason_code)
    {
        $this->container['reason_code'] = $reason_code;

        return $this;
    }

    /**
     * Gets rec_id_linked
     *
     * @return string
     */
    public function getRecIdLinked()
    {
        return $this->container['rec_id_linked'];
    }

    /**
     * Sets rec_id_linked
     *
     * @param string $rec_id_linked TODO
     *
     * @return $this
     */
    public function setRecIdLinked($rec_id_linked)
    {
        $this->container['rec_id_linked'] = $rec_id_linked;

        return $this;
    }

    /**
     * Gets auth_avs_result
     *
     * @return string
     */
    public function getAuthAvsResult()
    {
        return $this->container['auth_avs_result'];
    }

    /**
     * Sets auth_avs_result
     *
     * @param string $auth_avs_result The AVS (address validation service) match code of the original transaction.
     *
     * @return $this
     */
    public function setAuthAvsResult($auth_avs_result)
    {
        $this->container['auth_avs_result'] = $auth_avs_result;

        return $this;
    }

    /**
     * Gets auth_cvv2_result
     *
     * @return string
     */
    public function getAuthCvv2Result()
    {
        return $this->container['auth_cvv2_result'];
    }

    /**
     * Sets auth_cvv2_result
     *
     * @param string $auth_cvv2_result The CVV2 match code of the original transaction.
     *
     * @return $this
     */
    public function setAuthCvv2Result($auth_cvv2_result)
    {
        $this->container['auth_cvv2_result'] = $auth_cvv2_result;

        return $this;
    }

    /**
     * Gets card_number_original
     *
     * @return string
     */
    public function getCardNumberOriginal()
    {
        return $this->container['card_number_original'];
    }

    /**
     * Sets card_number_original
     *
     * @param string $card_number_original The truncated card number of the original captured transactions. In some rare cases a dispute may be issued on a different card than the original. This can occur when, for example, the card was was re-issued between the transaction date, and the dispute date.
     *
     * @return $this
     */
    public function setCardNumberOriginal($card_number_original)
    {
        $this->container['card_number_original'] = $card_number_original;

        return $this;
    }

    /**
     * Gets date_status_change
     *
     * @return string
     */
    public function getDateStatusChange()
    {
        return $this->container['date_status_change'];
    }

    /**
     * Sets date_status_change
     *
     * @param string $date_status_change Records dispute status date. The dispute status of a dispute record will change over time and as a result of merchant actions.
     *
     * @return $this
     */
    public function setDateStatusChange($date_status_change)
    {
        $this->container['date_status_change'] = $date_status_change;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


