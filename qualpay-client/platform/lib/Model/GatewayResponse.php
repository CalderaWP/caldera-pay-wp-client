<?php
/**
 * GatewayResponse
 *
 * PHP version 5
 *
 * @category Class
 * @package  calderaPayQualpayPlatform
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Qualpay Platform API
 *
 * This document describes the Qualpay Platform API.
 *
 * OpenAPI spec version: 1.1.9
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.3.1
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace calderaPayQualpayPlatform\Model;

use \ArrayAccess;
use \calderaPayQualpayPlatform\ObjectSerializer;

/**
 * GatewayResponse Class Doc Comment
 *
 * @category Class
 * @package  calderaPayQualpayPlatform
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class GatewayResponse implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'GatewayResponse';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'pg_id' => 'string',
        'rcode' => 'string',
        'rmsg' => 'string',
        'status' => 'string',
        'auth_code' => 'string',
        'card_number' => 'string',
        'tran_time' => 'string',
        'amt_tran' => 'double',
        'purchase_id' => 'string',
        'cvv2_result' => 'string',
        'avs_result' => 'string',
        'duration' => 'int',
        'http_status' => 'int',
        'merchant_id' => 'int',
        'profile_id' => 'string',
        'merch_ref_num' => 'string',
        'tran_currency' => 'string',
        'dba_name' => 'string',
        'customer_id' => 'string',
        'customer' => '\calderaPayQualpayPlatform\Model\CheckoutCustomer'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'pg_id' => null,
        'rcode' => null,
        'rmsg' => null,
        'status' => null,
        'auth_code' => null,
        'card_number' => null,
        'tran_time' => null,
        'amt_tran' => 'double',
        'purchase_id' => null,
        'cvv2_result' => null,
        'avs_result' => null,
        'duration' => 'int32',
        'http_status' => 'int32',
        'merchant_id' => 'int64',
        'profile_id' => null,
        'merch_ref_num' => null,
        'tran_currency' => null,
        'dba_name' => null,
        'customer_id' => null,
        'customer' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'pg_id' => 'pg_id',
        'rcode' => 'rcode',
        'rmsg' => 'rmsg',
        'status' => 'status',
        'auth_code' => 'auth_code',
        'card_number' => 'card_number',
        'tran_time' => 'tran_time',
        'amt_tran' => 'amt_tran',
        'purchase_id' => 'purchase_id',
        'cvv2_result' => 'cvv2_result',
        'avs_result' => 'avs_result',
        'duration' => 'duration',
        'http_status' => 'http_status',
        'merchant_id' => 'merchant_id',
        'profile_id' => 'profile_id',
        'merch_ref_num' => 'merch_ref_num',
        'tran_currency' => 'tran_currency',
        'dba_name' => 'dba_name',
        'customer_id' => 'customer_id',
        'customer' => 'customer'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'pg_id' => 'setPgId',
        'rcode' => 'setRcode',
        'rmsg' => 'setRmsg',
        'status' => 'setStatus',
        'auth_code' => 'setAuthCode',
        'card_number' => 'setCardNumber',
        'tran_time' => 'setTranTime',
        'amt_tran' => 'setAmtTran',
        'purchase_id' => 'setPurchaseId',
        'cvv2_result' => 'setCvv2Result',
        'avs_result' => 'setAvsResult',
        'duration' => 'setDuration',
        'http_status' => 'setHttpStatus',
        'merchant_id' => 'setMerchantId',
        'profile_id' => 'setProfileId',
        'merch_ref_num' => 'setMerchRefNum',
        'tran_currency' => 'setTranCurrency',
        'dba_name' => 'setDbaName',
        'customer_id' => 'setCustomerId',
        'customer' => 'setCustomer'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'pg_id' => 'getPgId',
        'rcode' => 'getRcode',
        'rmsg' => 'getRmsg',
        'status' => 'getStatus',
        'auth_code' => 'getAuthCode',
        'card_number' => 'getCardNumber',
        'tran_time' => 'getTranTime',
        'amt_tran' => 'getAmtTran',
        'purchase_id' => 'getPurchaseId',
        'cvv2_result' => 'getCvv2Result',
        'avs_result' => 'getAvsResult',
        'duration' => 'getDuration',
        'http_status' => 'getHttpStatus',
        'merchant_id' => 'getMerchantId',
        'profile_id' => 'getProfileId',
        'merch_ref_num' => 'getMerchRefNum',
        'tran_currency' => 'getTranCurrency',
        'dba_name' => 'getDbaName',
        'customer_id' => 'getCustomerId',
        'customer' => 'getCustomer'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const STATUS_APPROVED = 'Approved';
    const STATUS_DECLINED = 'Declined';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getStatusAllowableValues()
    {
        return [
            self::STATUS_APPROVED,
            self::STATUS_DECLINED,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['pg_id'] = isset($data['pg_id']) ? $data['pg_id'] : null;
        $this->container['rcode'] = isset($data['rcode']) ? $data['rcode'] : null;
        $this->container['rmsg'] = isset($data['rmsg']) ? $data['rmsg'] : null;
        $this->container['status'] = isset($data['status']) ? $data['status'] : null;
        $this->container['auth_code'] = isset($data['auth_code']) ? $data['auth_code'] : null;
        $this->container['card_number'] = isset($data['card_number']) ? $data['card_number'] : null;
        $this->container['tran_time'] = isset($data['tran_time']) ? $data['tran_time'] : null;
        $this->container['amt_tran'] = isset($data['amt_tran']) ? $data['amt_tran'] : null;
        $this->container['purchase_id'] = isset($data['purchase_id']) ? $data['purchase_id'] : null;
        $this->container['cvv2_result'] = isset($data['cvv2_result']) ? $data['cvv2_result'] : null;
        $this->container['avs_result'] = isset($data['avs_result']) ? $data['avs_result'] : null;
        $this->container['duration'] = isset($data['duration']) ? $data['duration'] : null;
        $this->container['http_status'] = isset($data['http_status']) ? $data['http_status'] : null;
        $this->container['merchant_id'] = isset($data['merchant_id']) ? $data['merchant_id'] : null;
        $this->container['profile_id'] = isset($data['profile_id']) ? $data['profile_id'] : null;
        $this->container['merch_ref_num'] = isset($data['merch_ref_num']) ? $data['merch_ref_num'] : null;
        $this->container['tran_currency'] = isset($data['tran_currency']) ? $data['tran_currency'] : null;
        $this->container['dba_name'] = isset($data['dba_name']) ? $data['dba_name'] : null;
        $this->container['customer_id'] = isset($data['customer_id']) ? $data['customer_id'] : null;
        $this->container['customer'] = isset($data['customer']) ? $data['customer'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getStatusAllowableValues();
        if (!in_array($this->container['status'], $allowedValues)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'status', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        $allowedValues = $this->getStatusAllowableValues();
        if (!in_array($this->container['status'], $allowedValues)) {
            return false;
        }
        return true;
    }


    /**
     * Gets pg_id
     *
     * @return string
     */
    public function getPgId()
    {
        return $this->container['pg_id'];
    }

    /**
     * Sets pg_id
     *
     * @param string $pg_id Qualpay generated Payment gateway ID for the transaction
     *
     * @return $this
     */
    public function setPgId($pg_id)
    {
        $this->container['pg_id'] = $pg_id;

        return $this;
    }

    /**
     * Gets rcode
     *
     * @return string
     */
    public function getRcode()
    {
        return $this->container['rcode'];
    }

    /**
     * Sets rcode
     *
     * @param string $rcode Gateway Response Code. Refer to <a href=\"/developer/api/reference#gateway-response-codes\"target=\"_blank\">Payment Gateway Response Codes</a> for Gateway Response Codes and their description.
     *
     * @return $this
     */
    public function setRcode($rcode)
    {
        $this->container['rcode'] = $rcode;

        return $this;
    }

    /**
     * Gets rmsg
     *
     * @return string
     */
    public function getRmsg()
    {
        return $this->container['rmsg'];
    }

    /**
     * Sets rmsg
     *
     * @param string $rmsg A short description of the Response Code. Refer to <a href=\"/developer/api/reference#gateway-response-codes\"target=\"_blank\">Payment Gateway Response Codes</a> for Gateway Response Codes and their description.
     *
     * @return $this
     */
    public function setRmsg($rmsg)
    {
        $this->container['rmsg'] = $rmsg;

        return $this;
    }

    /**
     * Gets status
     *
     * @return string
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param string $status Status of Gateway Transaction
     *
     * @return $this
     */
    public function setStatus($status)
    {
        $allowedValues = $this->getStatusAllowableValues();
        if (!is_null($status) && !in_array($status, $allowedValues)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'status', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets auth_code
     *
     * @return string
     */
    public function getAuthCode()
    {
        return $this->container['auth_code'];
    }

    /**
     * Sets auth_code
     *
     * @param string $auth_code Authorization Code from Issuer
     *
     * @return $this
     */
    public function setAuthCode($auth_code)
    {
        $this->container['auth_code'] = $auth_code;

        return $this;
    }

    /**
     * Gets card_number
     *
     * @return string
     */
    public function getCardNumber()
    {
        return $this->container['card_number'];
    }

    /**
     * Sets card_number
     *
     * @param string $card_number Masked Card Number used in transaction.
     *
     * @return $this
     */
    public function setCardNumber($card_number)
    {
        $this->container['card_number'] = $card_number;

        return $this;
    }

    /**
     * Gets tran_time
     *
     * @return string
     */
    public function getTranTime()
    {
        return $this->container['tran_time'];
    }

    /**
     * Sets tran_time
     *
     * @param string $tran_time Transaction Time in YYYY-MM-DD HH:MM:ss. All Times are Pacific Time.
     *
     * @return $this
     */
    public function setTranTime($tran_time)
    {
        $this->container['tran_time'] = $tran_time;

        return $this;
    }

    /**
     * Gets amt_tran
     *
     * @return double
     */
    public function getAmtTran()
    {
        return $this->container['amt_tran'];
    }

    /**
     * Sets amt_tran
     *
     * @param double $amt_tran Transaction Amount
     *
     * @return $this
     */
    public function setAmtTran($amt_tran)
    {
        $this->container['amt_tran'] = $amt_tran;

        return $this;
    }

    /**
     * Gets purchase_id
     *
     * @return string
     */
    public function getPurchaseId()
    {
        return $this->container['purchase_id'];
    }

    /**
     * Sets purchase_id
     *
     * @param string $purchase_id Purchase ID of the transaction
     *
     * @return $this
     */
    public function setPurchaseId($purchase_id)
    {
        $this->container['purchase_id'] = $purchase_id;

        return $this;
    }

    /**
     * Gets cvv2_result
     *
     * @return string
     */
    public function getCvv2Result()
    {
        return $this->container['cvv2_result'];
    }

    /**
     * Sets cvv2_result
     *
     * @param string $cvv2_result If CVV is sent, then the result from the card issuer will be returned in this field. Refer to <a href=\"/developer/api/reference#cvv2-result-codes\"target=\"_blank\">Payment Result Codes for CVV2</a> for valid CVV2 result codes.
     *
     * @return $this
     */
    public function setCvv2Result($cvv2_result)
    {
        $this->container['cvv2_result'] = $cvv2_result;

        return $this;
    }

    /**
     * Gets avs_result
     *
     * @return string
     */
    public function getAvsResult()
    {
        return $this->container['avs_result'];
    }

    /**
     * Sets avs_result
     *
     * @param string $avs_result If the billing_zip (and optionally the billing_street_addr1) is sent, then the result from the card issuer will be returned in this field. Refer to <a href=\"/developer/api/reference#avs-result-codes\"target=\"_blank\">Payment Result Codes for AVS</a> for
     *
     * @return $this
     */
    public function setAvsResult($avs_result)
    {
        $this->container['avs_result'] = $avs_result;

        return $this;
    }

    /**
     * Gets duration
     *
     * @return int
     */
    public function getDuration()
    {
        return $this->container['duration'];
    }

    /**
     * Sets duration
     *
     * @param int $duration Duration of Gateway request in ms
     *
     * @return $this
     */
    public function setDuration($duration)
    {
        $this->container['duration'] = $duration;

        return $this;
    }

    /**
     * Gets http_status
     *
     * @return int
     */
    public function getHttpStatus()
    {
        return $this->container['http_status'];
    }

    /**
     * Sets http_status
     *
     * @param int $http_status HTTP Status of the Payment Gateway Request.
     *
     * @return $this
     */
    public function setHttpStatus($http_status)
    {
        $this->container['http_status'] = $http_status;

        return $this;
    }

    /**
     * Gets merchant_id
     *
     * @return int
     */
    public function getMerchantId()
    {
        return $this->container['merchant_id'];
    }

    /**
     * Sets merchant_id
     *
     * @param int $merchant_id Unique ID assigned by Qualpay to a Merchant
     *
     * @return $this
     */
    public function setMerchantId($merchant_id)
    {
        $this->container['merchant_id'] = $merchant_id;

        return $this;
    }

    /**
     * Gets profile_id
     *
     * @return string
     */
    public function getProfileId()
    {
        return $this->container['profile_id'];
    }

    /**
     * Sets profile_id
     *
     * @param string $profile_id The unique profile ID used in the payment gateway requests
     *
     * @return $this
     */
    public function setProfileId($profile_id)
    {
        $this->container['profile_id'] = $profile_id;

        return $this;
    }

    /**
     * Gets merch_ref_num
     *
     * @return string
     */
    public function getMerchRefNum()
    {
        return $this->container['merch_ref_num'];
    }

    /**
     * Sets merch_ref_num
     *
     * @param string $merch_ref_num This field contains a merchant provided reference value that will be stored with the transaction data and will be included with the transaction data reported in the Qualpay Manager. This value will also be attached to any lifecycle transactions (e.g. retrieval requests and chargebacks) that may occur.
     *
     * @return $this
     */
    public function setMerchRefNum($merch_ref_num)
    {
        $this->container['merch_ref_num'] = $merch_ref_num;

        return $this;
    }

    /**
     * Gets tran_currency
     *
     * @return string
     */
    public function getTranCurrency()
    {
        return $this->container['tran_currency'];
    }

    /**
     * Sets tran_currency
     *
     * @param string $tran_currency This field contains the ISO numeric currency code for the transaction.  If the profile_id field is provided, this field will be overridden by the profile’s tran_currency.
     *
     * @return $this
     */
    public function setTranCurrency($tran_currency)
    {
        $this->container['tran_currency'] = $tran_currency;

        return $this;
    }

    /**
     * Gets dba_name
     *
     * @return string
     */
    public function getDbaName()
    {
        return $this->container['dba_name'];
    }

    /**
     * Sets dba_name
     *
     * @param string $dba_name DBA name associated with the profile
     *
     * @return $this
     */
    public function setDbaName($dba_name)
    {
        $this->container['dba_name'] = $dba_name;

        return $this;
    }

    /**
     * Gets customer_id
     *
     * @return string
     */
    public function getCustomerId()
    {
        return $this->container['customer_id'];
    }

    /**
     * Sets customer_id
     *
     * @param string $customer_id Unique ID established by merchant to identify a customer. Customer ID is included in the response if it is sent in the request.
     *
     * @return $this
     */
    public function setCustomerId($customer_id)
    {
        $this->container['customer_id'] = $customer_id;

        return $this;
    }

    /**
     * Gets customer
     *
     * @return \calderaPayQualpayPlatform\Model\CheckoutCustomer
     */
    public function getCustomer()
    {
        return $this->container['customer'];
    }

    /**
     * Sets customer
     *
     * @param \calderaPayQualpayPlatform\Model\CheckoutCustomer $customer The customer data input by the user for this transaction in the checkout page.  Applicable only for Qualpay Checkout transactions.
     *
     * @return $this
     */
    public function setCustomer($customer)
    {
        $this->container['customer'] = $customer;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


