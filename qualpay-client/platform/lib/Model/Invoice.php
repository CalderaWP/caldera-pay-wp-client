<?php
/**
 * Invoice
 *
 * PHP version 5
 *
 * @category Class
 * @package  calderaPayQualpayPlatform
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Qualpay Platform API
 *
 * This document describes the Qualpay Platform API.
 *
 * OpenAPI spec version: 1.1.9
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.3.1
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace calderaPayQualpayPlatform\Model;

use \ArrayAccess;
use \calderaPayQualpayPlatform\ObjectSerializer;

/**
 * Invoice Class Doc Comment
 *
 * @category Class
 * @package  calderaPayQualpayPlatform
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class Invoice implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'Invoice';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'invoice_id' => 'int',
        'merchant_id' => 'int',
        'customer_id' => 'string',
        'from_contact' => '\calderaPayQualpayPlatform\Model\Contact',
        'billing_contact' => '\calderaPayQualpayPlatform\Model\Contact',
        'invoice_number' => 'string',
        'status' => 'string',
        'amt_tran' => 'double',
        'amt_tax' => 'double',
        'amt_sub_total' => 'double',
        'amt_paid' => 'double',
        'amt_balance' => 'double',
        'profile_id' => 'string',
        'tran_currency' => 'string',
        'footer_note' => 'string',
        'payment_terms_note' => 'string',
        'checkout_settings' => '\calderaPayQualpayPlatform\Model\CheckoutSettings',
        'invoice_link' => 'string',
        'sales_tax' => '\calderaPayQualpayPlatform\Model\SalesTax',
        'payment_terms' => '\calderaPayQualpayPlatform\Model\PaymentTerm',
        'date_invoice' => 'string',
        'line_items' => '\calderaPayQualpayPlatform\Model\LineItem[]',
        'date_payment' => 'string',
        'date_due' => 'string',
        'date_last_view' => 'string',
        'date_sent' => 'string',
        'date_notice' => 'string',
        'db_timestamp' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'invoice_id' => 'int64',
        'merchant_id' => 'int64',
        'customer_id' => null,
        'from_contact' => null,
        'billing_contact' => null,
        'invoice_number' => null,
        'status' => null,
        'amt_tran' => 'double',
        'amt_tax' => 'double',
        'amt_sub_total' => 'double',
        'amt_paid' => 'double',
        'amt_balance' => 'double',
        'profile_id' => null,
        'tran_currency' => null,
        'footer_note' => null,
        'payment_terms_note' => null,
        'checkout_settings' => null,
        'invoice_link' => null,
        'sales_tax' => null,
        'payment_terms' => null,
        'date_invoice' => null,
        'line_items' => null,
        'date_payment' => null,
        'date_due' => null,
        'date_last_view' => null,
        'date_sent' => null,
        'date_notice' => null,
        'db_timestamp' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'invoice_id' => 'invoice_id',
        'merchant_id' => 'merchant_id',
        'customer_id' => 'customer_id',
        'from_contact' => 'from_contact',
        'billing_contact' => 'billing_contact',
        'invoice_number' => 'invoice_number',
        'status' => 'status',
        'amt_tran' => 'amt_tran',
        'amt_tax' => 'amt_tax',
        'amt_sub_total' => 'amt_sub_total',
        'amt_paid' => 'amt_paid',
        'amt_balance' => 'amt_balance',
        'profile_id' => 'profile_id',
        'tran_currency' => 'tran_currency',
        'footer_note' => 'footer_note',
        'payment_terms_note' => 'payment_terms_note',
        'checkout_settings' => 'checkout_settings',
        'invoice_link' => 'invoice_link',
        'sales_tax' => 'sales_tax',
        'payment_terms' => 'payment_terms',
        'date_invoice' => 'date_invoice',
        'line_items' => 'line_items',
        'date_payment' => 'date_payment',
        'date_due' => 'date_due',
        'date_last_view' => 'date_last_view',
        'date_sent' => 'date_sent',
        'date_notice' => 'date_notice',
        'db_timestamp' => 'db_timestamp'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'invoice_id' => 'setInvoiceId',
        'merchant_id' => 'setMerchantId',
        'customer_id' => 'setCustomerId',
        'from_contact' => 'setFromContact',
        'billing_contact' => 'setBillingContact',
        'invoice_number' => 'setInvoiceNumber',
        'status' => 'setStatus',
        'amt_tran' => 'setAmtTran',
        'amt_tax' => 'setAmtTax',
        'amt_sub_total' => 'setAmtSubTotal',
        'amt_paid' => 'setAmtPaid',
        'amt_balance' => 'setAmtBalance',
        'profile_id' => 'setProfileId',
        'tran_currency' => 'setTranCurrency',
        'footer_note' => 'setFooterNote',
        'payment_terms_note' => 'setPaymentTermsNote',
        'checkout_settings' => 'setCheckoutSettings',
        'invoice_link' => 'setInvoiceLink',
        'sales_tax' => 'setSalesTax',
        'payment_terms' => 'setPaymentTerms',
        'date_invoice' => 'setDateInvoice',
        'line_items' => 'setLineItems',
        'date_payment' => 'setDatePayment',
        'date_due' => 'setDateDue',
        'date_last_view' => 'setDateLastView',
        'date_sent' => 'setDateSent',
        'date_notice' => 'setDateNotice',
        'db_timestamp' => 'setDbTimestamp'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'invoice_id' => 'getInvoiceId',
        'merchant_id' => 'getMerchantId',
        'customer_id' => 'getCustomerId',
        'from_contact' => 'getFromContact',
        'billing_contact' => 'getBillingContact',
        'invoice_number' => 'getInvoiceNumber',
        'status' => 'getStatus',
        'amt_tran' => 'getAmtTran',
        'amt_tax' => 'getAmtTax',
        'amt_sub_total' => 'getAmtSubTotal',
        'amt_paid' => 'getAmtPaid',
        'amt_balance' => 'getAmtBalance',
        'profile_id' => 'getProfileId',
        'tran_currency' => 'getTranCurrency',
        'footer_note' => 'getFooterNote',
        'payment_terms_note' => 'getPaymentTermsNote',
        'checkout_settings' => 'getCheckoutSettings',
        'invoice_link' => 'getInvoiceLink',
        'sales_tax' => 'getSalesTax',
        'payment_terms' => 'getPaymentTerms',
        'date_invoice' => 'getDateInvoice',
        'line_items' => 'getLineItems',
        'date_payment' => 'getDatePayment',
        'date_due' => 'getDateDue',
        'date_last_view' => 'getDateLastView',
        'date_sent' => 'getDateSent',
        'date_notice' => 'getDateNotice',
        'db_timestamp' => 'getDbTimestamp'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const STATUS_SAVED = 'SAVED';
    const STATUS_OUTSTANDING = 'OUTSTANDING';
    const STATUS_PAID = 'PAID';
    const STATUS_CANCELED = 'CANCELED';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getStatusAllowableValues()
    {
        return [
            self::STATUS_SAVED,
            self::STATUS_OUTSTANDING,
            self::STATUS_PAID,
            self::STATUS_CANCELED,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['invoice_id'] = isset($data['invoice_id']) ? $data['invoice_id'] : null;
        $this->container['merchant_id'] = isset($data['merchant_id']) ? $data['merchant_id'] : null;
        $this->container['customer_id'] = isset($data['customer_id']) ? $data['customer_id'] : null;
        $this->container['from_contact'] = isset($data['from_contact']) ? $data['from_contact'] : null;
        $this->container['billing_contact'] = isset($data['billing_contact']) ? $data['billing_contact'] : null;
        $this->container['invoice_number'] = isset($data['invoice_number']) ? $data['invoice_number'] : null;
        $this->container['status'] = isset($data['status']) ? $data['status'] : null;
        $this->container['amt_tran'] = isset($data['amt_tran']) ? $data['amt_tran'] : null;
        $this->container['amt_tax'] = isset($data['amt_tax']) ? $data['amt_tax'] : null;
        $this->container['amt_sub_total'] = isset($data['amt_sub_total']) ? $data['amt_sub_total'] : null;
        $this->container['amt_paid'] = isset($data['amt_paid']) ? $data['amt_paid'] : null;
        $this->container['amt_balance'] = isset($data['amt_balance']) ? $data['amt_balance'] : null;
        $this->container['profile_id'] = isset($data['profile_id']) ? $data['profile_id'] : null;
        $this->container['tran_currency'] = isset($data['tran_currency']) ? $data['tran_currency'] : null;
        $this->container['footer_note'] = isset($data['footer_note']) ? $data['footer_note'] : null;
        $this->container['payment_terms_note'] = isset($data['payment_terms_note']) ? $data['payment_terms_note'] : null;
        $this->container['checkout_settings'] = isset($data['checkout_settings']) ? $data['checkout_settings'] : null;
        $this->container['invoice_link'] = isset($data['invoice_link']) ? $data['invoice_link'] : null;
        $this->container['sales_tax'] = isset($data['sales_tax']) ? $data['sales_tax'] : null;
        $this->container['payment_terms'] = isset($data['payment_terms']) ? $data['payment_terms'] : null;
        $this->container['date_invoice'] = isset($data['date_invoice']) ? $data['date_invoice'] : null;
        $this->container['line_items'] = isset($data['line_items']) ? $data['line_items'] : null;
        $this->container['date_payment'] = isset($data['date_payment']) ? $data['date_payment'] : null;
        $this->container['date_due'] = isset($data['date_due']) ? $data['date_due'] : null;
        $this->container['date_last_view'] = isset($data['date_last_view']) ? $data['date_last_view'] : null;
        $this->container['date_sent'] = isset($data['date_sent']) ? $data['date_sent'] : null;
        $this->container['date_notice'] = isset($data['date_notice']) ? $data['date_notice'] : null;
        $this->container['db_timestamp'] = isset($data['db_timestamp']) ? $data['db_timestamp'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getStatusAllowableValues();
        if (!in_array($this->container['status'], $allowedValues)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'status', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        $allowedValues = $this->getStatusAllowableValues();
        if (!in_array($this->container['status'], $allowedValues)) {
            return false;
        }
        return true;
    }


    /**
     * Gets invoice_id
     *
     * @return int
     */
    public function getInvoiceId()
    {
        return $this->container['invoice_id'];
    }

    /**
     * Sets invoice_id
     *
     * @param int $invoice_id A unique number generated by Qualpay to identify an invoice. Save this id to manage an invoice.<br><strong>Maximum Length: </strong>10
     *
     * @return $this
     */
    public function setInvoiceId($invoice_id)
    {
        $this->container['invoice_id'] = $invoice_id;

        return $this;
    }

    /**
     * Gets merchant_id
     *
     * @return int
     */
    public function getMerchantId()
    {
        return $this->container['merchant_id'];
    }

    /**
     * Sets merchant_id
     *
     * @param int $merchant_id Unique ID assigned by Qualpay to a Merchant.<br><strong>Maximum Length: </strong>16
     *
     * @return $this
     */
    public function setMerchantId($merchant_id)
    {
        $this->container['merchant_id'] = $merchant_id;

        return $this;
    }

    /**
     * Gets customer_id
     *
     * @return string
     */
    public function getCustomerId()
    {
        return $this->container['customer_id'];
    }

    /**
     * Sets customer_id
     *
     * @param string $customer_id The Qualpay customer id associated with this invoice. <br><strong>Maximum Length: </strong>32
     *
     * @return $this
     */
    public function setCustomerId($customer_id)
    {
        $this->container['customer_id'] = $customer_id;

        return $this;
    }

    /**
     * Gets from_contact
     *
     * @return \calderaPayQualpayPlatform\Model\Contact
     */
    public function getFromContact()
    {
        return $this->container['from_contact'];
    }

    /**
     * Sets from_contact
     *
     * @param \calderaPayQualpayPlatform\Model\Contact $from_contact The merchant business contact information.
     *
     * @return $this
     */
    public function setFromContact($from_contact)
    {
        $this->container['from_contact'] = $from_contact;

        return $this;
    }

    /**
     * Gets billing_contact
     *
     * @return \calderaPayQualpayPlatform\Model\Contact
     */
    public function getBillingContact()
    {
        return $this->container['billing_contact'];
    }

    /**
     * Sets billing_contact
     *
     * @param \calderaPayQualpayPlatform\Model\Contact $billing_contact The customer contact information.
     *
     * @return $this
     */
    public function setBillingContact($billing_contact)
    {
        $this->container['billing_contact'] = $billing_contact;

        return $this;
    }

    /**
     * Gets invoice_number
     *
     * @return string
     */
    public function getInvoiceNumber()
    {
        return $this->container['invoice_number'];
    }

    /**
     * Sets invoice_number
     *
     * @param string $invoice_number The Invoice Number (also referred to as the purchase identifier) generated by the merchant. <br><strong>Maximum Length: </strong>25
     *
     * @return $this
     */
    public function setInvoiceNumber($invoice_number)
    {
        $this->container['invoice_number'] = $invoice_number;

        return $this;
    }

    /**
     * Gets status
     *
     * @return string
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param string $status Status of an invoice. Possible values are <br><strong>SAVED</strong> Invoice is in draft state. An invoice in draft state can be updated. <br><strong>OUTSTANDING</strong> Invoice has been mailed to the customer. Once an invoice is sent, only the billing_contact and from_contact can be updated.<br><strong>PAID</strong> Invoice has been paid completely. Once paid, the invoice is locked and cannot be modified. <br><strong>CANCELED</strong> Invoice has been canceled. Once canceled, the invoice is locked and cannot be modified. <br><strong>Maximum Length: </strong>16
     *
     * @return $this
     */
    public function setStatus($status)
    {
        $allowedValues = $this->getStatusAllowableValues();
        if (!is_null($status) && !in_array($status, $allowedValues)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'status', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets amt_tran
     *
     * @return double
     */
    public function getAmtTran()
    {
        return $this->container['amt_tran'];
    }

    /**
     * Sets amt_tran
     *
     * @param double $amt_tran The total invoice amount. Typically this will be a sum of the line item total and the tax amount. <br><strong>Maximum Length: </strong>10<br><strong>Number Of Decimals: </strong>2
     *
     * @return $this
     */
    public function setAmtTran($amt_tran)
    {
        $this->container['amt_tran'] = $amt_tran;

        return $this;
    }

    /**
     * Gets amt_tax
     *
     * @return double
     */
    public function getAmtTax()
    {
        return $this->container['amt_tax'];
    }

    /**
     * Sets amt_tax
     *
     * @param double $amt_tax Tax amount. This amount is automatically calculated if the tax_rate is provided.<br><strong>Maximum Length: </strong>10<br><strong>Number Of Decimals: </strong>2
     *
     * @return $this
     */
    public function setAmtTax($amt_tax)
    {
        $this->container['amt_tax'] = $amt_tax;

        return $this;
    }

    /**
     * Gets amt_sub_total
     *
     * @return double
     */
    public function getAmtSubTotal()
    {
        return $this->container['amt_sub_total'];
    }

    /**
     * Sets amt_sub_total
     *
     * @param double $amt_sub_total Sum of all line item total amounts.<br><strong>Maximum Length: </strong>10<br><strong>Number Of Decimals: </strong>2
     *
     * @return $this
     */
    public function setAmtSubTotal($amt_sub_total)
    {
        $this->container['amt_sub_total'] = $amt_sub_total;

        return $this;
    }

    /**
     * Gets amt_paid
     *
     * @return double
     */
    public function getAmtPaid()
    {
        return $this->container['amt_paid'];
    }

    /**
     * Sets amt_paid
     *
     * @param double $amt_paid The amount paid by the customer.<br><strong>Maximum Length: </strong>10<br><strong>Number Of Decimals: </strong>2
     *
     * @return $this
     */
    public function setAmtPaid($amt_paid)
    {
        $this->container['amt_paid'] = $amt_paid;

        return $this;
    }

    /**
     * Gets amt_balance
     *
     * @return double
     */
    public function getAmtBalance()
    {
        return $this->container['amt_balance'];
    }

    /**
     * Sets amt_balance
     *
     * @param double $amt_balance The amount due from the customer. This amount is typically the amt_tran minus amt_paid.<br><strong>Maximum Length: </strong>10<br><strong>Number Of Decimals: </strong>2
     *
     * @return $this
     */
    public function setAmtBalance($amt_balance)
    {
        $this->container['amt_balance'] = $amt_balance;

        return $this;
    }

    /**
     * Gets profile_id
     *
     * @return string
     */
    public function getProfileId()
    {
        return $this->container['profile_id'];
    }

    /**
     * Sets profile_id
     *
     * @param string $profile_id The unique payment gateway profile ID to be used when making an invoice payment. <br><strong>Maximum Length: </strong>20
     *
     * @return $this
     */
    public function setProfileId($profile_id)
    {
        $this->container['profile_id'] = $profile_id;

        return $this;
    }

    /**
     * Gets tran_currency
     *
     * @return string
     */
    public function getTranCurrency()
    {
        return $this->container['tran_currency'];
    }

    /**
     * Sets tran_currency
     *
     * @param string $tran_currency Numeric Currency Code. Refer to <a href=\"/developer/api/reference#country-codes\"target=\"_blank\">Country Codes</a> for a list of currency codes. <br><strong>Maximum Length: </strong>3
     *
     * @return $this
     */
    public function setTranCurrency($tran_currency)
    {
        $this->container['tran_currency'] = $tran_currency;

        return $this;
    }

    /**
     * Gets footer_note
     *
     * @return string
     */
    public function getFooterNote()
    {
        return $this->container['footer_note'];
    }

    /**
     * Sets footer_note
     *
     * @param string $footer_note The invoice footer note. This data will be displayed on the footer of the invoice. <br><strong>Maximum Length: </strong>750
     *
     * @return $this
     */
    public function setFooterNote($footer_note)
    {
        $this->container['footer_note'] = $footer_note;

        return $this;
    }

    /**
     * Gets payment_terms_note
     *
     * @return string
     */
    public function getPaymentTermsNote()
    {
        return $this->container['payment_terms_note'];
    }

    /**
     * Sets payment_terms_note
     *
     * @param string $payment_terms_note The invoice payment terms description.<br><strong>Maximum Length: </strong>500
     *
     * @return $this
     */
    public function setPaymentTermsNote($payment_terms_note)
    {
        $this->container['payment_terms_note'] = $payment_terms_note;

        return $this;
    }

    /**
     * Gets checkout_settings
     *
     * @return \calderaPayQualpayPlatform\Model\CheckoutSettings
     */
    public function getCheckoutSettings()
    {
        return $this->container['checkout_settings'];
    }

    /**
     * Sets checkout_settings
     *
     * @param \calderaPayQualpayPlatform\Model\CheckoutSettings $checkout_settings Invoice checkout settings specific to the checkout page.
     *
     * @return $this
     */
    public function setCheckoutSettings($checkout_settings)
    {
        $this->container['checkout_settings'] = $checkout_settings;

        return $this;
    }

    /**
     * Gets invoice_link
     *
     * @return string
     */
    public function getInvoiceLink()
    {
        return $this->container['invoice_link'];
    }

    /**
     * Sets invoice_link
     *
     * @param string $invoice_link A unique link generated once the invoice is complete and sent out to a customer. Customers can also use this link to view and pay for the invoice.
     *
     * @return $this
     */
    public function setInvoiceLink($invoice_link)
    {
        $this->container['invoice_link'] = $invoice_link;

        return $this;
    }

    /**
     * Gets sales_tax
     *
     * @return \calderaPayQualpayPlatform\Model\SalesTax
     */
    public function getSalesTax()
    {
        return $this->container['sales_tax'];
    }

    /**
     * Sets sales_tax
     *
     * @param \calderaPayQualpayPlatform\Model\SalesTax $sales_tax Sales tax
     *
     * @return $this
     */
    public function setSalesTax($sales_tax)
    {
        $this->container['sales_tax'] = $sales_tax;

        return $this;
    }

    /**
     * Gets payment_terms
     *
     * @return \calderaPayQualpayPlatform\Model\PaymentTerm
     */
    public function getPaymentTerms()
    {
        return $this->container['payment_terms'];
    }

    /**
     * Sets payment_terms
     *
     * @param \calderaPayQualpayPlatform\Model\PaymentTerm $payment_terms Payment Terms
     *
     * @return $this
     */
    public function setPaymentTerms($payment_terms)
    {
        $this->container['payment_terms'] = $payment_terms;

        return $this;
    }

    /**
     * Gets date_invoice
     *
     * @return string
     */
    public function getDateInvoice()
    {
        return $this->container['date_invoice'];
    }

    /**
     * Sets date_invoice
     *
     * @param string $date_invoice The invoice date. <br><strong>Format: </strong>YYYY-mm-DD
     *
     * @return $this
     */
    public function setDateInvoice($date_invoice)
    {
        $this->container['date_invoice'] = $date_invoice;

        return $this;
    }

    /**
     * Gets line_items
     *
     * @return \calderaPayQualpayPlatform\Model\LineItem[]
     */
    public function getLineItems()
    {
        return $this->container['line_items'];
    }

    /**
     * Sets line_items
     *
     * @param \calderaPayQualpayPlatform\Model\LineItem[] $line_items The invoice line item details.
     *
     * @return $this
     */
    public function setLineItems($line_items)
    {
        $this->container['line_items'] = $line_items;

        return $this;
    }

    /**
     * Gets date_payment
     *
     * @return string
     */
    public function getDatePayment()
    {
        return $this->container['date_payment'];
    }

    /**
     * Sets date_payment
     *
     * @param string $date_payment The invoice payment date. If multiple payments are made for this invoice, this field will have the latest payment date.<br><strong>Format: </strong>YYYY-mm-DD
     *
     * @return $this
     */
    public function setDatePayment($date_payment)
    {
        $this->container['date_payment'] = $date_payment;

        return $this;
    }

    /**
     * Gets date_due
     *
     * @return string
     */
    public function getDateDue()
    {
        return $this->container['date_due'];
    }

    /**
     * Sets date_due
     *
     * @param string $date_due The invoice due date. This date will be automatically calculated based on the payment_terms.  <br><strong>Format: </strong>YYYY-mm-DD<br><strong>Default: </strong>Invoice Date
     *
     * @return $this
     */
    public function setDateDue($date_due)
    {
        $this->container['date_due'] = $date_due;

        return $this;
    }

    /**
     * Gets date_last_view
     *
     * @return string
     */
    public function getDateLastView()
    {
        return $this->container['date_last_view'];
    }

    /**
     * Sets date_last_view
     *
     * @param string $date_last_view The date the invoice was last viewed by the customer. <br><strong>Format: </strong>YYYY-mm-DD
     *
     * @return $this
     */
    public function setDateLastView($date_last_view)
    {
        $this->container['date_last_view'] = $date_last_view;

        return $this;
    }

    /**
     * Gets date_sent
     *
     * @return string
     */
    public function getDateSent()
    {
        return $this->container['date_sent'];
    }

    /**
     * Sets date_sent
     *
     * @param string $date_sent The date invoice was first sent to the customer. This is the date the invoice status is set to OUTSTANDING. <br><strong>Format: </strong>YYYY-mm-DD
     *
     * @return $this
     */
    public function setDateSent($date_sent)
    {
        $this->container['date_sent'] = $date_sent;

        return $this;
    }

    /**
     * Gets date_notice
     *
     * @return string
     */
    public function getDateNotice()
    {
        return $this->container['date_notice'];
    }

    /**
     * Sets date_notice
     *
     * @param string $date_notice The date a reminder or overdue notice will be sent. A reminder notice is sent before the due date, overdue notices are sent after the due date. The reminder and overdue intervals can be configured in the Invoice settings page in Qualpay Manager. <br><strong>Format: </strong>YYYY-mm-DD
     *
     * @return $this
     */
    public function setDateNotice($date_notice)
    {
        $this->container['date_notice'] = $date_notice;

        return $this;
    }

    /**
     * Gets db_timestamp
     *
     * @return string
     */
    public function getDbTimestamp()
    {
        return $this->container['db_timestamp'];
    }

    /**
     * Sets db_timestamp
     *
     * @param string $db_timestamp The invoice creation time stamp. <br><strong>Format: </strong>yyyy-MM-ddTHH:mm:ss.SSS-ZZZZ
     *
     * @return $this
     */
    public function setDbTimestamp($db_timestamp)
    {
        $this->container['db_timestamp'] = $db_timestamp;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


