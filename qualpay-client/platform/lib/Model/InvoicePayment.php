<?php
/**
 * InvoicePayment
 *
 * PHP version 5
 *
 * @category Class
 * @package  calderaPayQualpayPlatform
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Qualpay Platform API
 *
 * This document describes the Qualpay Platform API.
 *
 * OpenAPI spec version: 1.1.9
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.3.1
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace calderaPayQualpayPlatform\Model;

use \ArrayAccess;
use \calderaPayQualpayPlatform\ObjectSerializer;

/**
 * InvoicePayment Class Doc Comment
 *
 * @category Class
 * @package  calderaPayQualpayPlatform
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class InvoicePayment implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'InvoicePayment';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'payment_id' => 'int',
        'merchant_id' => 'int',
        'type' => 'string',
        'amt_paid' => 'double',
        'description' => 'string',
        'pg_id' => 'string',
        'invoice_id' => 'int',
        'date_payment' => 'string',
        'status' => 'string',
        'tran_currency' => 'string',
        'tran_status' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'payment_id' => 'int64',
        'merchant_id' => 'int64',
        'type' => null,
        'amt_paid' => 'double',
        'description' => null,
        'pg_id' => null,
        'invoice_id' => 'int64',
        'date_payment' => null,
        'status' => null,
        'tran_currency' => null,
        'tran_status' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'payment_id' => 'payment_id',
        'merchant_id' => 'merchant_id',
        'type' => 'type',
        'amt_paid' => 'amt_paid',
        'description' => 'description',
        'pg_id' => 'pg_id',
        'invoice_id' => 'invoice_id',
        'date_payment' => 'date_payment',
        'status' => 'status',
        'tran_currency' => 'tran_currency',
        'tran_status' => 'tran_status'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'payment_id' => 'setPaymentId',
        'merchant_id' => 'setMerchantId',
        'type' => 'setType',
        'amt_paid' => 'setAmtPaid',
        'description' => 'setDescription',
        'pg_id' => 'setPgId',
        'invoice_id' => 'setInvoiceId',
        'date_payment' => 'setDatePayment',
        'status' => 'setStatus',
        'tran_currency' => 'setTranCurrency',
        'tran_status' => 'setTranStatus'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'payment_id' => 'getPaymentId',
        'merchant_id' => 'getMerchantId',
        'type' => 'getType',
        'amt_paid' => 'getAmtPaid',
        'description' => 'getDescription',
        'pg_id' => 'getPgId',
        'invoice_id' => 'getInvoiceId',
        'date_payment' => 'getDatePayment',
        'status' => 'getStatus',
        'tran_currency' => 'getTranCurrency',
        'tran_status' => 'getTranStatus'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const TYPE_CARD = 'CARD';
    const TYPE_CASH = 'CASH';
    const TYPE_CHECK = 'CHECK';
    const TYPE_OTHER = 'OTHER';
    const STATUS_SAVED = 'SAVED';
    const STATUS_OUTSTANDING = 'OUTSTANDING';
    const STATUS_PAID = 'PAID';
    const STATUS_CANCELED = 'CANCELED';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getTypeAllowableValues()
    {
        return [
            self::TYPE_CARD,
            self::TYPE_CASH,
            self::TYPE_CHECK,
            self::TYPE_OTHER,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getStatusAllowableValues()
    {
        return [
            self::STATUS_SAVED,
            self::STATUS_OUTSTANDING,
            self::STATUS_PAID,
            self::STATUS_CANCELED,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['payment_id'] = isset($data['payment_id']) ? $data['payment_id'] : null;
        $this->container['merchant_id'] = isset($data['merchant_id']) ? $data['merchant_id'] : null;
        $this->container['type'] = isset($data['type']) ? $data['type'] : null;
        $this->container['amt_paid'] = isset($data['amt_paid']) ? $data['amt_paid'] : null;
        $this->container['description'] = isset($data['description']) ? $data['description'] : null;
        $this->container['pg_id'] = isset($data['pg_id']) ? $data['pg_id'] : null;
        $this->container['invoice_id'] = isset($data['invoice_id']) ? $data['invoice_id'] : null;
        $this->container['date_payment'] = isset($data['date_payment']) ? $data['date_payment'] : null;
        $this->container['status'] = isset($data['status']) ? $data['status'] : null;
        $this->container['tran_currency'] = isset($data['tran_currency']) ? $data['tran_currency'] : null;
        $this->container['tran_status'] = isset($data['tran_status']) ? $data['tran_status'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getTypeAllowableValues();
        if (!in_array($this->container['type'], $allowedValues)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'type', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getStatusAllowableValues();
        if (!in_array($this->container['status'], $allowedValues)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'status', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        $allowedValues = $this->getTypeAllowableValues();
        if (!in_array($this->container['type'], $allowedValues)) {
            return false;
        }
        $allowedValues = $this->getStatusAllowableValues();
        if (!in_array($this->container['status'], $allowedValues)) {
            return false;
        }
        return true;
    }


    /**
     * Gets payment_id
     *
     * @return int
     */
    public function getPaymentId()
    {
        return $this->container['payment_id'];
    }

    /**
     * Sets payment_id
     *
     * @param int $payment_id Unique ID assigned by Qualpay to an invoice payment. Save this id for managing invoice payments. <br><strong>Maximum Length: </strong>10
     *
     * @return $this
     */
    public function setPaymentId($payment_id)
    {
        $this->container['payment_id'] = $payment_id;

        return $this;
    }

    /**
     * Gets merchant_id
     *
     * @return int
     */
    public function getMerchantId()
    {
        return $this->container['merchant_id'];
    }

    /**
     * Sets merchant_id
     *
     * @param int $merchant_id Unique ID assigned by Qualpay to a Merchant.<br><strong>Maximum Length: </strong>16
     *
     * @return $this
     */
    public function setMerchantId($merchant_id)
    {
        $this->container['merchant_id'] = $merchant_id;

        return $this;
    }

    /**
     * Gets type
     *
     * @return string
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param string $type The mode of payment. <br><ul><li><strong>CARD</strong> Invoice checkout payment by customer using a card. A card payment cannot be manually added. </li><li><strong>CASH</strong> Cash payment.</li><li><strong>CHECK</strong> Check Payment.</li><li><strong>OTHER</strong> Other modes of payment.</li></ul><br><strong>Maximum Length: </strong>16
     *
     * @return $this
     */
    public function setType($type)
    {
        $allowedValues = $this->getTypeAllowableValues();
        if (!is_null($type) && !in_array($type, $allowedValues)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'type', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets amt_paid
     *
     * @return double
     */
    public function getAmtPaid()
    {
        return $this->container['amt_paid'];
    }

    /**
     * Sets amt_paid
     *
     * @param double $amt_paid Amount paid. <br><strong>Maximum Length: </strong>10<br><strong>Number Of Decimals: </strong>2
     *
     * @return $this
     */
    public function setAmtPaid($amt_paid)
    {
        $this->container['amt_paid'] = $amt_paid;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string $description A short description of the payment.
     *
     * @return $this
     */
    public function setDescription($description)
    {
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets pg_id
     *
     * @return string
     */
    public function getPgId()
    {
        return $this->container['pg_id'];
    }

    /**
     * Sets pg_id
     *
     * @param string $pg_id Qualpay generated Payment gateway ID for the transaction. Applicable only to CARD type transaction.<br><strong>Maximum Length: </strong>32
     *
     * @return $this
     */
    public function setPgId($pg_id)
    {
        $this->container['pg_id'] = $pg_id;

        return $this;
    }

    /**
     * Gets invoice_id
     *
     * @return int
     */
    public function getInvoiceId()
    {
        return $this->container['invoice_id'];
    }

    /**
     * Sets invoice_id
     *
     * @param int $invoice_id A unique number generated by Qualpay to identify an invoice. Save this id to manage an invoice.<br><strong>Maximum Length: </strong>10
     *
     * @return $this
     */
    public function setInvoiceId($invoice_id)
    {
        $this->container['invoice_id'] = $invoice_id;

        return $this;
    }

    /**
     * Gets date_payment
     *
     * @return string
     */
    public function getDatePayment()
    {
        return $this->container['date_payment'];
    }

    /**
     * Sets date_payment
     *
     * @param string $date_payment Date the payment was made<br><strong>Format: </strong>YYYY-mm-DD
     *
     * @return $this
     */
    public function setDatePayment($date_payment)
    {
        $this->container['date_payment'] = $date_payment;

        return $this;
    }

    /**
     * Gets status
     *
     * @return string
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param string $status Status of an invoice. Possible values are <br><ul<li><strong>SAVED</strong> Invoice is in draft state. An invoice in draft state can be updated. </li><li><strong>OUTSTANDING</strong> Invoice has been mailed to the customer. Once an invoice is sent, only the billing_contact and from_contact can be updated. </li><li><strong>PAID</strong> Invoice has been paid completely. A paid invoice cannot be updated. </li><li><strong>CANCELED</strong> Invoice has been canceled. A canceled invoice cannot be updated. </li></ul><br><strong>Maximum Length: </strong>16
     *
     * @return $this
     */
    public function setStatus($status)
    {
        $allowedValues = $this->getStatusAllowableValues();
        if (!is_null($status) && !in_array($status, $allowedValues)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'status', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets tran_currency
     *
     * @return string
     */
    public function getTranCurrency()
    {
        return $this->container['tran_currency'];
    }

    /**
     * Sets tran_currency
     *
     * @param string $tran_currency Numeric Currency Code. Refer to <a href=\"/developer/api/reference#country-codes\"target=\"_blank\">Country Codes</a> for a list of currency codes. <br><strong>Maximum Length: </strong>3
     *
     * @return $this
     */
    public function setTranCurrency($tran_currency)
    {
        $this->container['tran_currency'] = $tran_currency;

        return $this;
    }

    /**
     * Gets tran_status
     *
     * @return string
     */
    public function getTranStatus()
    {
        return $this->container['tran_status'];
    }

    /**
     * Sets tran_status
     *
     * @param string $tran_status Transaction status for CARD payments. The status will be empty for non credit card payments.Possible values are <br><ul><li>A - Transaction is approved</li><li>H - Transaction Held</li><li>C - Transaction is captured</li><li>V - Transaction is voided by Merchant</li><li>v - Transaction is voided by System</li><li>K - Transaction is cancelled</li><li>S - Transaction Settled</li><li>P - Deposit Sent</li><li>N - Transaction Settled, but will not be funded by Qualpay</li><li>U - Transaction authorization failed or was declined by issuer</li><li>R - Transaction Rejected</li></ul><br><strong>Maximum Length: </strong>1
     *
     * @return $this
     */
    public function setTranStatus($tran_status)
    {
        $this->container['tran_status'] = $tran_status;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


