<?php
/**
 * PGApiTransactionResponse
 *
 * PHP version 5
 *
 * @category Class
 * @package  calderaPayQualpayPlatform
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Qualpay Payment Gateway API
 *
 * This document describes the Qualpay Payment Gateway API.
 *
 * OpenAPI spec version: 1.7
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.3.1
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace calderaPayQualpayPlatform\Model;

use \ArrayAccess;
use \calderaPayQualpayPlatform\ObjectSerializer;

/**
 * PGApiTransactionResponse Class Doc Comment
 *
 * @category Class
 * @package  calderaPayQualpayPlatform
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class PGApiTransactionResponse implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'PGApiTransactionResponse';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'merchant_advice_code' => 'string',
        'pg_id' => 'string',
        'rcode' => 'string',
        'rmsg' => 'string',
        'card_id' => 'string',
        'auth_code' => 'string',
        'auth_avs_result' => 'string',
        'auth_cvv2_result' => 'string',
        'echo_fields' => 'string',
        'amt_tran' => 'double'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'merchant_advice_code' => null,
        'pg_id' => null,
        'rcode' => null,
        'rmsg' => null,
        'card_id' => null,
        'auth_code' => null,
        'auth_avs_result' => null,
        'auth_cvv2_result' => null,
        'echo_fields' => null,
        'amt_tran' => 'double'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'merchant_advice_code' => 'merchant_advice_code',
        'pg_id' => 'pg_id',
        'rcode' => 'rcode',
        'rmsg' => 'rmsg',
        'card_id' => 'card_id',
        'auth_code' => 'auth_code',
        'auth_avs_result' => 'auth_avs_result',
        'auth_cvv2_result' => 'auth_cvv2_result',
        'echo_fields' => 'echo_fields',
        'amt_tran' => 'amt_tran'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'merchant_advice_code' => 'setMerchantAdviceCode',
        'pg_id' => 'setPgId',
        'rcode' => 'setRcode',
        'rmsg' => 'setRmsg',
        'card_id' => 'setCardId',
        'auth_code' => 'setAuthCode',
        'auth_avs_result' => 'setAuthAvsResult',
        'auth_cvv2_result' => 'setAuthCvv2Result',
        'echo_fields' => 'setEchoFields',
        'amt_tran' => 'setAmtTran'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'merchant_advice_code' => 'getMerchantAdviceCode',
        'pg_id' => 'getPgId',
        'rcode' => 'getRcode',
        'rmsg' => 'getRmsg',
        'card_id' => 'getCardId',
        'auth_code' => 'getAuthCode',
        'auth_avs_result' => 'getAuthAvsResult',
        'auth_cvv2_result' => 'getAuthCvv2Result',
        'echo_fields' => 'getEchoFields',
        'amt_tran' => 'getAmtTran'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['merchant_advice_code'] = isset($data['merchant_advice_code']) ? $data['merchant_advice_code'] : null;
        $this->container['pg_id'] = isset($data['pg_id']) ? $data['pg_id'] : null;
        $this->container['rcode'] = isset($data['rcode']) ? $data['rcode'] : null;
        $this->container['rmsg'] = isset($data['rmsg']) ? $data['rmsg'] : null;
        $this->container['card_id'] = isset($data['card_id']) ? $data['card_id'] : null;
        $this->container['auth_code'] = isset($data['auth_code']) ? $data['auth_code'] : null;
        $this->container['auth_avs_result'] = isset($data['auth_avs_result']) ? $data['auth_avs_result'] : null;
        $this->container['auth_cvv2_result'] = isset($data['auth_cvv2_result']) ? $data['auth_cvv2_result'] : null;
        $this->container['echo_fields'] = isset($data['echo_fields']) ? $data['echo_fields'] : null;
        $this->container['amt_tran'] = isset($data['amt_tran']) ? $data['amt_tran'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        return true;
    }


    /**
     * Gets merchant_advice_code
     *
     * @return string
     */
    public function getMerchantAdviceCode()
    {
        return $this->container['merchant_advice_code'];
    }

    /**
     * Sets merchant_advice_code
     *
     * @param string $merchant_advice_code <strong>Format: </strong>Fixed length, 4 AN<br><strong>Description: </strong>Recurring transaction advice for MasterCard authorizations.<ul><li>M001 = New account information available</li><li>M002 = Try again later</li><li>M003 = Do not try again for recurring payments transaction</li><li>M004 = Token requirements not fulfilled for this token type</li><li>M021 = Recurring payment cancellation</li></ul>
     *
     * @return $this
     */
    public function setMerchantAdviceCode($merchant_advice_code)
    {
        $this->container['merchant_advice_code'] = $merchant_advice_code;

        return $this;
    }

    /**
     * Gets pg_id
     *
     * @return string
     */
    public function getPgId()
    {
        return $this->container['pg_id'];
    }

    /**
     * Sets pg_id
     *
     * @param string $pg_id <strong>Format: </strong>Fixed length, 32 AN<br><strong>Description: </strong>32-byte unique identifier generated by the payment gateway, returned in all valid responses.
     *
     * @return $this
     */
    public function setPgId($pg_id)
    {
        $this->container['pg_id'] = $pg_id;

        return $this;
    }

    /**
     * Gets rcode
     *
     * @return string
     */
    public function getRcode()
    {
        return $this->container['rcode'];
    }

    /**
     * Sets rcode
     *
     * @param string $rcode <strong>Format: </strong>Fixed length, 3 AN<br><strong>Description: </strong>Response code from the payment gateway. \"000\" indicates success. Refer to <a href=\"/developer/api/reference#api-response-codes\"target=\"_blank\">Platform API Response Codes</a> for entire list of Payment Gateway Response Codes.
     *
     * @return $this
     */
    public function setRcode($rcode)
    {
        $this->container['rcode'] = $rcode;

        return $this;
    }

    /**
     * Gets rmsg
     *
     * @return string
     */
    public function getRmsg()
    {
        return $this->container['rmsg'];
    }

    /**
     * Sets rmsg
     *
     * @param string $rmsg <strong>Format: </strong>Variable length<br><strong>Description: </strong>Response text from the payment gateway.
     *
     * @return $this
     */
    public function setRmsg($rmsg)
    {
        $this->container['rmsg'] = $rmsg;

        return $this;
    }

    /**
     * Gets card_id
     *
     * @return string
     */
    public function getCardId()
    {
        return $this->container['card_id'];
    }

    /**
     * Sets card_id
     *
     * @param string $card_id <strong>Format: </strong>Fixed length, 32 AN<br><strong>Description: </strong>32-byte value returned after successful tokenize request or when an authorization or sale transaction requests tokenization of the cardholder data.
     *
     * @return $this
     */
    public function setCardId($card_id)
    {
        $this->container['card_id'] = $card_id;

        return $this;
    }

    /**
     * Gets auth_code
     *
     * @return string
     */
    public function getAuthCode()
    {
        return $this->container['auth_code'];
    }

    /**
     * Sets auth_code
     *
     * @param string $auth_code <strong>Format: </strong>Fixed length, 6 AN<br><strong>Description: </strong>Card issuer authorization code returned on successful authorization request.
     *
     * @return $this
     */
    public function setAuthCode($auth_code)
    {
        $this->container['auth_code'] = $auth_code;

        return $this;
    }

    /**
     * Gets auth_avs_result
     *
     * @return string
     */
    public function getAuthAvsResult()
    {
        return $this->container['auth_avs_result'];
    }

    /**
     * Sets auth_avs_result
     *
     * @param string $auth_avs_result <strong>Format: </strong>Fixed length, 1 AN<br><strong>Description: </strong>AVS result from card issuer (if avs_zip and optionally avs_address were provided in the request). Refer to <a href=\"/developer/api/reference#avs-result-codes\"target=\"_blank\">Payment Result Codes for AVS</a> for possible values.
     *
     * @return $this
     */
    public function setAuthAvsResult($auth_avs_result)
    {
        $this->container['auth_avs_result'] = $auth_avs_result;

        return $this;
    }

    /**
     * Gets auth_cvv2_result
     *
     * @return string
     */
    public function getAuthCvv2Result()
    {
        return $this->container['auth_cvv2_result'];
    }

    /**
     * Sets auth_cvv2_result
     *
     * @param string $auth_cvv2_result <strong>Format: </strong>Fixed length, 1 AN<br><strong>Description: </strong>CVV2 result from card issuer (if CVV2 data was sent in the request). Refer to <a href=\"/developer/api/reference#cvv2-result-codes\"target=\"_blank\">Payment Result Codes for CVV2</a> for possible values.
     *
     * @return $this
     */
    public function setAuthCvv2Result($auth_cvv2_result)
    {
        $this->container['auth_cvv2_result'] = $auth_cvv2_result;

        return $this;
    }

    /**
     * Gets echo_fields
     *
     * @return string
     */
    public function getEchoFields()
    {
        return $this->container['echo_fields'];
    }

    /**
     * Sets echo_fields
     *
     * @param string $echo_fields <strong>Format: </strong>Variable length<br><strong>Description: </strong>Data that was provided in echo_fields in the request.
     *
     * @return $this
     */
    public function setEchoFields($echo_fields)
    {
        $this->container['echo_fields'] = $echo_fields;

        return $this;
    }

    /**
     * Gets amt_tran
     *
     * @return double
     */
    public function getAmtTran()
    {
        return $this->container['amt_tran'];
    }

    /**
     * Sets amt_tran
     *
     * @param double $amt_tran <strong>Format: </strong>Variable length, up to 12,2 N<br><strong>Description: </strong>Transaction amount, returned only on partial approvals.
     *
     * @return $this
     */
    public function setAmtTran($amt_tran)
    {
        $this->container['amt_tran'] = $amt_tran;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


