<?php
/**
 * PGApiVerifyRequest
 *
 * PHP version 5
 *
 * @category Class
 * @package  calderaPayQualpayPlatform
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Qualpay Payment Gateway API
 *
 * This document describes the Qualpay Payment Gateway API.
 *
 * OpenAPI spec version: 1.7
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.3.1
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace calderaPayQualpayPlatform\Model;

use \ArrayAccess;
use \calderaPayQualpayPlatform\ObjectSerializer;

/**
 * PGApiVerifyRequest Class Doc Comment
 *
 * @category Class
 * @package  calderaPayQualpayPlatform
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class PGApiVerifyRequest implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'PGApiVerifyRequest';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'merchant_id' => 'int',
        'avs_address' => 'string',
        'avs_zip' => 'string',
        'card_id' => 'string',
        'card_number' => 'string',
        'card_swipe' => 'string',
        'cardholder_name' => 'string',
        'customer' => '\calderaPayQualpayPlatform\Model\Customer',
        'customer_code' => 'string',
        'cvv2' => 'string',
        'developer_id' => 'string',
        'echo_fields' => 'string',
        'exp_date' => 'string',
        'loc_id' => 'string',
        'merch_ref_num' => 'string',
        'profile_id' => 'string',
        'report_data' => 'string',
        'retry_id' => 'int',
        'session_id' => 'string',
        'tokenize' => 'bool',
        'user_id' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'merchant_id' => 'int64',
        'avs_address' => null,
        'avs_zip' => null,
        'card_id' => null,
        'card_number' => null,
        'card_swipe' => null,
        'cardholder_name' => null,
        'customer' => null,
        'customer_code' => null,
        'cvv2' => null,
        'developer_id' => null,
        'echo_fields' => null,
        'exp_date' => null,
        'loc_id' => null,
        'merch_ref_num' => null,
        'profile_id' => null,
        'report_data' => null,
        'retry_id' => 'int64',
        'session_id' => null,
        'tokenize' => null,
        'user_id' => 'int64'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'merchant_id' => 'merchant_id',
        'avs_address' => 'avs_address',
        'avs_zip' => 'avs_zip',
        'card_id' => 'card_id',
        'card_number' => 'card_number',
        'card_swipe' => 'card_swipe',
        'cardholder_name' => 'cardholder_name',
        'customer' => 'customer',
        'customer_code' => 'customer_code',
        'cvv2' => 'cvv2',
        'developer_id' => 'developer_id',
        'echo_fields' => 'echo_fields',
        'exp_date' => 'exp_date',
        'loc_id' => 'loc_id',
        'merch_ref_num' => 'merch_ref_num',
        'profile_id' => 'profile_id',
        'report_data' => 'report_data',
        'retry_id' => 'retry_id',
        'session_id' => 'session_id',
        'tokenize' => 'tokenize',
        'user_id' => 'user_id'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'merchant_id' => 'setMerchantId',
        'avs_address' => 'setAvsAddress',
        'avs_zip' => 'setAvsZip',
        'card_id' => 'setCardId',
        'card_number' => 'setCardNumber',
        'card_swipe' => 'setCardSwipe',
        'cardholder_name' => 'setCardholderName',
        'customer' => 'setCustomer',
        'customer_code' => 'setCustomerCode',
        'cvv2' => 'setCvv2',
        'developer_id' => 'setDeveloperId',
        'echo_fields' => 'setEchoFields',
        'exp_date' => 'setExpDate',
        'loc_id' => 'setLocId',
        'merch_ref_num' => 'setMerchRefNum',
        'profile_id' => 'setProfileId',
        'report_data' => 'setReportData',
        'retry_id' => 'setRetryId',
        'session_id' => 'setSessionId',
        'tokenize' => 'setTokenize',
        'user_id' => 'setUserId'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'merchant_id' => 'getMerchantId',
        'avs_address' => 'getAvsAddress',
        'avs_zip' => 'getAvsZip',
        'card_id' => 'getCardId',
        'card_number' => 'getCardNumber',
        'card_swipe' => 'getCardSwipe',
        'cardholder_name' => 'getCardholderName',
        'customer' => 'getCustomer',
        'customer_code' => 'getCustomerCode',
        'cvv2' => 'getCvv2',
        'developer_id' => 'getDeveloperId',
        'echo_fields' => 'getEchoFields',
        'exp_date' => 'getExpDate',
        'loc_id' => 'getLocId',
        'merch_ref_num' => 'getMerchRefNum',
        'profile_id' => 'getProfileId',
        'report_data' => 'getReportData',
        'retry_id' => 'getRetryId',
        'session_id' => 'getSessionId',
        'tokenize' => 'getTokenize',
        'user_id' => 'getUserId'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['merchant_id'] = isset($data['merchant_id']) ? $data['merchant_id'] : null;
        $this->container['avs_address'] = isset($data['avs_address']) ? $data['avs_address'] : null;
        $this->container['avs_zip'] = isset($data['avs_zip']) ? $data['avs_zip'] : null;
        $this->container['card_id'] = isset($data['card_id']) ? $data['card_id'] : null;
        $this->container['card_number'] = isset($data['card_number']) ? $data['card_number'] : null;
        $this->container['card_swipe'] = isset($data['card_swipe']) ? $data['card_swipe'] : null;
        $this->container['cardholder_name'] = isset($data['cardholder_name']) ? $data['cardholder_name'] : null;
        $this->container['customer'] = isset($data['customer']) ? $data['customer'] : null;
        $this->container['customer_code'] = isset($data['customer_code']) ? $data['customer_code'] : null;
        $this->container['cvv2'] = isset($data['cvv2']) ? $data['cvv2'] : null;
        $this->container['developer_id'] = isset($data['developer_id']) ? $data['developer_id'] : null;
        $this->container['echo_fields'] = isset($data['echo_fields']) ? $data['echo_fields'] : null;
        $this->container['exp_date'] = isset($data['exp_date']) ? $data['exp_date'] : null;
        $this->container['loc_id'] = isset($data['loc_id']) ? $data['loc_id'] : null;
        $this->container['merch_ref_num'] = isset($data['merch_ref_num']) ? $data['merch_ref_num'] : null;
        $this->container['profile_id'] = isset($data['profile_id']) ? $data['profile_id'] : null;
        $this->container['report_data'] = isset($data['report_data']) ? $data['report_data'] : null;
        $this->container['retry_id'] = isset($data['retry_id']) ? $data['retry_id'] : null;
        $this->container['session_id'] = isset($data['session_id']) ? $data['session_id'] : null;
        $this->container['tokenize'] = isset($data['tokenize']) ? $data['tokenize'] : null;
        $this->container['user_id'] = isset($data['user_id']) ? $data['user_id'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['merchant_id'] === null) {
            $invalidProperties[] = "'merchant_id' can't be null";
        }
        if ($this->container['card_number'] === null) {
            $invalidProperties[] = "'card_number' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        if ($this->container['merchant_id'] === null) {
            return false;
        }
        if ($this->container['card_number'] === null) {
            return false;
        }
        return true;
    }


    /**
     * Gets merchant_id
     *
     * @return int
     */
    public function getMerchantId()
    {
        return $this->container['merchant_id'];
    }

    /**
     * Sets merchant_id
     *
     * @param int $merchant_id <strong>Format: </strong>Variable length, up to 12 N<br><strong>Description: </strong>Unique identifier on the Qualpay system.
     *
     * @return $this
     */
    public function setMerchantId($merchant_id)
    {
        $this->container['merchant_id'] = $merchant_id;

        return $this;
    }

    /**
     * Gets avs_address
     *
     * @return string
     */
    public function getAvsAddress()
    {
        return $this->container['avs_address'];
    }

    /**
     * Sets avs_address
     *
     * @param string $avs_address <strong>Format: </strong>Variable length, up to 20 AN<br><strong>Description: </strong>Street address of the cardholder. If present, it will be included in the authorization request sent to the issuing bank.
     *
     * @return $this
     */
    public function setAvsAddress($avs_address)
    {
        $this->container['avs_address'] = $avs_address;

        return $this;
    }

    /**
     * Gets avs_zip
     *
     * @return string
     */
    public function getAvsZip()
    {
        return $this->container['avs_zip'];
    }

    /**
     * Sets avs_zip
     *
     * @param string $avs_zip <strong>Format: </strong>Variable length, up to 9 N<br><strong>Description: </strong>Zip code of the cardholder. If present, it will be included in the authorization request sent to the issuing bank.<br><strong>Conditional Requirement: </strong>This field is required if avs_address is present.
     *
     * @return $this
     */
    public function setAvsZip($avs_zip)
    {
        $this->container['avs_zip'] = $avs_zip;

        return $this;
    }

    /**
     * Gets card_id
     *
     * @return string
     */
    public function getCardId()
    {
        return $this->container['card_id'];
    }

    /**
     * Sets card_id
     *
     * @param string $card_id <strong>Format: </strong>Variable length, up to 32 AN<br><strong>Description: </strong>Card ID received from a tokenization request. The card_id may be used in place of a card number or card swipe.<br><strong>Conditional Requirement: </strong>Refer to <a href=\"/developer/api/reference#card-source-conditional-requirements\"target=\"_blank\">Card source conditional requirements</a>
     *
     * @return $this
     */
    public function setCardId($card_id)
    {
        $this->container['card_id'] = $card_id;

        return $this;
    }

    /**
     * Gets card_number
     *
     * @return string
     */
    public function getCardNumber()
    {
        return $this->container['card_number'];
    }

    /**
     * Sets card_number
     *
     * @param string $card_number <strong>Format: </strong>Variable length, up to 19 N<br><strong>Description: </strong>Cardholder's card number. <br><strong>Conditional Requirement: </strong>Refer to <a href=\"/developer/api/reference#card-source-conditional-requirements\"target=\"_blank\">Card source conditional requirements</a>
     *
     * @return $this
     */
    public function setCardNumber($card_number)
    {
        $this->container['card_number'] = $card_number;

        return $this;
    }

    /**
     * Gets card_swipe
     *
     * @return string
     */
    public function getCardSwipe()
    {
        return $this->container['card_swipe'];
    }

    /**
     * Sets card_swipe
     *
     * @param string $card_swipe <strong>Format: </strong>Variable length, up to 79 AN<br><strong>Description: </strong>Contains either track 1 or track 2 data magnetic stripe data. If the magnetic stripe reader provides both track 1 and track 2 data in a single read, it is the responsibility of the implementer to send data for only one of the two tracks.<br><strong>Conditional Requirement: </strong>Refer to <a href=\"/developer/api/reference#card-source-conditional-requirements\"target=\"_blank\">Card source conditional requirements</a>
     *
     * @return $this
     */
    public function setCardSwipe($card_swipe)
    {
        $this->container['card_swipe'] = $card_swipe;

        return $this;
    }

    /**
     * Gets cardholder_name
     *
     * @return string
     */
    public function getCardholderName()
    {
        return $this->container['cardholder_name'];
    }

    /**
     * Sets cardholder_name
     *
     * @param string $cardholder_name <strong>Format: </strong>Variable length, up to 64 AN<br><strong>Description: </strong>When provided in a tokenize request, the cardholder name will be stored in the Card Vault along with the cardholder card number and expiration date.
     *
     * @return $this
     */
    public function setCardholderName($cardholder_name)
    {
        $this->container['cardholder_name'] = $cardholder_name;

        return $this;
    }

    /**
     * Gets customer
     *
     * @return \calderaPayQualpayPlatform\Model\Customer
     */
    public function getCustomer()
    {
        return $this->container['customer'];
    }

    /**
     * Sets customer
     *
     * @param \calderaPayQualpayPlatform\Model\Customer $customer <br><strong>Description: </strong>In an authorization, credit, force, sale or verify message the merchant can send tokenize (set to true), either card_number or card_swipe, the desired customer_id, and the customer field and the payment gateway will create the customer data in the vault. Cannot be used to update an existing customer_id
     *
     * @return $this
     */
    public function setCustomer($customer)
    {
        $this->container['customer'] = $customer;

        return $this;
    }

    /**
     * Gets customer_code
     *
     * @return string
     */
    public function getCustomerCode()
    {
        return $this->container['customer_code'];
    }

    /**
     * Sets customer_code
     *
     * @param string $customer_code <strong>Format: </strong>Variable length, up to 17 AN<br><strong>Description: </strong>Reference code supplied by the cardholder to the merchant.
     *
     * @return $this
     */
    public function setCustomerCode($customer_code)
    {
        $this->container['customer_code'] = $customer_code;

        return $this;
    }

    /**
     * Gets cvv2
     *
     * @return string
     */
    public function getCvv2()
    {
        return $this->container['cvv2'];
    }

    /**
     * Sets cvv2
     *
     * @param string $cvv2 <strong>Format: </strong>Variable length, up to 4 N<br><strong>Description: </strong>CVV2 or CID value from the signature panel on the back of the cardholder's card. If present during a request that requires authorization, the value will be sent to the issuer for validation.
     *
     * @return $this
     */
    public function setCvv2($cvv2)
    {
        $this->container['cvv2'] = $cvv2;

        return $this;
    }

    /**
     * Gets developer_id
     *
     * @return string
     */
    public function getDeveloperId()
    {
        return $this->container['developer_id'];
    }

    /**
     * Sets developer_id
     *
     * @param string $developer_id <strong>Format: </strong>Variable length, up to 16 AN<br><strong>Description: </strong>Used to indicate which company developed the integration to the Qualpay Payment Gateway. This may also be used to provide the payment solution name that is connected to the Qualpay Payment Gateway.
     *
     * @return $this
     */
    public function setDeveloperId($developer_id)
    {
        $this->container['developer_id'] = $developer_id;

        return $this;
    }

    /**
     * Gets echo_fields
     *
     * @return string
     */
    public function getEchoFields()
    {
        return $this->container['echo_fields'];
    }

    /**
     * Sets echo_fields
     *
     * @param string $echo_fields <strong>Format: </strong>Variable length<br><strong>Description: </strong>This field contains a JSON array of field data that will be echoed back in the response message.
     *
     * @return $this
     */
    public function setEchoFields($echo_fields)
    {
        $this->container['echo_fields'] = $echo_fields;

        return $this;
    }

    /**
     * Gets exp_date
     *
     * @return string
     */
    public function getExpDate()
    {
        return $this->container['exp_date'];
    }

    /**
     * Sets exp_date
     *
     * @param string $exp_date <strong>Format: </strong>Fixed length, 4 N, MMYY format<br><strong>Description: </strong>Expiration date of cardholder card number. Required when the field card_number is present. If card_swipe is present in the request, this field must NOT be present. When card_id or customer_id is present in the request this field may also be present; if it is not, then the expiration date from the Card Vault will be used.<br><strong>Conditional Requirement: </strong>Refer to <a href=\"/developer/api/reference#card-source-conditional-requirements\"target=\"_blank\">Card source conditional requirements</a>
     *
     * @return $this
     */
    public function setExpDate($exp_date)
    {
        $this->container['exp_date'] = $exp_date;

        return $this;
    }

    /**
     * Gets loc_id
     *
     * @return string
     */
    public function getLocId()
    {
        return $this->container['loc_id'];
    }

    /**
     * Sets loc_id
     *
     * @param string $loc_id <strong>Format: </strong>Variable length, up to 4 N<br><strong>Description: </strong>When a merchant has more than one location using the same currency, this value is used to specify the specific location for this request.
     *
     * @return $this
     */
    public function setLocId($loc_id)
    {
        $this->container['loc_id'] = $loc_id;

        return $this;
    }

    /**
     * Gets merch_ref_num
     *
     * @return string
     */
    public function getMerchRefNum()
    {
        return $this->container['merch_ref_num'];
    }

    /**
     * Sets merch_ref_num
     *
     * @param string $merch_ref_num <strong>Format: </strong>Variable length, up to 128 AN<br><strong>Description: </strong>Merchant provided reference value that will be stored with the transaction data and included with transaction data in reports within Qualpay Manager. This value will also be attached to any lifecycle transactions (e.g. retrieval requests and chargebacks) that may occur.
     *
     * @return $this
     */
    public function setMerchRefNum($merch_ref_num)
    {
        $this->container['merch_ref_num'] = $merch_ref_num;

        return $this;
    }

    /**
     * Gets profile_id
     *
     * @return string
     */
    public function getProfileId()
    {
        return $this->container['profile_id'];
    }

    /**
     * Sets profile_id
     *
     * @param string $profile_id <strong>Format: </strong>Fixed length, 20 N<br><strong>Description: </strong>Explicitly identifies which Payment Gateway profile should be used for the request.
     *
     * @return $this
     */
    public function setProfileId($profile_id)
    {
        $this->container['profile_id'] = $profile_id;

        return $this;
    }

    /**
     * Gets report_data
     *
     * @return string
     */
    public function getReportData()
    {
        return $this->container['report_data'];
    }

    /**
     * Sets report_data
     *
     * @param string $report_data <strong>Format: </strong>Variable length<br><strong>Description: </strong>This field contains a JSON array of field data that will be included with the transaction data reported in Qualpay Manager.
     *
     * @return $this
     */
    public function setReportData($report_data)
    {
        $this->container['report_data'] = $report_data;

        return $this;
    }

    /**
     * Gets retry_id
     *
     * @return int
     */
    public function getRetryId()
    {
        return $this->container['retry_id'];
    }

    /**
     * Sets retry_id
     *
     * @param int $retry_id <strong>Format: </strong>Variable length, up to 15 N<br><strong>Description: </strong>This field contains a merchant generated number used to identify the request. This value must be unique within the last 24 hours. When present, the payment gateway will use the retry_attempt to determine whether the message is new or a retry of a previous message.
     *
     * @return $this
     */
    public function setRetryId($retry_id)
    {
        $this->container['retry_id'] = $retry_id;

        return $this;
    }

    /**
     * Gets session_id
     *
     * @return string
     */
    public function getSessionId()
    {
        return $this->container['session_id'];
    }

    /**
     * Sets session_id
     *
     * @param string $session_id INTERNAL USE ONLY.
     *
     * @return $this
     */
    public function setSessionId($session_id)
    {
        $this->container['session_id'] = $session_id;

        return $this;
    }

    /**
     * Gets tokenize
     *
     * @return bool
     */
    public function getTokenize()
    {
        return $this->container['tokenize'];
    }

    /**
     * Sets tokenize
     *
     * @param bool $tokenize <br><strong>Default: </strong>false<br><strong>Description: </strong>In an authorization, credit, force, sale, or verify request the merchant can set tokenize to \"true\" and the payment gateway will store the cardholder data in the Card Vault and provide a card_id in the response. If the card_number or card_id in the request is already in the Card Vault, this flag instructs the payment gateway to update the associated data (e.g. avs_address, avs_zip, exp_date) if present.
     *
     * @return $this
     */
    public function setTokenize($tokenize)
    {
        $this->container['tokenize'] = $tokenize;

        return $this;
    }

    /**
     * Gets user_id
     *
     * @return int
     */
    public function getUserId()
    {
        return $this->container['user_id'];
    }

    /**
     * Sets user_id
     *
     * @param int $user_id INTERNAL USE ONLY.
     *
     * @return $this
     */
    public function setUserId($user_id)
    {
        $this->container['user_id'] = $user_id;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


