<?php
/**
 * RecurringPlan
 *
 * PHP version 5
 *
 * @category Class
 * @package  calderaPayQualpayPlatform
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Qualpay Platform API
 *
 * This document describes the Qualpay Platform API.
 *
 * OpenAPI spec version: 1.1.9
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.3.1
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace calderaPayQualpayPlatform\Model;

use \ArrayAccess;
use \calderaPayQualpayPlatform\ObjectSerializer;

/**
 * RecurringPlan Class Doc Comment
 *
 * @category Class
 * @package  calderaPayQualpayPlatform
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class RecurringPlan implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'RecurringPlan';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'plan_id' => 'int',
        'merchant_id' => 'int',
        'plan_code' => 'string',
        'plan_name' => 'string',
        'plan_desc' => 'string',
        'plan_frequency' => 'int',
        'interval' => 'int',
        'plan_duration' => 'int',
        'status' => 'string',
        'trial_duration' => 'int',
        'amt_trial' => 'double',
        'amt_setup' => 'double',
        'amt_tran' => 'double',
        'tran_currency' => 'string',
        'profile_id' => 'string',
        'bill_specific_day' => 'bool',
        'day_of_week' => 'int',
        'day_of_month' => 'int',
        'month' => 'int',
        'prorate_first_pmt' => 'bool',
        'amt_prorate' => 'double',
        'db_timestamp' => 'string',
        'mod_timestamp' => 'string',
        'vendor_id' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'plan_id' => 'int64',
        'merchant_id' => 'int64',
        'plan_code' => null,
        'plan_name' => null,
        'plan_desc' => null,
        'plan_frequency' => 'int32',
        'interval' => 'int32',
        'plan_duration' => 'int32',
        'status' => null,
        'trial_duration' => 'int32',
        'amt_trial' => 'double',
        'amt_setup' => 'double',
        'amt_tran' => 'double',
        'tran_currency' => null,
        'profile_id' => null,
        'bill_specific_day' => null,
        'day_of_week' => 'int32',
        'day_of_month' => 'int32',
        'month' => 'int32',
        'prorate_first_pmt' => null,
        'amt_prorate' => 'double',
        'db_timestamp' => null,
        'mod_timestamp' => null,
        'vendor_id' => 'int64'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'plan_id' => 'plan_id',
        'merchant_id' => 'merchant_id',
        'plan_code' => 'plan_code',
        'plan_name' => 'plan_name',
        'plan_desc' => 'plan_desc',
        'plan_frequency' => 'plan_frequency',
        'interval' => 'interval',
        'plan_duration' => 'plan_duration',
        'status' => 'status',
        'trial_duration' => 'trial_duration',
        'amt_trial' => 'amt_trial',
        'amt_setup' => 'amt_setup',
        'amt_tran' => 'amt_tran',
        'tran_currency' => 'tran_currency',
        'profile_id' => 'profile_id',
        'bill_specific_day' => 'bill_specific_day',
        'day_of_week' => 'day_of_week',
        'day_of_month' => 'day_of_month',
        'month' => 'month',
        'prorate_first_pmt' => 'prorate_first_pmt',
        'amt_prorate' => 'amt_prorate',
        'db_timestamp' => 'db_timestamp',
        'mod_timestamp' => 'mod_timestamp',
        'vendor_id' => 'vendor_id'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'plan_id' => 'setPlanId',
        'merchant_id' => 'setMerchantId',
        'plan_code' => 'setPlanCode',
        'plan_name' => 'setPlanName',
        'plan_desc' => 'setPlanDesc',
        'plan_frequency' => 'setPlanFrequency',
        'interval' => 'setInterval',
        'plan_duration' => 'setPlanDuration',
        'status' => 'setStatus',
        'trial_duration' => 'setTrialDuration',
        'amt_trial' => 'setAmtTrial',
        'amt_setup' => 'setAmtSetup',
        'amt_tran' => 'setAmtTran',
        'tran_currency' => 'setTranCurrency',
        'profile_id' => 'setProfileId',
        'bill_specific_day' => 'setBillSpecificDay',
        'day_of_week' => 'setDayOfWeek',
        'day_of_month' => 'setDayOfMonth',
        'month' => 'setMonth',
        'prorate_first_pmt' => 'setProrateFirstPmt',
        'amt_prorate' => 'setAmtProrate',
        'db_timestamp' => 'setDbTimestamp',
        'mod_timestamp' => 'setModTimestamp',
        'vendor_id' => 'setVendorId'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'plan_id' => 'getPlanId',
        'merchant_id' => 'getMerchantId',
        'plan_code' => 'getPlanCode',
        'plan_name' => 'getPlanName',
        'plan_desc' => 'getPlanDesc',
        'plan_frequency' => 'getPlanFrequency',
        'interval' => 'getInterval',
        'plan_duration' => 'getPlanDuration',
        'status' => 'getStatus',
        'trial_duration' => 'getTrialDuration',
        'amt_trial' => 'getAmtTrial',
        'amt_setup' => 'getAmtSetup',
        'amt_tran' => 'getAmtTran',
        'tran_currency' => 'getTranCurrency',
        'profile_id' => 'getProfileId',
        'bill_specific_day' => 'getBillSpecificDay',
        'day_of_week' => 'getDayOfWeek',
        'day_of_month' => 'getDayOfMonth',
        'month' => 'getMonth',
        'prorate_first_pmt' => 'getProrateFirstPmt',
        'amt_prorate' => 'getAmtProrate',
        'db_timestamp' => 'getDbTimestamp',
        'mod_timestamp' => 'getModTimestamp',
        'vendor_id' => 'getVendorId'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const PLAN_FREQUENCY_0 = 0;
    const PLAN_FREQUENCY_1 = 1;
    const PLAN_FREQUENCY_3 = 3;
    const PLAN_FREQUENCY_4 = 4;
    const PLAN_FREQUENCY_5 = 5;
    const PLAN_FREQUENCY_6 = 6;
    const STATUS_E = 'E';
    const STATUS_A = 'A';
    const STATUS_D = 'D';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getPlanFrequencyAllowableValues()
    {
        return [
            self::PLAN_FREQUENCY_0,
            self::PLAN_FREQUENCY_1,
            self::PLAN_FREQUENCY_3,
            self::PLAN_FREQUENCY_4,
            self::PLAN_FREQUENCY_5,
            self::PLAN_FREQUENCY_6,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getStatusAllowableValues()
    {
        return [
            self::STATUS_E,
            self::STATUS_A,
            self::STATUS_D,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['plan_id'] = isset($data['plan_id']) ? $data['plan_id'] : null;
        $this->container['merchant_id'] = isset($data['merchant_id']) ? $data['merchant_id'] : null;
        $this->container['plan_code'] = isset($data['plan_code']) ? $data['plan_code'] : null;
        $this->container['plan_name'] = isset($data['plan_name']) ? $data['plan_name'] : null;
        $this->container['plan_desc'] = isset($data['plan_desc']) ? $data['plan_desc'] : null;
        $this->container['plan_frequency'] = isset($data['plan_frequency']) ? $data['plan_frequency'] : null;
        $this->container['interval'] = isset($data['interval']) ? $data['interval'] : null;
        $this->container['plan_duration'] = isset($data['plan_duration']) ? $data['plan_duration'] : null;
        $this->container['status'] = isset($data['status']) ? $data['status'] : null;
        $this->container['trial_duration'] = isset($data['trial_duration']) ? $data['trial_duration'] : null;
        $this->container['amt_trial'] = isset($data['amt_trial']) ? $data['amt_trial'] : null;
        $this->container['amt_setup'] = isset($data['amt_setup']) ? $data['amt_setup'] : null;
        $this->container['amt_tran'] = isset($data['amt_tran']) ? $data['amt_tran'] : null;
        $this->container['tran_currency'] = isset($data['tran_currency']) ? $data['tran_currency'] : null;
        $this->container['profile_id'] = isset($data['profile_id']) ? $data['profile_id'] : null;
        $this->container['bill_specific_day'] = isset($data['bill_specific_day']) ? $data['bill_specific_day'] : null;
        $this->container['day_of_week'] = isset($data['day_of_week']) ? $data['day_of_week'] : null;
        $this->container['day_of_month'] = isset($data['day_of_month']) ? $data['day_of_month'] : null;
        $this->container['month'] = isset($data['month']) ? $data['month'] : null;
        $this->container['prorate_first_pmt'] = isset($data['prorate_first_pmt']) ? $data['prorate_first_pmt'] : null;
        $this->container['amt_prorate'] = isset($data['amt_prorate']) ? $data['amt_prorate'] : null;
        $this->container['db_timestamp'] = isset($data['db_timestamp']) ? $data['db_timestamp'] : null;
        $this->container['mod_timestamp'] = isset($data['mod_timestamp']) ? $data['mod_timestamp'] : null;
        $this->container['vendor_id'] = isset($data['vendor_id']) ? $data['vendor_id'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getPlanFrequencyAllowableValues();
        if (!in_array($this->container['plan_frequency'], $allowedValues)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'plan_frequency', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getStatusAllowableValues();
        if (!in_array($this->container['status'], $allowedValues)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'status', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        $allowedValues = $this->getPlanFrequencyAllowableValues();
        if (!in_array($this->container['plan_frequency'], $allowedValues)) {
            return false;
        }
        $allowedValues = $this->getStatusAllowableValues();
        if (!in_array($this->container['status'], $allowedValues)) {
            return false;
        }
        return true;
    }


    /**
     * Gets plan_id
     *
     * @return int
     */
    public function getPlanId()
    {
        return $this->container['plan_id'];
    }

    /**
     * Sets plan_id
     *
     * @param int $plan_id Unique ID generated by Qualpay for a Plan.
     *
     * @return $this
     */
    public function setPlanId($plan_id)
    {
        $this->container['plan_id'] = $plan_id;

        return $this;
    }

    /**
     * Gets merchant_id
     *
     * @return int
     */
    public function getMerchantId()
    {
        return $this->container['merchant_id'];
    }

    /**
     * Sets merchant_id
     *
     * @param int $merchant_id Qualpay assigned ID to identify a Merchant.
     *
     * @return $this
     */
    public function setMerchantId($merchant_id)
    {
        $this->container['merchant_id'] = $merchant_id;

        return $this;
    }

    /**
     * Gets plan_code
     *
     * @return string
     */
    public function getPlanCode()
    {
        return $this->container['plan_code'];
    }

    /**
     * Sets plan_code
     *
     * @param string $plan_code A code assigned by merchant to a plan. Should be Unique. Plan Code cannot exceed 16 characters in length.
     *
     * @return $this
     */
    public function setPlanCode($plan_code)
    {
        $this->container['plan_code'] = $plan_code;

        return $this;
    }

    /**
     * Gets plan_name
     *
     * @return string
     */
    public function getPlanName()
    {
        return $this->container['plan_name'];
    }

    /**
     * Sets plan_name
     *
     * @param string $plan_name A name assigned by merchant to a plan. Should be unique. Plan Name cannot exceed 64 characters in length.
     *
     * @return $this
     */
    public function setPlanName($plan_name)
    {
        $this->container['plan_name'] = $plan_name;

        return $this;
    }

    /**
     * Gets plan_desc
     *
     * @return string
     */
    public function getPlanDesc()
    {
        return $this->container['plan_desc'];
    }

    /**
     * Sets plan_desc
     *
     * @param string $plan_desc A short description of the plan.
     *
     * @return $this
     */
    public function setPlanDesc($plan_desc)
    {
        $this->container['plan_desc'] = $plan_desc;

        return $this;
    }

    /**
     * Gets plan_frequency
     *
     * @return int
     */
    public function getPlanFrequency()
    {
        return $this->container['plan_frequency'];
    }

    /**
     * Sets plan_frequency
     *
     * @param int $plan_frequency This field identifies the frequency of billing. Use one of the following codes for frequency. <ul>      <li>0 - Weekly</li>      <li>1 - Bi-Weekly</li>      <li>3 - Monthly</li>      <li>4 - Quarterly</li>      <li>5 - BiAnnually</li>      <li>6 - Annually</li>   </ul>
     *
     * @return $this
     */
    public function setPlanFrequency($plan_frequency)
    {
        $allowedValues = $this->getPlanFrequencyAllowableValues();
        if (!is_null($plan_frequency) && !in_array($plan_frequency, $allowedValues)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'plan_frequency', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['plan_frequency'] = $plan_frequency;

        return $this;
    }

    /**
     * Gets interval
     *
     * @return int
     */
    public function getInterval()
    {
        return $this->container['interval'];
    }

    /**
     * Sets interval
     *
     * @param int $interval Applicable only for monthly or weekly plans. Number of months/weeks in a subscription cycle.
     *
     * @return $this
     */
    public function setInterval($interval)
    {
        $this->container['interval'] = $interval;

        return $this;
    }

    /**
     * Gets plan_duration
     *
     * @return int
     */
    public function getPlanDuration()
    {
        return $this->container['plan_duration'];
    }

    /**
     * Sets plan_duration
     *
     * @param int $plan_duration Number of billing cycles in the recurring transaction, Use -1 if billing cycles are indefinite.
     *
     * @return $this
     */
    public function setPlanDuration($plan_duration)
    {
        $this->container['plan_duration'] = $plan_duration;

        return $this;
    }

    /**
     * Gets status
     *
     * @return string
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param string $status Status of a Plan. Allowable values are as follows: <ul><li>E - Active</li><li>A - Archived</li><li>D - Deleted</li></ul>
     *
     * @return $this
     */
    public function setStatus($status)
    {
        $allowedValues = $this->getStatusAllowableValues();
        if (!is_null($status) && !in_array($status, $allowedValues)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'status', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets trial_duration
     *
     * @return int
     */
    public function getTrialDuration()
    {
        return $this->container['trial_duration'];
    }

    /**
     * Sets trial_duration
     *
     * @param int $trial_duration Number of billing cycles when the subscription will be in trial period.
     *
     * @return $this
     */
    public function setTrialDuration($trial_duration)
    {
        $this->container['trial_duration'] = $trial_duration;

        return $this;
    }

    /**
     * Gets amt_trial
     *
     * @return double
     */
    public function getAmtTrial()
    {
        return $this->container['amt_trial'];
    }

    /**
     * Sets amt_trial
     *
     * @param double $amt_trial Amount to be billed during the trial period.
     *
     * @return $this
     */
    public function setAmtTrial($amt_trial)
    {
        $this->container['amt_trial'] = $amt_trial;

        return $this;
    }

    /**
     * Gets amt_setup
     *
     * @return double
     */
    public function getAmtSetup()
    {
        return $this->container['amt_setup'];
    }

    /**
     * Sets amt_setup
     *
     * @param double $amt_setup One-Time Fee amount. This fee will be charged when a subscription is added.
     *
     * @return $this
     */
    public function setAmtSetup($amt_setup)
    {
        $this->container['amt_setup'] = $amt_setup;

        return $this;
    }

    /**
     * Gets amt_tran
     *
     * @return double
     */
    public function getAmtTran()
    {
        return $this->container['amt_tran'];
    }

    /**
     * Sets amt_tran
     *
     * @param double $amt_tran Plan Transaction Amount. Amount that will be billed each cycle period.
     *
     * @return $this
     */
    public function setAmtTran($amt_tran)
    {
        $this->container['amt_tran'] = $amt_tran;

        return $this;
    }

    /**
     * Gets tran_currency
     *
     * @return string
     */
    public function getTranCurrency()
    {
        return $this->container['tran_currency'];
    }

    /**
     * Sets tran_currency
     *
     * @param string $tran_currency Numeric Currency Code. If Profile_id is provded, the currency is determined from profile. Default is 840 - USD. Refer to <a href=\"/developer/api/reference#country-codes\"target=\"_blank\">Country Codes</a> for a list of currency codes.
     *
     * @return $this
     */
    public function setTranCurrency($tran_currency)
    {
        $this->container['tran_currency'] = $tran_currency;

        return $this;
    }

    /**
     * Gets profile_id
     *
     * @return string
     */
    public function getProfileId()
    {
        return $this->container['profile_id'];
    }

    /**
     * Sets profile_id
     *
     * @param string $profile_id Payment Gateway Profile id that will be used when billing transactions. tran_currency will be used if profile_id is not provided.If both tran_currency and profile_id is not provided, default USD profile is used.
     *
     * @return $this
     */
    public function setProfileId($profile_id)
    {
        $this->container['profile_id'] = $profile_id;

        return $this;
    }

    /**
     * Gets bill_specific_day
     *
     * @return bool
     */
    public function getBillSpecificDay()
    {
        return $this->container['bill_specific_day'];
    }

    /**
     * Sets bill_specific_day
     *
     * @param bool $bill_specific_day If set to true, customer will be billed on a specific start day.
     *
     * @return $this
     */
    public function setBillSpecificDay($bill_specific_day)
    {
        $this->container['bill_specific_day'] = $bill_specific_day;

        return $this;
    }

    /**
     * Gets day_of_week
     *
     * @return int
     */
    public function getDayOfWeek()
    {
        return $this->container['day_of_week'];
    }

    /**
     * Sets day_of_week
     *
     * @param int $day_of_week This field represents the day of the week on which the system will be billed for weekly or biweekly plans.Applicable only if billing on specific days , i.e., bill_specific_day is true. <ul><li>1 - Sunday</li><li>2 - Monday</li><li>3 - Tuesday</li><li>4 - Wednesday</li><li>5 - Thursday</li><li>6 - Friday</li><li>7 - Saturday</li></ul>
     *
     * @return $this
     */
    public function setDayOfWeek($day_of_week)
    {
        $this->container['day_of_week'] = $day_of_week;

        return $this;
    }

    /**
     * Gets day_of_month
     *
     * @return int
     */
    public function getDayOfMonth()
    {
        return $this->container['day_of_month'];
    }

    /**
     * Sets day_of_month
     *
     * @param int $day_of_month Applicable only if billing on specific days , i.e., bill_specific_day is true. Day of the month on which the system will be billed for month or year based plans. Use 1-31 to represent the day of month when the customerwill be billed or 32 if billing should be on the last day of month.
     *
     * @return $this
     */
    public function setDayOfMonth($day_of_month)
    {
        $this->container['day_of_month'] = $day_of_month;

        return $this;
    }

    /**
     * Gets month
     *
     * @return int
     */
    public function getMonth()
    {
        return $this->container['month'];
    }

    /**
     * Sets month
     *
     * @param int $month Month on which the system will be billed for month or year based plans. Applicable only if billing on specific days , i.e., bill_specific_day is true.<ul><li>1 - January</li><li>2 - February</li><li>3 - March</li><li>4 - April</li><li>5 - May</li><li>6 - June</li><li>7 - July</li><li>8 - August</li><li>9 - September</li><li>10 - October</li><li>11 - November</li><li>12 - December</li></ul>
     *
     * @return $this
     */
    public function setMonth($month)
    {
        $this->container['month'] = $month;

        return $this;
    }

    /**
     * Gets prorate_first_pmt
     *
     * @return bool
     */
    public function getProrateFirstPmt()
    {
        return $this->container['prorate_first_pmt'];
    }

    /**
     * Sets prorate_first_pmt
     *
     * @param bool $prorate_first_pmt Set this flag to true if first payment should be prorated. Applicable only when billing is on specific days , i.e., bill_specific_day flag is set to true.
     *
     * @return $this
     */
    public function setProrateFirstPmt($prorate_first_pmt)
    {
        $this->container['prorate_first_pmt'] = $prorate_first_pmt;

        return $this;
    }

    /**
     * Gets amt_prorate
     *
     * @return double
     */
    public function getAmtProrate()
    {
        return $this->container['amt_prorate'];
    }

    /**
     * Sets amt_prorate
     *
     * @param double $amt_prorate Fixed prorate amount for first payment. This field is applicable only if prorate_first_pmt is set to true.  If set to zero or undefined, the system will calculate the prorate amount.
     *
     * @return $this
     */
    public function setAmtProrate($amt_prorate)
    {
        $this->container['amt_prorate'] = $amt_prorate;

        return $this;
    }

    /**
     * Gets db_timestamp
     *
     * @return string
     */
    public function getDbTimestamp()
    {
        return $this->container['db_timestamp'];
    }

    /**
     * Sets db_timestamp
     *
     * @param string $db_timestamp Date/time the plan was created in YYYY-MM-DD hh:mm:ss format.
     *
     * @return $this
     */
    public function setDbTimestamp($db_timestamp)
    {
        $this->container['db_timestamp'] = $db_timestamp;

        return $this;
    }

    /**
     * Gets mod_timestamp
     *
     * @return string
     */
    public function getModTimestamp()
    {
        return $this->container['mod_timestamp'];
    }

    /**
     * Sets mod_timestamp
     *
     * @param string $mod_timestamp Date/time the plan was last modified in YYYY-MM-DD hh:mm:ss format.
     *
     * @return $this
     */
    public function setModTimestamp($mod_timestamp)
    {
        $this->container['mod_timestamp'] = $mod_timestamp;

        return $this;
    }

    /**
     * Gets vendor_id
     *
     * @return int
     */
    public function getVendorId()
    {
        return $this->container['vendor_id'];
    }

    /**
     * Sets vendor_id
     *
     * @param int $vendor_id Identifies the vendor to which this request applies. Applicable only if this request is on behalf of another merchant.
     *
     * @return $this
     */
    public function setVendorId($vendor_id)
    {
        $this->container['vendor_id'] = $vendor_id;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


