<?php
/**
 * ShippingAddress
 *
 * PHP version 5
 *
 * @category Class
 * @package  calderaPayQualpayPlatform
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Qualpay Platform API
 *
 * This document describes the Qualpay Platform API.
 *
 * OpenAPI spec version: 1.1.9
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.3.1
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace calderaPayQualpayPlatform\Model;

use \ArrayAccess;
use \calderaPayQualpayPlatform\ObjectSerializer;

/**
 * ShippingAddress Class Doc Comment
 *
 * @category Class
 * @package  calderaPayQualpayPlatform
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class ShippingAddress implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'ShippingAddress';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'shipping_id' => 'int',
        'shipping_first_name' => 'string',
        'shipping_last_name' => 'string',
        'shipping_firm_name' => 'string',
        'shipping_addr1' => 'string',
        'shipping_addr2' => 'string',
        'shipping_city' => 'string',
        'shipping_state' => 'string',
        'shipping_country' => 'string',
        'shipping_country_code' => 'string',
        'shipping_zip' => 'string',
        'shipping_zip4' => 'string',
        'primary' => 'bool',
        'vendor_id' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'shipping_id' => 'int64',
        'shipping_first_name' => null,
        'shipping_last_name' => null,
        'shipping_firm_name' => null,
        'shipping_addr1' => null,
        'shipping_addr2' => null,
        'shipping_city' => null,
        'shipping_state' => null,
        'shipping_country' => null,
        'shipping_country_code' => null,
        'shipping_zip' => null,
        'shipping_zip4' => null,
        'primary' => null,
        'vendor_id' => 'int64'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'shipping_id' => 'shipping_id',
        'shipping_first_name' => 'shipping_first_name',
        'shipping_last_name' => 'shipping_last_name',
        'shipping_firm_name' => 'shipping_firm_name',
        'shipping_addr1' => 'shipping_addr1',
        'shipping_addr2' => 'shipping_addr2',
        'shipping_city' => 'shipping_city',
        'shipping_state' => 'shipping_state',
        'shipping_country' => 'shipping_country',
        'shipping_country_code' => 'shipping_country_code',
        'shipping_zip' => 'shipping_zip',
        'shipping_zip4' => 'shipping_zip4',
        'primary' => 'primary',
        'vendor_id' => 'vendor_id'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'shipping_id' => 'setShippingId',
        'shipping_first_name' => 'setShippingFirstName',
        'shipping_last_name' => 'setShippingLastName',
        'shipping_firm_name' => 'setShippingFirmName',
        'shipping_addr1' => 'setShippingAddr1',
        'shipping_addr2' => 'setShippingAddr2',
        'shipping_city' => 'setShippingCity',
        'shipping_state' => 'setShippingState',
        'shipping_country' => 'setShippingCountry',
        'shipping_country_code' => 'setShippingCountryCode',
        'shipping_zip' => 'setShippingZip',
        'shipping_zip4' => 'setShippingZip4',
        'primary' => 'setPrimary',
        'vendor_id' => 'setVendorId'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'shipping_id' => 'getShippingId',
        'shipping_first_name' => 'getShippingFirstName',
        'shipping_last_name' => 'getShippingLastName',
        'shipping_firm_name' => 'getShippingFirmName',
        'shipping_addr1' => 'getShippingAddr1',
        'shipping_addr2' => 'getShippingAddr2',
        'shipping_city' => 'getShippingCity',
        'shipping_state' => 'getShippingState',
        'shipping_country' => 'getShippingCountry',
        'shipping_country_code' => 'getShippingCountryCode',
        'shipping_zip' => 'getShippingZip',
        'shipping_zip4' => 'getShippingZip4',
        'primary' => 'getPrimary',
        'vendor_id' => 'getVendorId'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['shipping_id'] = isset($data['shipping_id']) ? $data['shipping_id'] : null;
        $this->container['shipping_first_name'] = isset($data['shipping_first_name']) ? $data['shipping_first_name'] : null;
        $this->container['shipping_last_name'] = isset($data['shipping_last_name']) ? $data['shipping_last_name'] : null;
        $this->container['shipping_firm_name'] = isset($data['shipping_firm_name']) ? $data['shipping_firm_name'] : null;
        $this->container['shipping_addr1'] = isset($data['shipping_addr1']) ? $data['shipping_addr1'] : null;
        $this->container['shipping_addr2'] = isset($data['shipping_addr2']) ? $data['shipping_addr2'] : null;
        $this->container['shipping_city'] = isset($data['shipping_city']) ? $data['shipping_city'] : null;
        $this->container['shipping_state'] = isset($data['shipping_state']) ? $data['shipping_state'] : null;
        $this->container['shipping_country'] = isset($data['shipping_country']) ? $data['shipping_country'] : null;
        $this->container['shipping_country_code'] = isset($data['shipping_country_code']) ? $data['shipping_country_code'] : null;
        $this->container['shipping_zip'] = isset($data['shipping_zip']) ? $data['shipping_zip'] : null;
        $this->container['shipping_zip4'] = isset($data['shipping_zip4']) ? $data['shipping_zip4'] : null;
        $this->container['primary'] = isset($data['primary']) ? $data['primary'] : null;
        $this->container['vendor_id'] = isset($data['vendor_id']) ? $data['vendor_id'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['shipping_first_name'] === null) {
            $invalidProperties[] = "'shipping_first_name' can't be null";
        }
        if ($this->container['shipping_last_name'] === null) {
            $invalidProperties[] = "'shipping_last_name' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        if ($this->container['shipping_first_name'] === null) {
            return false;
        }
        if ($this->container['shipping_last_name'] === null) {
            return false;
        }
        return true;
    }


    /**
     * Gets shipping_id
     *
     * @return int
     */
    public function getShippingId()
    {
        return $this->container['shipping_id'];
    }

    /**
     * Sets shipping_id
     *
     * @param int $shipping_id Unique id generated by Qualpay to identify the address for a customer.
     *
     * @return $this
     */
    public function setShippingId($shipping_id)
    {
        $this->container['shipping_id'] = $shipping_id;

        return $this;
    }

    /**
     * Gets shipping_first_name
     *
     * @return string
     */
    public function getShippingFirstName()
    {
        return $this->container['shipping_first_name'];
    }

    /**
     * Sets shipping_first_name
     *
     * @param string $shipping_first_name Shipping First Name. Can contain upto 32 characters.
     *
     * @return $this
     */
    public function setShippingFirstName($shipping_first_name)
    {
        $this->container['shipping_first_name'] = $shipping_first_name;

        return $this;
    }

    /**
     * Gets shipping_last_name
     *
     * @return string
     */
    public function getShippingLastName()
    {
        return $this->container['shipping_last_name'];
    }

    /**
     * Sets shipping_last_name
     *
     * @param string $shipping_last_name Shipping Last Name. Can contain upto 32 characters.
     *
     * @return $this
     */
    public function setShippingLastName($shipping_last_name)
    {
        $this->container['shipping_last_name'] = $shipping_last_name;

        return $this;
    }

    /**
     * Gets shipping_firm_name
     *
     * @return string
     */
    public function getShippingFirmName()
    {
        return $this->container['shipping_firm_name'];
    }

    /**
     * Sets shipping_firm_name
     *
     * @param string $shipping_firm_name Shipping address business name, if applicable.
     *
     * @return $this
     */
    public function setShippingFirmName($shipping_firm_name)
    {
        $this->container['shipping_firm_name'] = $shipping_firm_name;

        return $this;
    }

    /**
     * Gets shipping_addr1
     *
     * @return string
     */
    public function getShippingAddr1()
    {
        return $this->container['shipping_addr1'];
    }

    /**
     * Sets shipping_addr1
     *
     * @param string $shipping_addr1 Shipping Address line Item 1
     *
     * @return $this
     */
    public function setShippingAddr1($shipping_addr1)
    {
        $this->container['shipping_addr1'] = $shipping_addr1;

        return $this;
    }

    /**
     * Gets shipping_addr2
     *
     * @return string
     */
    public function getShippingAddr2()
    {
        return $this->container['shipping_addr2'];
    }

    /**
     * Sets shipping_addr2
     *
     * @param string $shipping_addr2 Shipping Address line Item 2
     *
     * @return $this
     */
    public function setShippingAddr2($shipping_addr2)
    {
        $this->container['shipping_addr2'] = $shipping_addr2;

        return $this;
    }

    /**
     * Gets shipping_city
     *
     * @return string
     */
    public function getShippingCity()
    {
        return $this->container['shipping_city'];
    }

    /**
     * Sets shipping_city
     *
     * @param string $shipping_city Shipping City
     *
     * @return $this
     */
    public function setShippingCity($shipping_city)
    {
        $this->container['shipping_city'] = $shipping_city;

        return $this;
    }

    /**
     * Gets shipping_state
     *
     * @return string
     */
    public function getShippingState()
    {
        return $this->container['shipping_state'];
    }

    /**
     * Sets shipping_state
     *
     * @param string $shipping_state Shipping State
     *
     * @return $this
     */
    public function setShippingState($shipping_state)
    {
        $this->container['shipping_state'] = $shipping_state;

        return $this;
    }

    /**
     * Gets shipping_country
     *
     * @return string
     */
    public function getShippingCountry()
    {
        return $this->container['shipping_country'];
    }

    /**
     * Sets shipping_country
     *
     * @param string $shipping_country Shipping Country
     *
     * @return $this
     */
    public function setShippingCountry($shipping_country)
    {
        $this->container['shipping_country'] = $shipping_country;

        return $this;
    }

    /**
     * Gets shipping_country_code
     *
     * @return string
     */
    public function getShippingCountryCode()
    {
        return $this->container['shipping_country_code'];
    }

    /**
     * Sets shipping_country_code
     *
     * @param string $shipping_country_code ISO numeric country code for the shipping address. Refer to <a href=\"/developer/api/reference#country-codes\"target=\"_blank\">Country Codes</a> for a list of country codes.
     *
     * @return $this
     */
    public function setShippingCountryCode($shipping_country_code)
    {
        $this->container['shipping_country_code'] = $shipping_country_code;

        return $this;
    }

    /**
     * Gets shipping_zip
     *
     * @return string
     */
    public function getShippingZip()
    {
        return $this->container['shipping_zip'];
    }

    /**
     * Sets shipping_zip
     *
     * @param string $shipping_zip Shipping zip
     *
     * @return $this
     */
    public function setShippingZip($shipping_zip)
    {
        $this->container['shipping_zip'] = $shipping_zip;

        return $this;
    }

    /**
     * Gets shipping_zip4
     *
     * @return string
     */
    public function getShippingZip4()
    {
        return $this->container['shipping_zip4'];
    }

    /**
     * Sets shipping_zip4
     *
     * @param string $shipping_zip4 Shipping zip+4 code if applicable.
     *
     * @return $this
     */
    public function setShippingZip4($shipping_zip4)
    {
        $this->container['shipping_zip4'] = $shipping_zip4;

        return $this;
    }

    /**
     * Gets primary
     *
     * @return bool
     */
    public function getPrimary()
    {
        return $this->container['primary'];
    }

    /**
     * Sets primary
     *
     * @param bool $primary Set this field to true if this should be the default address. If there are multiple addresses with primary true, only one of the card will be choosen to be the defaul address. Default value is false.
     *
     * @return $this
     */
    public function setPrimary($primary)
    {
        $this->container['primary'] = $primary;

        return $this;
    }

    /**
     * Gets vendor_id
     *
     * @return int
     */
    public function getVendorId()
    {
        return $this->container['vendor_id'];
    }

    /**
     * Sets vendor_id
     *
     * @param int $vendor_id Identifies the vendor to which this request applies. Applicable only if this request is on behalf of another merchant.
     *
     * @return $this
     */
    public function setVendorId($vendor_id)
    {
        $this->container['vendor_id'] = $vendor_id;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


