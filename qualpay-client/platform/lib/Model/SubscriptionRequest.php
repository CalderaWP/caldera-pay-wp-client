<?php
/**
 * SubscriptionRequest
 *
 * PHP version 5
 *
 * @category Class
 * @package  calderaPayQualpayPlatform
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Qualpay Platform API
 *
 * This document describes the Qualpay Platform API.
 *
 * OpenAPI spec version: 1.1.9
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.3.1
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace calderaPayQualpayPlatform\Model;

use \ArrayAccess;
use \calderaPayQualpayPlatform\ObjectSerializer;

/**
 * SubscriptionRequest Class Doc Comment
 *
 * @category Class
 * @package  calderaPayQualpayPlatform
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class SubscriptionRequest implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'SubscriptionRequest';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'date_start' => 'string',
        'customer_id' => 'string',
        'plan_code' => 'string',
        'plan_desc' => 'string',
        'plan_frequency' => 'int',
        'interval' => 'int',
        'plan_duration' => 'int',
        'amt_setup' => 'double',
        'amt_tran' => 'double',
        'profile_id' => 'string',
        'tran_currency' => 'string',
        'use_existing_customer' => 'bool',
        'customer' => '\calderaPayQualpayPlatform\Model\CustomerVault',
        'vendor_id' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'date_start' => null,
        'customer_id' => null,
        'plan_code' => null,
        'plan_desc' => null,
        'plan_frequency' => 'int32',
        'interval' => 'int32',
        'plan_duration' => 'int32',
        'amt_setup' => 'double',
        'amt_tran' => 'double',
        'profile_id' => null,
        'tran_currency' => null,
        'use_existing_customer' => null,
        'customer' => null,
        'vendor_id' => 'int64'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'date_start' => 'date_start',
        'customer_id' => 'customer_id',
        'plan_code' => 'plan_code',
        'plan_desc' => 'plan_desc',
        'plan_frequency' => 'plan_frequency',
        'interval' => 'interval',
        'plan_duration' => 'plan_duration',
        'amt_setup' => 'amt_setup',
        'amt_tran' => 'amt_tran',
        'profile_id' => 'profile_id',
        'tran_currency' => 'tran_currency',
        'use_existing_customer' => 'use_existing_customer',
        'customer' => 'customer',
        'vendor_id' => 'vendor_id'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'date_start' => 'setDateStart',
        'customer_id' => 'setCustomerId',
        'plan_code' => 'setPlanCode',
        'plan_desc' => 'setPlanDesc',
        'plan_frequency' => 'setPlanFrequency',
        'interval' => 'setInterval',
        'plan_duration' => 'setPlanDuration',
        'amt_setup' => 'setAmtSetup',
        'amt_tran' => 'setAmtTran',
        'profile_id' => 'setProfileId',
        'tran_currency' => 'setTranCurrency',
        'use_existing_customer' => 'setUseExistingCustomer',
        'customer' => 'setCustomer',
        'vendor_id' => 'setVendorId'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'date_start' => 'getDateStart',
        'customer_id' => 'getCustomerId',
        'plan_code' => 'getPlanCode',
        'plan_desc' => 'getPlanDesc',
        'plan_frequency' => 'getPlanFrequency',
        'interval' => 'getInterval',
        'plan_duration' => 'getPlanDuration',
        'amt_setup' => 'getAmtSetup',
        'amt_tran' => 'getAmtTran',
        'profile_id' => 'getProfileId',
        'tran_currency' => 'getTranCurrency',
        'use_existing_customer' => 'getUseExistingCustomer',
        'customer' => 'getCustomer',
        'vendor_id' => 'getVendorId'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const PLAN_FREQUENCY_0 = 0;
    const PLAN_FREQUENCY_1 = 1;
    const PLAN_FREQUENCY_3 = 3;
    const PLAN_FREQUENCY_4 = 4;
    const PLAN_FREQUENCY_5 = 5;
    const PLAN_FREQUENCY_6 = 6;
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getPlanFrequencyAllowableValues()
    {
        return [
            self::PLAN_FREQUENCY_0,
            self::PLAN_FREQUENCY_1,
            self::PLAN_FREQUENCY_3,
            self::PLAN_FREQUENCY_4,
            self::PLAN_FREQUENCY_5,
            self::PLAN_FREQUENCY_6,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['date_start'] = isset($data['date_start']) ? $data['date_start'] : null;
        $this->container['customer_id'] = isset($data['customer_id']) ? $data['customer_id'] : null;
        $this->container['plan_code'] = isset($data['plan_code']) ? $data['plan_code'] : null;
        $this->container['plan_desc'] = isset($data['plan_desc']) ? $data['plan_desc'] : null;
        $this->container['plan_frequency'] = isset($data['plan_frequency']) ? $data['plan_frequency'] : null;
        $this->container['interval'] = isset($data['interval']) ? $data['interval'] : null;
        $this->container['plan_duration'] = isset($data['plan_duration']) ? $data['plan_duration'] : null;
        $this->container['amt_setup'] = isset($data['amt_setup']) ? $data['amt_setup'] : null;
        $this->container['amt_tran'] = isset($data['amt_tran']) ? $data['amt_tran'] : null;
        $this->container['profile_id'] = isset($data['profile_id']) ? $data['profile_id'] : null;
        $this->container['tran_currency'] = isset($data['tran_currency']) ? $data['tran_currency'] : null;
        $this->container['use_existing_customer'] = isset($data['use_existing_customer']) ? $data['use_existing_customer'] : null;
        $this->container['customer'] = isset($data['customer']) ? $data['customer'] : null;
        $this->container['vendor_id'] = isset($data['vendor_id']) ? $data['vendor_id'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getPlanFrequencyAllowableValues();
        if (!in_array($this->container['plan_frequency'], $allowedValues)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'plan_frequency', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        $allowedValues = $this->getPlanFrequencyAllowableValues();
        if (!in_array($this->container['plan_frequency'], $allowedValues)) {
            return false;
        }
        return true;
    }


    /**
     * Gets date_start
     *
     * @return string
     */
    public function getDateStart()
    {
        return $this->container['date_start'];
    }

    /**
     * Sets date_start
     *
     * @param string $date_start Date Subscription will start
     *
     * @return $this
     */
    public function setDateStart($date_start)
    {
        $this->container['date_start'] = $date_start;

        return $this;
    }

    /**
     * Gets customer_id
     *
     * @return string
     */
    public function getCustomerId()
    {
        return $this->container['customer_id'];
    }

    /**
     * Sets customer_id
     *
     * @param string $customer_id Customer ID of the Subscriber. Customer ID should be a valid customer from theCustomer Vault
     *
     * @return $this
     */
    public function setCustomerId($customer_id)
    {
        $this->container['customer_id'] = $customer_id;

        return $this;
    }

    /**
     * Gets plan_code
     *
     * @return string
     */
    public function getPlanCode()
    {
        return $this->container['plan_code'];
    }

    /**
     * Sets plan_code
     *
     * @param string $plan_code Plan code of the Recurring Plan. Plan should be an active, valid recurring plan. Required only if subscription is on a plan. Do not define this field if adding a subscription with a one-off plan.
     *
     * @return $this
     */
    public function setPlanCode($plan_code)
    {
        $this->container['plan_code'] = $plan_code;

        return $this;
    }

    /**
     * Gets plan_desc
     *
     * @return string
     */
    public function getPlanDesc()
    {
        return $this->container['plan_desc'];
    }

    /**
     * Sets plan_desc
     *
     * @param string $plan_desc Applicable only to one-off subscriptions. A short description of the one off plan.
     *
     * @return $this
     */
    public function setPlanDesc($plan_desc)
    {
        $this->container['plan_desc'] = $plan_desc;

        return $this;
    }

    /**
     * Gets plan_frequency
     *
     * @return int
     */
    public function getPlanFrequency()
    {
        return $this->container['plan_frequency'];
    }

    /**
     * Sets plan_frequency
     *
     * @param int $plan_frequency Applicable only to one-off subscriptions. Required for one-off subscriptions. This field identifies the frequency of billing. Use one of the following codes for frequency. <ul>      <li>0 - Weekly</li>      <li>1 - Bi-Weekly</li>      <li>3 - Monthly</li>      <li>4 - Quarterly</li>      <li>5 - BiAnnually</li>      <li>6 - Annually</li>   </ul>
     *
     * @return $this
     */
    public function setPlanFrequency($plan_frequency)
    {
        $allowedValues = $this->getPlanFrequencyAllowableValues();
        if (!is_null($plan_frequency) && !in_array($plan_frequency, $allowedValues)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'plan_frequency', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['plan_frequency'] = $plan_frequency;

        return $this;
    }

    /**
     * Gets interval
     *
     * @return int
     */
    public function getInterval()
    {
        return $this->container['interval'];
    }

    /**
     * Sets interval
     *
     * @param int $interval Applicable only to one-off subscriptions. Applicable only for monthly frequency. Number of months in a subscription cycle.
     *
     * @return $this
     */
    public function setInterval($interval)
    {
        $this->container['interval'] = $interval;

        return $this;
    }

    /**
     * Gets plan_duration
     *
     * @return int
     */
    public function getPlanDuration()
    {
        return $this->container['plan_duration'];
    }

    /**
     * Sets plan_duration
     *
     * @param int $plan_duration Applicable only to one-off subscriptions. Required for one-off subscriptions. Number of billing cycles in the recurring transaction, Use -1 if billing cycles are indefinite
     *
     * @return $this
     */
    public function setPlanDuration($plan_duration)
    {
        $this->container['plan_duration'] = $plan_duration;

        return $this;
    }

    /**
     * Gets amt_setup
     *
     * @return double
     */
    public function getAmtSetup()
    {
        return $this->container['amt_setup'];
    }

    /**
     * Sets amt_setup
     *
     * @param double $amt_setup Applicable only to one-off subscriptions. One-Time Fee amount. This fee will be charged when a subscription is added.
     *
     * @return $this
     */
    public function setAmtSetup($amt_setup)
    {
        $this->container['amt_setup'] = $amt_setup;

        return $this;
    }

    /**
     * Gets amt_tran
     *
     * @return double
     */
    public function getAmtTran()
    {
        return $this->container['amt_tran'];
    }

    /**
     * Sets amt_tran
     *
     * @param double $amt_tran Plan Transaction Amount. Amount that will be billed each cycle period. Applicable only to one-off subscriptions. <br><strong>Conditional Requirement: </strong>Required for one-off subscription.
     *
     * @return $this
     */
    public function setAmtTran($amt_tran)
    {
        $this->container['amt_tran'] = $amt_tran;

        return $this;
    }

    /**
     * Gets profile_id
     *
     * @return string
     */
    public function getProfileId()
    {
        return $this->container['profile_id'];
    }

    /**
     * Sets profile_id
     *
     * @param string $profile_id Applicable only to one-off subscriptions. Payment Gateway Profile id that will be used when billing transactions. tran_currency will be used if profile_id is not provided.If both tran_currency and profile_id is not provided, default USD profile is used.
     *
     * @return $this
     */
    public function setProfileId($profile_id)
    {
        $this->container['profile_id'] = $profile_id;

        return $this;
    }

    /**
     * Gets tran_currency
     *
     * @return string
     */
    public function getTranCurrency()
    {
        return $this->container['tran_currency'];
    }

    /**
     * Sets tran_currency
     *
     * @param string $tran_currency Applicable only to one-off subscriptions. Numeric Currency Code. If Profile_id is provded, the currency is determined from profile. Default is 840 - USD. Refer to <a href=\"/developer/api/reference#country-codes\"target=\"_blank\">Country Codes</a> for a list of currency codes.
     *
     * @return $this
     */
    public function setTranCurrency($tran_currency)
    {
        $this->container['tran_currency'] = $tran_currency;

        return $this;
    }

    /**
     * Gets use_existing_customer
     *
     * @return bool
     */
    public function getUseExistingCustomer()
    {
        return $this->container['use_existing_customer'];
    }

    /**
     * Sets use_existing_customer
     *
     * @param bool $use_existing_customer Use an existing customer_id if one is available. Applicable only when adding subscriptions. If there is an existing customer with the same customer_first_name and customer_last_name and primary card_number or card_id, then the subscription is added to the matching customer.  If a customer is not found, a new customer is generated. The generated customer_id will be returned in the response. <br><strong>Default: </strong>false<br><strong>Conditional Requirement: </strong>customer is required, if this field is set to true.
     *
     * @return $this
     */
    public function setUseExistingCustomer($use_existing_customer)
    {
        $this->container['use_existing_customer'] = $use_existing_customer;

        return $this;
    }

    /**
     * Gets customer
     *
     * @return \calderaPayQualpayPlatform\Model\CustomerVault
     */
    public function getCustomer()
    {
        return $this->container['customer'];
    }

    /**
     * Sets customer
     *
     * @param \calderaPayQualpayPlatform\Model\CustomerVault $customer If customer_id is not included in the request, this customer record will be added to customer vault and a recurring payment will be added to the primary card.  Applicable only when adding subscriptions. Set use_existing_customer field to true, if system should re-use an existing customer. Set customer.auto_generate_customer_id to true if the customer_id should be auto generated when adding a customer.
     *
     * @return $this
     */
    public function setCustomer($customer)
    {
        $this->container['customer'] = $customer;

        return $this;
    }

    /**
     * Gets vendor_id
     *
     * @return int
     */
    public function getVendorId()
    {
        return $this->container['vendor_id'];
    }

    /**
     * Sets vendor_id
     *
     * @param int $vendor_id Identifies the vendor to which this request applies. Applicable only if this request is on behalf of another merchant.
     *
     * @return $this
     */
    public function setVendorId($vendor_id)
    {
        $this->container['vendor_id'] = $vendor_id;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


