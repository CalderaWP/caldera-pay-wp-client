<?php
/**
 * Transaction
 *
 * PHP version 5
 *
 * @category Class
 * @package  calderaPayQualpayPlatform
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Qualpay Platform API
 *
 * This document describes the Qualpay Platform API.
 *
 * OpenAPI spec version: 1.1.9
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.3.1
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace calderaPayQualpayPlatform\Model;

use \ArrayAccess;
use \calderaPayQualpayPlatform\ObjectSerializer;

/**
 * Transaction Class Doc Comment
 *
 * @category Class
 * @package  calderaPayQualpayPlatform
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class Transaction implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'Transaction';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'merchant_id' => 'int',
        'tran_time' => 'string',
        'tran_date' => 'string',
        'tran_status' => 'string',
        'auth_code' => 'string',
        'rcode' => 'string',
        'card_number' => 'string',
        'card_type' => 'string',
        'purchase_id' => 'string',
        'pg_id' => 'string',
        'cardholder_first_name' => 'string',
        'cardholder_last_name' => 'string',
        'amt_tran' => 'double',
        'tran_currency' => 'string',
        'dispute_flag' => 'bool',
        'amt_refunded' => 'double',
        'batch_number' => 'int',
        'dba_name' => 'string',
        'customer_id' => 'string',
        'subscription_id' => 'string',
        'merch_ref_num' => 'string',
        'batch_id' => 'int',
        'batch_date' => 'string',
        'settle_date' => 'string',
        'amt_funded' => 'double',
        'funded_currency' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'merchant_id' => 'int64',
        'tran_time' => null,
        'tran_date' => null,
        'tran_status' => null,
        'auth_code' => null,
        'rcode' => null,
        'card_number' => null,
        'card_type' => null,
        'purchase_id' => null,
        'pg_id' => null,
        'cardholder_first_name' => null,
        'cardholder_last_name' => null,
        'amt_tran' => 'double',
        'tran_currency' => null,
        'dispute_flag' => null,
        'amt_refunded' => 'double',
        'batch_number' => 'int64',
        'dba_name' => null,
        'customer_id' => null,
        'subscription_id' => null,
        'merch_ref_num' => null,
        'batch_id' => 'int64',
        'batch_date' => null,
        'settle_date' => null,
        'amt_funded' => 'double',
        'funded_currency' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'merchant_id' => 'merchant_id',
        'tran_time' => 'tran_time',
        'tran_date' => 'tran_date',
        'tran_status' => 'tran_status',
        'auth_code' => 'auth_code',
        'rcode' => 'rcode',
        'card_number' => 'card_number',
        'card_type' => 'card_type',
        'purchase_id' => 'purchase_id',
        'pg_id' => 'pg_id',
        'cardholder_first_name' => 'cardholder_first_name',
        'cardholder_last_name' => 'cardholder_last_name',
        'amt_tran' => 'amt_tran',
        'tran_currency' => 'tran_currency',
        'dispute_flag' => 'dispute_flag',
        'amt_refunded' => 'amt_refunded',
        'batch_number' => 'batch_number',
        'dba_name' => 'dba_name',
        'customer_id' => 'customer_id',
        'subscription_id' => 'subscription_id',
        'merch_ref_num' => 'merch_ref_num',
        'batch_id' => 'batch_id',
        'batch_date' => 'batch_date',
        'settle_date' => 'settle_date',
        'amt_funded' => 'amt_funded',
        'funded_currency' => 'funded_currency'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'merchant_id' => 'setMerchantId',
        'tran_time' => 'setTranTime',
        'tran_date' => 'setTranDate',
        'tran_status' => 'setTranStatus',
        'auth_code' => 'setAuthCode',
        'rcode' => 'setRcode',
        'card_number' => 'setCardNumber',
        'card_type' => 'setCardType',
        'purchase_id' => 'setPurchaseId',
        'pg_id' => 'setPgId',
        'cardholder_first_name' => 'setCardholderFirstName',
        'cardholder_last_name' => 'setCardholderLastName',
        'amt_tran' => 'setAmtTran',
        'tran_currency' => 'setTranCurrency',
        'dispute_flag' => 'setDisputeFlag',
        'amt_refunded' => 'setAmtRefunded',
        'batch_number' => 'setBatchNumber',
        'dba_name' => 'setDbaName',
        'customer_id' => 'setCustomerId',
        'subscription_id' => 'setSubscriptionId',
        'merch_ref_num' => 'setMerchRefNum',
        'batch_id' => 'setBatchId',
        'batch_date' => 'setBatchDate',
        'settle_date' => 'setSettleDate',
        'amt_funded' => 'setAmtFunded',
        'funded_currency' => 'setFundedCurrency'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'merchant_id' => 'getMerchantId',
        'tran_time' => 'getTranTime',
        'tran_date' => 'getTranDate',
        'tran_status' => 'getTranStatus',
        'auth_code' => 'getAuthCode',
        'rcode' => 'getRcode',
        'card_number' => 'getCardNumber',
        'card_type' => 'getCardType',
        'purchase_id' => 'getPurchaseId',
        'pg_id' => 'getPgId',
        'cardholder_first_name' => 'getCardholderFirstName',
        'cardholder_last_name' => 'getCardholderLastName',
        'amt_tran' => 'getAmtTran',
        'tran_currency' => 'getTranCurrency',
        'dispute_flag' => 'getDisputeFlag',
        'amt_refunded' => 'getAmtRefunded',
        'batch_number' => 'getBatchNumber',
        'dba_name' => 'getDbaName',
        'customer_id' => 'getCustomerId',
        'subscription_id' => 'getSubscriptionId',
        'merch_ref_num' => 'getMerchRefNum',
        'batch_id' => 'getBatchId',
        'batch_date' => 'getBatchDate',
        'settle_date' => 'getSettleDate',
        'amt_funded' => 'getAmtFunded',
        'funded_currency' => 'getFundedCurrency'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const CARD_TYPE_VS = 'VS';
    const CARD_TYPE_MC = 'MC';
    const CARD_TYPE_AM = 'AM';
    const CARD_TYPE_DS = 'DS';
    const CARD_TYPE_JC = 'JC';
    const CARD_TYPE_PP = 'PP';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getCardTypeAllowableValues()
    {
        return [
            self::CARD_TYPE_VS,
            self::CARD_TYPE_MC,
            self::CARD_TYPE_AM,
            self::CARD_TYPE_DS,
            self::CARD_TYPE_JC,
            self::CARD_TYPE_PP,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['merchant_id'] = isset($data['merchant_id']) ? $data['merchant_id'] : null;
        $this->container['tran_time'] = isset($data['tran_time']) ? $data['tran_time'] : null;
        $this->container['tran_date'] = isset($data['tran_date']) ? $data['tran_date'] : null;
        $this->container['tran_status'] = isset($data['tran_status']) ? $data['tran_status'] : null;
        $this->container['auth_code'] = isset($data['auth_code']) ? $data['auth_code'] : null;
        $this->container['rcode'] = isset($data['rcode']) ? $data['rcode'] : null;
        $this->container['card_number'] = isset($data['card_number']) ? $data['card_number'] : null;
        $this->container['card_type'] = isset($data['card_type']) ? $data['card_type'] : null;
        $this->container['purchase_id'] = isset($data['purchase_id']) ? $data['purchase_id'] : null;
        $this->container['pg_id'] = isset($data['pg_id']) ? $data['pg_id'] : null;
        $this->container['cardholder_first_name'] = isset($data['cardholder_first_name']) ? $data['cardholder_first_name'] : null;
        $this->container['cardholder_last_name'] = isset($data['cardholder_last_name']) ? $data['cardholder_last_name'] : null;
        $this->container['amt_tran'] = isset($data['amt_tran']) ? $data['amt_tran'] : null;
        $this->container['tran_currency'] = isset($data['tran_currency']) ? $data['tran_currency'] : null;
        $this->container['dispute_flag'] = isset($data['dispute_flag']) ? $data['dispute_flag'] : null;
        $this->container['amt_refunded'] = isset($data['amt_refunded']) ? $data['amt_refunded'] : null;
        $this->container['batch_number'] = isset($data['batch_number']) ? $data['batch_number'] : null;
        $this->container['dba_name'] = isset($data['dba_name']) ? $data['dba_name'] : null;
        $this->container['customer_id'] = isset($data['customer_id']) ? $data['customer_id'] : null;
        $this->container['subscription_id'] = isset($data['subscription_id']) ? $data['subscription_id'] : null;
        $this->container['merch_ref_num'] = isset($data['merch_ref_num']) ? $data['merch_ref_num'] : null;
        $this->container['batch_id'] = isset($data['batch_id']) ? $data['batch_id'] : null;
        $this->container['batch_date'] = isset($data['batch_date']) ? $data['batch_date'] : null;
        $this->container['settle_date'] = isset($data['settle_date']) ? $data['settle_date'] : null;
        $this->container['amt_funded'] = isset($data['amt_funded']) ? $data['amt_funded'] : null;
        $this->container['funded_currency'] = isset($data['funded_currency']) ? $data['funded_currency'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getCardTypeAllowableValues();
        if (!in_array($this->container['card_type'], $allowedValues)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'card_type', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        $allowedValues = $this->getCardTypeAllowableValues();
        if (!in_array($this->container['card_type'], $allowedValues)) {
            return false;
        }
        return true;
    }


    /**
     * Gets merchant_id
     *
     * @return int
     */
    public function getMerchantId()
    {
        return $this->container['merchant_id'];
    }

    /**
     * Sets merchant_id
     *
     * @param int $merchant_id Unique ID assigned by Qualpay to a Merchant
     *
     * @return $this
     */
    public function setMerchantId($merchant_id)
    {
        $this->container['merchant_id'] = $merchant_id;

        return $this;
    }

    /**
     * Gets tran_time
     *
     * @return string
     */
    public function getTranTime()
    {
        return $this->container['tran_time'];
    }

    /**
     * Sets tran_time
     *
     * @param string $tran_time Transaction Time in YYYY-MM-DD HH:MM:ss. All Times are Pacific Time.
     *
     * @return $this
     */
    public function setTranTime($tran_time)
    {
        $this->container['tran_time'] = $tran_time;

        return $this;
    }

    /**
     * Gets tran_date
     *
     * @return string
     */
    public function getTranDate()
    {
        return $this->container['tran_date'];
    }

    /**
     * Sets tran_date
     *
     * @param string $tran_date The date the transaction was captured by the merchant.
     *
     * @return $this
     */
    public function setTranDate($tran_date)
    {
        $this->container['tran_date'] = $tran_date;

        return $this;
    }

    /**
     * Gets tran_status
     *
     * @return string
     */
    public function getTranStatus()
    {
        return $this->container['tran_status'];
    }

    /**
     * Sets tran_status
     *
     * @param string $tran_status Transaction Status<ul><li>A - Transaction is approved</li><li>H - Transaction Held</li><li>C - Transaction is captured</li><li>V - Transaction is voided by Merchant</li><li>v - Transaction is voided by System</li><li>K - Transaction is cancelled</li><li>D - Transaction is declined by issuer</li><li>F - Transaction failures other than Issuer Declines</li><li>S - Transaction Settled</li><li>P - Deposit Sent</li><li>N - Transaction Settled, but will not be funded by Qualpay</li><li>R - Transaction Rejected</li></ul>
     *
     * @return $this
     */
    public function setTranStatus($tran_status)
    {
        $this->container['tran_status'] = $tran_status;

        return $this;
    }

    /**
     * Gets auth_code
     *
     * @return string
     */
    public function getAuthCode()
    {
        return $this->container['auth_code'];
    }

    /**
     * Sets auth_code
     *
     * @param string $auth_code Authorization Code from Issuer
     *
     * @return $this
     */
    public function setAuthCode($auth_code)
    {
        $this->container['auth_code'] = $auth_code;

        return $this;
    }

    /**
     * Gets rcode
     *
     * @return string
     */
    public function getRcode()
    {
        return $this->container['rcode'];
    }

    /**
     * Sets rcode
     *
     * @param string $rcode Gateway Response Code. Refer to <a href=\"/developer/api/reference#gateway-response-codes\"target=\"_blank\">Payment Gateway Response Codes</a> for Gateway Response Codes
     *
     * @return $this
     */
    public function setRcode($rcode)
    {
        $this->container['rcode'] = $rcode;

        return $this;
    }

    /**
     * Gets card_number
     *
     * @return string
     */
    public function getCardNumber()
    {
        return $this->container['card_number'];
    }

    /**
     * Sets card_number
     *
     * @param string $card_number Masked Card Number.
     *
     * @return $this
     */
    public function setCardNumber($card_number)
    {
        $this->container['card_number'] = $card_number;

        return $this;
    }

    /**
     * Gets card_type
     *
     * @return string
     */
    public function getCardType()
    {
        return $this->container['card_type'];
    }

    /**
     * Sets card_type
     *
     * @param string $card_type Card Type. The card type is derived from the card number. Refer to <a href=\"/developer/api/reference#card-types\"target=\"_blank\">Card Types</a> for a list of card types.
     *
     * @return $this
     */
    public function setCardType($card_type)
    {
        $allowedValues = $this->getCardTypeAllowableValues();
        if (!is_null($card_type) && !in_array($card_type, $allowedValues)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'card_type', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['card_type'] = $card_type;

        return $this;
    }

    /**
     * Gets purchase_id
     *
     * @return string
     */
    public function getPurchaseId()
    {
        return $this->container['purchase_id'];
    }

    /**
     * Sets purchase_id
     *
     * @param string $purchase_id Purchase ID of the transaction
     *
     * @return $this
     */
    public function setPurchaseId($purchase_id)
    {
        $this->container['purchase_id'] = $purchase_id;

        return $this;
    }

    /**
     * Gets pg_id
     *
     * @return string
     */
    public function getPgId()
    {
        return $this->container['pg_id'];
    }

    /**
     * Sets pg_id
     *
     * @param string $pg_id Qualpay generated Payment gateway ID of the transaction
     *
     * @return $this
     */
    public function setPgId($pg_id)
    {
        $this->container['pg_id'] = $pg_id;

        return $this;
    }

    /**
     * Gets cardholder_first_name
     *
     * @return string
     */
    public function getCardholderFirstName()
    {
        return $this->container['cardholder_first_name'];
    }

    /**
     * Sets cardholder_first_name
     *
     * @param string $cardholder_first_name First name of Card holder
     *
     * @return $this
     */
    public function setCardholderFirstName($cardholder_first_name)
    {
        $this->container['cardholder_first_name'] = $cardholder_first_name;

        return $this;
    }

    /**
     * Gets cardholder_last_name
     *
     * @return string
     */
    public function getCardholderLastName()
    {
        return $this->container['cardholder_last_name'];
    }

    /**
     * Sets cardholder_last_name
     *
     * @param string $cardholder_last_name Last name of Card holder
     *
     * @return $this
     */
    public function setCardholderLastName($cardholder_last_name)
    {
        $this->container['cardholder_last_name'] = $cardholder_last_name;

        return $this;
    }

    /**
     * Gets amt_tran
     *
     * @return double
     */
    public function getAmtTran()
    {
        return $this->container['amt_tran'];
    }

    /**
     * Sets amt_tran
     *
     * @param double $amt_tran Transaction Amount
     *
     * @return $this
     */
    public function setAmtTran($amt_tran)
    {
        $this->container['amt_tran'] = $amt_tran;

        return $this;
    }

    /**
     * Gets tran_currency
     *
     * @return string
     */
    public function getTranCurrency()
    {
        return $this->container['tran_currency'];
    }

    /**
     * Sets tran_currency
     *
     * @param string $tran_currency Numeric Currency Code. Refer to <a href=\"/developer/api/reference#country-codes\"target=\"_blank\">Country Codes</a> for a list of currency codes.
     *
     * @return $this
     */
    public function setTranCurrency($tran_currency)
    {
        $this->container['tran_currency'] = $tran_currency;

        return $this;
    }

    /**
     * Gets dispute_flag
     *
     * @return bool
     */
    public function getDisputeFlag()
    {
        return $this->container['dispute_flag'];
    }

    /**
     * Sets dispute_flag
     *
     * @param bool $dispute_flag Will be set to true if the transaction is disputed.
     *
     * @return $this
     */
    public function setDisputeFlag($dispute_flag)
    {
        $this->container['dispute_flag'] = $dispute_flag;

        return $this;
    }

    /**
     * Gets amt_refunded
     *
     * @return double
     */
    public function getAmtRefunded()
    {
        return $this->container['amt_refunded'];
    }

    /**
     * Sets amt_refunded
     *
     * @param double $amt_refunded Amount refunded if there are any refunds
     *
     * @return $this
     */
    public function setAmtRefunded($amt_refunded)
    {
        $this->container['amt_refunded'] = $amt_refunded;

        return $this;
    }

    /**
     * Gets batch_number
     *
     * @return int
     */
    public function getBatchNumber()
    {
        return $this->container['batch_number'];
    }

    /**
     * Sets batch_number
     *
     * @param int $batch_number Settlement Batch Number
     *
     * @return $this
     */
    public function setBatchNumber($batch_number)
    {
        $this->container['batch_number'] = $batch_number;

        return $this;
    }

    /**
     * Gets dba_name
     *
     * @return string
     */
    public function getDbaName()
    {
        return $this->container['dba_name'];
    }

    /**
     * Sets dba_name
     *
     * @param string $dba_name DBA name used in the transaction
     *
     * @return $this
     */
    public function setDbaName($dba_name)
    {
        $this->container['dba_name'] = $dba_name;

        return $this;
    }

    /**
     * Gets customer_id
     *
     * @return string
     */
    public function getCustomerId()
    {
        return $this->container['customer_id'];
    }

    /**
     * Sets customer_id
     *
     * @param string $customer_id Customer Vault ID
     *
     * @return $this
     */
    public function setCustomerId($customer_id)
    {
        $this->container['customer_id'] = $customer_id;

        return $this;
    }

    /**
     * Gets subscription_id
     *
     * @return string
     */
    public function getSubscriptionId()
    {
        return $this->container['subscription_id'];
    }

    /**
     * Sets subscription_id
     *
     * @param string $subscription_id Subscription Identifier
     *
     * @return $this
     */
    public function setSubscriptionId($subscription_id)
    {
        $this->container['subscription_id'] = $subscription_id;

        return $this;
    }

    /**
     * Gets merch_ref_num
     *
     * @return string
     */
    public function getMerchRefNum()
    {
        return $this->container['merch_ref_num'];
    }

    /**
     * Sets merch_ref_num
     *
     * @param string $merch_ref_num Merchant provided reference number for this transaction
     *
     * @return $this
     */
    public function setMerchRefNum($merch_ref_num)
    {
        $this->container['merch_ref_num'] = $merch_ref_num;

        return $this;
    }

    /**
     * Gets batch_id
     *
     * @return int
     */
    public function getBatchId()
    {
        return $this->container['batch_id'];
    }

    /**
     * Sets batch_id
     *
     * @param int $batch_id Unique ID assigned by Qualpay to this batch.
     *
     * @return $this
     */
    public function setBatchId($batch_id)
    {
        $this->container['batch_id'] = $batch_id;

        return $this;
    }

    /**
     * Gets batch_date
     *
     * @return string
     */
    public function getBatchDate()
    {
        return $this->container['batch_date'];
    }

    /**
     * Sets batch_date
     *
     * @param string $batch_date The date the batch was settled to Qualpay.
     *
     * @return $this
     */
    public function setBatchDate($batch_date)
    {
        $this->container['batch_date'] = $batch_date;

        return $this;
    }

    /**
     * Gets settle_date
     *
     * @return string
     */
    public function getSettleDate()
    {
        return $this->container['settle_date'];
    }

    /**
     * Sets settle_date
     *
     * @param string $settle_date The date Qualpay settled the transaction with the issuer.
     *
     * @return $this
     */
    public function setSettleDate($settle_date)
    {
        $this->container['settle_date'] = $settle_date;

        return $this;
    }

    /**
     * Gets amt_funded
     *
     * @return double
     */
    public function getAmtFunded()
    {
        return $this->container['amt_funded'];
    }

    /**
     * Sets amt_funded
     *
     * @param double $amt_funded The amount of this transaction funded to the merchant (in the funded currency).
     *
     * @return $this
     */
    public function setAmtFunded($amt_funded)
    {
        $this->container['amt_funded'] = $amt_funded;

        return $this;
    }

    /**
     * Gets funded_currency
     *
     * @return string
     */
    public function getFundedCurrency()
    {
        return $this->container['funded_currency'];
    }

    /**
     * Sets funded_currency
     *
     * @param string $funded_currency The ISO 4217 numeric currency code of the transaction.
     *
     * @return $this
     */
    public function setFundedCurrency($funded_currency)
    {
        $this->container['funded_currency'] = $funded_currency;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


